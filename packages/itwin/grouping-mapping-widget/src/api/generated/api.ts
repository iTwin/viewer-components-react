/*---------------------------------------------------------------------------------------------
* Copyright (c) Bentley Systems, Incorporated. All rights reserved.
* See LICENSE.md in the project root for license terms and full copyright notice.
*--------------------------------------------------------------------------------------------*/
/* eslint-disable */
//@ts-nocheck
// tslint:disable
/**
 * Reporting
 * Insights is a resource for aggregating iTwin data to build custom dashboards and integrate iTwin data with your business applications.    - Create digitial twin based reports which can be consumed through business intelligence applications such as Power BI.  - Leverage the OData feed Data Access to generate reports by combining data from multiple data streams in the digital twin.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import isomorphicFetch from "cross-fetch";
import { Configuration } from "./configuration";

export const BASE_PATH = "https://api.bentley.com/insights/reporting".replace(
  /\/+$/,
  ""
);

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = isomorphicFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 * List of Calculated Properties.
 * @export
 * @interface CalculatedPropertyCollectionReportingAPI
 */
export interface CalculatedPropertyCollectionReportingAPI {
  /**
   * List of Calculated Properties.
   * @type {Array<CalculatedPropertyReportingAPI>}
   * @memberof CalculatedPropertyCollectionReportingAPI
   */
  properties?: Array<CalculatedPropertyReportingAPI>;
  /**
   *
   * @type {PagedResponseLinksReportingAPI}
   * @memberof CalculatedPropertyCollectionReportingAPI
   */
  _links?: PagedResponseLinksReportingAPI;
}
/**
 * Properties of the Calculated Property to be created.
 * @export
 * @interface CalculatedPropertyCreateReportingAPI
 */
export interface CalculatedPropertyCreateReportingAPI {
  /**
   * Name of the Calculated Property.
   * @type {string}
   * @memberof CalculatedPropertyCreateReportingAPI
   */
  propertyName: string;
  /**
   * The type of the Calculated Property. One of 'Area', 'Length', 'Volume', 'BoundingBoxLongestEdgeLength', 'BoundingBoxIntermediateEdgeLength', 'BoundingBoxShortestEdgeLength', 'BoundingBoxDiagonalLength', 'BoundingBoxLongestFaceDiagonalLength', 'BoundingBoxIntermediateFaceDiagonalLength', 'BoundingBoxShortestFaceDiagonalLength'.
   * @type {string}
   * @memberof CalculatedPropertyCreateReportingAPI
   */
  type: string;
}
/**
 *
 * @export
 * @interface CalculatedPropertyLinksReportingAPI
 */
export interface CalculatedPropertyLinksReportingAPI {
  /**
   *
   * @type {LinkReportingAPI}
   * @memberof CalculatedPropertyLinksReportingAPI
   */
  imodel?: LinkReportingAPI;
  /**
   *
   * @type {LinkReportingAPI}
   * @memberof CalculatedPropertyLinksReportingAPI
   */
  mapping?: LinkReportingAPI;
  /**
   *
   * @type {LinkReportingAPI}
   * @memberof CalculatedPropertyLinksReportingAPI
   */
  group?: LinkReportingAPI;
}
/**
 * Defines a Calculated Property or 'column' for a Group. It is calculated for each element returned by the Group's query.
 * @export
 * @interface CalculatedPropertyReportingAPI
 */
export interface CalculatedPropertyReportingAPI {
  /**
   * The Calculated Property Id.
   * @type {string}
   * @memberof CalculatedPropertyReportingAPI
   */
  id?: string;
  /**
   * Name of the Property (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof CalculatedPropertyReportingAPI
   */
  propertyName?: string;
  /**
   * The type of the Calculated Property. One of 'Area', 'Length', 'Volume', 'BoundingBoxLongestEdgeLength', 'BoundingBoxIntermediateEdgeLength', 'BoundingBoxShortestEdgeLength', 'BoundingBoxDiagonalLength', 'BoundingBoxLongestFaceDiagonalLength', 'BoundingBoxIntermediateFaceDiagonalLength', 'BoundingBoxShortestFaceDiagonalLength'.
   * @type {string}
   * @memberof CalculatedPropertyReportingAPI
   */
  type?: string;
  /**
   * The quantity type of the Calculated Property. One of 'Area', 'Distance', 'Force', 'Mass', 'Monetary', 'Time', 'Volume, or 'Undefined'.
   * @type {string}
   * @memberof CalculatedPropertyReportingAPI
   */
  quantityType?: string;
  /**
   *
   * @type {CalculatedPropertyLinksReportingAPI}
   * @memberof CalculatedPropertyReportingAPI
   */
  _links?: CalculatedPropertyLinksReportingAPI;
}
/**
 * Container for a Calculated Property object.
 * @export
 * @interface CalculatedPropertySingleReportingAPI
 */
export interface CalculatedPropertySingleReportingAPI {
  /**
   *
   * @type {CalculatedPropertyReportingAPI}
   * @memberof CalculatedPropertySingleReportingAPI
   */
  property?: CalculatedPropertyReportingAPI;
}
/**
 * Properties of the Calculated Property to be updated.
 * @export
 * @interface CalculatedPropertyUpdateReportingAPI
 */
export interface CalculatedPropertyUpdateReportingAPI {
  /**
   * Name of the Calculated Property.
   * @type {string}
   * @memberof CalculatedPropertyUpdateReportingAPI
   */
  propertyName?: string;
  /**
   * The type of the Calculated Property. One of 'Area', 'Length', 'Volume', 'BoundingBoxLongestEdgeLength', 'BoundingBoxIntermediateEdgeLength', 'BoundingBoxShortestEdgeLength', 'BoundingBoxDiagonalLength', 'BoundingBoxLongestFaceDiagonalLength', 'BoundingBoxIntermediateFaceDiagonalLength', 'BoundingBoxShortestFaceDiagonalLength'.
   * @type {string}
   * @memberof CalculatedPropertyUpdateReportingAPI
   */
  type?: string;
}
/**
 * Defines a target ECProperty for a Group. This is used to determine what properties will be read from the query response of a Group.
 * @export
 * @interface ECPropertyReportingAPI
 */
export interface ECPropertyReportingAPI {
  /**
   * The target ECSchema.
   * @type {string}
   * @memberof ECPropertyReportingAPI
   */
  ecSchemaName?: string;
  /**
   * The target ECClass.
   * @type {string}
   * @memberof ECPropertyReportingAPI
   */
  ecClassName?: string;
  /**
   * The target ECProperty.
   * @type {string}
   * @memberof ECPropertyReportingAPI
   */
  ecPropertyName?: string;
  /**
   * The type of the target ECProperty.
   * @type {string}
   * @memberof ECPropertyReportingAPI
   */
  ecPropertyType?: string;
}
/**
 * Error information.
 * @export
 * @interface ErrorResponseErrorReportingAPI
 */
export interface ErrorResponseErrorReportingAPI {
  /**
   * One of a server-defined set of error codes.
   * @type {string}
   * @memberof ErrorResponseErrorReportingAPI
   */
  code?: string;
  /**
   * A human-readable representation of the error.
   * @type {string}
   * @memberof ErrorResponseErrorReportingAPI
   */
  message?: string;
}
/**
 * Gives details for an error that occurred while handling the request. Note that clients MUST NOT assume that every failed request will produce an object of this schema, or that all of the properties in the response will be non-null, as the error may have prevented this response from being constructed.
 * @export
 * @interface ErrorResponseReportingAPI
 */
export interface ErrorResponseReportingAPI {
  /**
   *
   * @type {ErrorResponseErrorReportingAPI}
   * @memberof ErrorResponseReportingAPI
   */
  error?: ErrorResponseErrorReportingAPI;
}
/**
 * Metadata associated with a data extraction run.
 * @export
 * @interface ExtractionRunReportingAPI
 */
export interface ExtractionRunReportingAPI {
  /**
   *
   * @type {ExtractionRunRunReportingAPI}
   * @memberof ExtractionRunReportingAPI
   */
  run?: ExtractionRunRunReportingAPI;
}
/**
 * Extraction Run properties.
 * @export
 * @interface ExtractionRunRunReportingAPI
 */
export interface ExtractionRunRunReportingAPI {
  /**
   * Unique Identifier for the Extraction Run. Use this to check run status.
   * @type {string}
   * @memberof ExtractionRunRunReportingAPI
   */
  id?: string;
}
/**
 * Status of the specified Extraction Run.
 * @export
 * @interface ExtractionStatusReportingAPI
 */
export interface ExtractionStatusReportingAPI {
  /**
   *
   * @type {ExtractionStatusStatusReportingAPI}
   * @memberof ExtractionStatusReportingAPI
   */
  status?: ExtractionStatusStatusReportingAPI;
}
/**
 * Extraction Status properties.
 * @export
 * @interface ExtractionStatusStatusReportingAPI
 */
export interface ExtractionStatusStatusReportingAPI {
  /**
   * Current state of the Extraction Run - 'Running', 'Succeeded', or 'Failed'.
   * @type {string}
   * @memberof ExtractionStatusStatusReportingAPI
   */
  state?: string;
  /**
   * Additional justification for the current state of the Extraction Run.
   * @type {string}
   * @memberof ExtractionStatusStatusReportingAPI
   */
  reason?: string;
}
/**
 * List of Groups.
 * @export
 * @interface GroupCollectionReportingAPI
 */
export interface GroupCollectionReportingAPI {
  /**
   * List of Groups.
   * @type {Array<GroupReportingAPI>}
   * @memberof GroupCollectionReportingAPI
   */
  groups?: Array<GroupReportingAPI>;
  /**
   *
   * @type {PagedResponseLinksReportingAPI}
   * @memberof GroupCollectionReportingAPI
   */
  _links?: PagedResponseLinksReportingAPI;
}
/**
 * Properties of the Group to be created.
 * @export
 * @interface GroupCreateReportingAPI
 */
export interface GroupCreateReportingAPI {
  /**
   * Name of the Group (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof GroupCreateReportingAPI
   */
  groupName?: string;
  /**
   * Description of the Group.
   * @type {string}
   * @memberof GroupCreateReportingAPI
   */
  description?: string;
  /**
   * Query string that will be executed against the target iModel to build this Group.
   * @type {string}
   * @memberof GroupCreateReportingAPI
   */
  query?: string;
}
/**
 * List of Group Properties.
 * @export
 * @interface GroupPropertyCollectionReportingAPI
 */
export interface GroupPropertyCollectionReportingAPI {
  /**
   * List of Group Properties.
   * @type {Array<GroupPropertyReportingAPI>}
   * @memberof GroupPropertyCollectionReportingAPI
   */
  properties?: Array<GroupPropertyReportingAPI>;
  /**
   *
   * @type {PagedResponseLinksReportingAPI}
   * @memberof GroupPropertyCollectionReportingAPI
   */
  _links?: PagedResponseLinksReportingAPI;
}
/**
 * Properties of the Group Property to be created.
 * @export
 * @interface GroupPropertyCreateReportingAPI
 */
export interface GroupPropertyCreateReportingAPI {
  /**
   * Name of the Property (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof GroupPropertyCreateReportingAPI
   */
  propertyName?: string;
  /**
   * The data type of the Group Property. One of 'Boolean', 'Number', 'String', or 'Undefined'.
   * @type {string}
   * @memberof GroupPropertyCreateReportingAPI
   */
  dataType?: string;
  /**
   * The quantity type of the Group Property. One of 'Area', 'Distance', 'Force', 'Mass', 'Monetary', 'Time', 'Volume, or 'Undefined'.
   * @type {string}
   * @memberof GroupPropertyCreateReportingAPI
   */
  quantityType?: string;
  /**
   * List of ECProperties that map to this Group Property.
   * @type {Array<ECPropertyReportingAPI>}
   * @memberof GroupPropertyCreateReportingAPI
   */
  ecProperties?: Array<ECPropertyReportingAPI>;
}
/**
 * Defines a one-to-many property mapping to a set of ECProperties for a Group - to be used when a Group query will return data from multiple ECClasses.
 * @export
 * @interface GroupPropertyReportingAPI
 */
export interface GroupPropertyReportingAPI {
  /**
   * The Group Property Id.
   * @type {string}
   * @memberof GroupPropertyReportingAPI
   */
  id?: string;
  /**
   * Name of the Property (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof GroupPropertyReportingAPI
   */
  propertyName?: string;
  /**
   * The data type of the Group Property. One of 'Boolean', 'Number', 'String', or 'Undefined'.
   * @type {string}
   * @memberof GroupPropertyReportingAPI
   */
  dataType?: string;
  /**
   * The quantity type of the Group Property. One of 'Area', 'Distance', 'Force', 'Mass', 'Monetary', 'Time', 'Volume, or 'Undefined'.
   * @type {string}
   * @memberof GroupPropertyReportingAPI
   */
  quantityType?: string;
  /**
   * List of ECProperties that map to this Group Property.
   * @type {Array<ECPropertyReportingAPI>}
   * @memberof GroupPropertyReportingAPI
   */
  ecProperties?: Array<ECPropertyReportingAPI>;
}
/**
 * Container for a Group Property object.
 * @export
 * @interface GroupPropertySingleReportingAPI
 */
export interface GroupPropertySingleReportingAPI {
  /**
   *
   * @type {GroupPropertyReportingAPI}
   * @memberof GroupPropertySingleReportingAPI
   */
  property?: GroupPropertyReportingAPI;
}
/**
 * Properties of the Group Property to be updated.
 * @export
 * @interface GroupPropertyUpdateReportingAPI
 */
export interface GroupPropertyUpdateReportingAPI {
  /**
   * Name of the Property (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof GroupPropertyUpdateReportingAPI
   */
  propertyName?: string;
  /**
   * The data type of the Group Property. One of 'Boolean', 'Number', 'String', or 'Undefined'.
   * @type {string}
   * @memberof GroupPropertyUpdateReportingAPI
   */
  dataType?: string;
  /**
   * The quantity type of the Group Property. One of 'Area', 'Distance', 'Force', 'Mass', 'Monetary', 'Time', 'Volume, or 'Undefined'.
   * @type {string}
   * @memberof GroupPropertyUpdateReportingAPI
   */
  quantityType?: string;
  /**
   * List of ECProperties that map to this Group Property.
   * @type {Array<ECPropertyReportingAPI>}
   * @memberof GroupPropertyUpdateReportingAPI
   */
  ecProperties?: Array<ECPropertyReportingAPI>;
}
/**
 * Defines a single Group (collection of iModel elements) in an iModel Mapping.
 * @export
 * @interface GroupReportingAPI
 */
export interface GroupReportingAPI {
  /**
   * The Group Id.
   * @type {string}
   * @memberof GroupReportingAPI
   */
  id?: string;
  /**
   * Name of the Group (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof GroupReportingAPI
   */
  groupName?: string;
  /**
   * Description of the Group.
   * @type {string}
   * @memberof GroupReportingAPI
   */
  description?: string;
  /**
   * Query string that will be executed against the target iModel to build this Group.
   * @type {string}
   * @memberof GroupReportingAPI
   */
  query?: string;
}
/**
 * Container for a Group object.
 * @export
 * @interface GroupSingleReportingAPI
 */
export interface GroupSingleReportingAPI {
  /**
   *
   * @type {GroupReportingAPI}
   * @memberof GroupSingleReportingAPI
   */
  group?: GroupReportingAPI;
}
/**
 * Properties of the Group to be updated.
 * @export
 * @interface GroupUpdateReportingAPI
 */
export interface GroupUpdateReportingAPI {
  /**
   * Name of the Group (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof GroupUpdateReportingAPI
   */
  groupName?: string;
  /**
   * Description of the Group.
   * @type {string}
   * @memberof GroupUpdateReportingAPI
   */
  description?: string;
  /**
   * Query string that will be executed against the target iModel to build this Group.
   * @type {string}
   * @memberof GroupUpdateReportingAPI
   */
  query?: string;
}
/**
 * Hyperlink container.
 * @export
 * @interface LinkReportingAPI
 */
export interface LinkReportingAPI {
  /**
   * Hyperlink to the specific entity.
   * @type {string}
   * @memberof LinkReportingAPI
   */
  href?: string;
}
/**
 * List of Mappings.
 * @export
 * @interface MappingCollectionReportingAPI
 */
export interface MappingCollectionReportingAPI {
  /**
   * List of Mappings.
   * @type {Array<MappingReportingAPI>}
   * @memberof MappingCollectionReportingAPI
   */
  mappings?: Array<MappingReportingAPI>;
  /**
   *
   * @type {PagedResponseLinksReportingAPI}
   * @memberof MappingCollectionReportingAPI
   */
  _links?: PagedResponseLinksReportingAPI;
}
/**
 * Properties of the Mapping to be created.
 * @export
 * @interface MappingCreateReportingAPI
 */
export interface MappingCreateReportingAPI {
  /**
   * Name of the Mapping (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof MappingCreateReportingAPI
   */
  mappingName?: string;
  /**
   * Description of the Mapping.
   * @type {string}
   * @memberof MappingCreateReportingAPI
   */
  description?: string;
}
/**
 * Contains contextual hyperlinks to related data.
 * @export
 * @interface MappingLinksReportingAPI
 */
export interface MappingLinksReportingAPI {
  /**
   *
   * @type {LinkReportingAPI}
   * @memberof MappingLinksReportingAPI
   */
  imodel?: LinkReportingAPI;
}
/**
 * Defines a Mapping for an iModel. Each mapping represents a collection of 'Groups', sets of iModel elements, and their properties of interest.
 * @export
 * @interface MappingReportingAPI
 */
export interface MappingReportingAPI {
  /**
   * The Mapping Id.
   * @type {string}
   * @memberof MappingReportingAPI
   */
  id?: string;
  /**
   * Name of the Mapping (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof MappingReportingAPI
   */
  mappingName?: string;
  /**
   * Description of the Mapping.
   * @type {string}
   * @memberof MappingReportingAPI
   */
  description?: string;
  /**
   *
   * @type {MappingLinksReportingAPI}
   * @memberof MappingReportingAPI
   */
  _links?: MappingLinksReportingAPI;
}
/**
 * Container for a Mapping object.
 * @export
 * @interface MappingSingleReportingAPI
 */
export interface MappingSingleReportingAPI {
  /**
   *
   * @type {MappingReportingAPI}
   * @memberof MappingSingleReportingAPI
   */
  mapping?: MappingReportingAPI;
}
/**
 * Properties of the Mapping to be updated.
 * @export
 * @interface MappingUpdateReportingAPI
 */
export interface MappingUpdateReportingAPI {
  /**
   * Name of the Mapping (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof MappingUpdateReportingAPI
   */
  mappingName?: string;
  /**
   * Description of the Mapping.
   * @type {string}
   * @memberof MappingUpdateReportingAPI
   */
  description?: string;
}
/**
 *
 * @export
 * @interface ODataItemReportingAPI
 */
export interface ODataItemReportingAPI {
  /**
   *
   * @type {string}
   * @memberof ODataItemReportingAPI
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ODataItemReportingAPI
   */
  url?: string;
}
/**
 * OData response.
 * @export
 * @interface ODataResponseReportingAPI
 */
export interface ODataResponseReportingAPI {
  /**
   *
   * @type {ODataResponseStatusReportingAPI}
   * @memberof ODataResponseReportingAPI
   */
  status?: ODataResponseStatusReportingAPI;
}
/**
 * OData response.
 * @export
 * @interface ODataResponseStatusReportingAPI
 */
export interface ODataResponseStatusReportingAPI {
  /**
   * OData Schema
   * @type {string}
   * @memberof ODataResponseStatusReportingAPI
   */
  odata_context?: string;
  /**
   *
   * @type {Array<ODataItemReportingAPI>}
   * @memberof ODataResponseStatusReportingAPI
   */
  value?: Array<ODataItemReportingAPI>;
}
/**
 * URLs for redoing the current request and/or getting the next page of results if applicable.
 * @export
 * @interface PagedResponseLinksReportingAPI
 */
export interface PagedResponseLinksReportingAPI {
  /**
   *
   * @type {LinkReportingAPI}
   * @memberof PagedResponseLinksReportingAPI
   */
  next?: LinkReportingAPI;
  /**
   *
   * @type {LinkReportingAPI}
   * @memberof PagedResponseLinksReportingAPI
   */
  self?: LinkReportingAPI;
}
/**
 * List of Reports.
 * @export
 * @interface ReportCollectionReportingAPI
 */
export interface ReportCollectionReportingAPI {
  /**
   * List of Reports.
   * @type {Array<ReportReportingAPI>}
   * @memberof ReportCollectionReportingAPI
   */
  reports?: Array<ReportReportingAPI>;
  /**
   *
   * @type {PagedResponseLinksReportingAPI}
   * @memberof ReportCollectionReportingAPI
   */
  _links?: PagedResponseLinksReportingAPI;
}
/**
 * Properties of the Report to be created.
 * @export
 * @interface ReportCreateReportingAPI
 */
export interface ReportCreateReportingAPI {
  /**
   * Name of the Report.
   * @type {string}
   * @memberof ReportCreateReportingAPI
   */
  displayName?: string;
  /**
   * Description of the Report.
   * @type {string}
   * @memberof ReportCreateReportingAPI
   */
  description?: string;
  /**
   * The Project Id this Report will be drawing data from.
   * @type {string}
   * @memberof ReportCreateReportingAPI
   */
  projectId?: string;
}
/**
 * Contains contextual hyperlinks to related data.
 * @export
 * @interface ReportLinksReportingAPI
 */
export interface ReportLinksReportingAPI {
  /**
   *
   * @type {LinkReportingAPI}
   * @memberof ReportLinksReportingAPI
   */
  project?: LinkReportingAPI;
}
/**
 * List of Report Mappings.
 * @export
 * @interface ReportMappingCollectionReportingAPI
 */
export interface ReportMappingCollectionReportingAPI {
  /**
   * List of Report Mappings.
   * @type {Array<ReportMappingReportingAPI>}
   * @memberof ReportMappingCollectionReportingAPI
   */
  mappings?: Array<ReportMappingReportingAPI>;
  /**
   *
   * @type {PagedResponseLinksReportingAPI}
   * @memberof ReportMappingCollectionReportingAPI
   */
  _links?: PagedResponseLinksReportingAPI;
}
/**
 * Properties of the Report Mapping to be created.
 * @export
 * @interface ReportMappingCreateReportingAPI
 */
export interface ReportMappingCreateReportingAPI {
  /**
   * The Mapping Id that should be linked to this Report.
   * @type {string}
   * @memberof ReportMappingCreateReportingAPI
   */
  mappingId?: string;
  /**
   * The iModel Id.
   * @type {string}
   * @memberof ReportMappingCreateReportingAPI
   */
  imodelId?: string;
}
/**
 * Contains contextual hyperlinks to related data.
 * @export
 * @interface ReportMappingLinksReportingAPI
 */
export interface ReportMappingLinksReportingAPI {
  /**
   *
   * @type {LinkReportingAPI}
   * @memberof ReportMappingLinksReportingAPI
   */
  report?: LinkReportingAPI;
  /**
   *
   * @type {LinkReportingAPI}
   * @memberof ReportMappingLinksReportingAPI
   */
  mapping?: LinkReportingAPI;
  /**
   *
   * @type {LinkReportingAPI}
   * @memberof ReportMappingLinksReportingAPI
   */
  imodel?: LinkReportingAPI;
}
/**
 * Defines a relationship between Report and Mapping. A Mapping can be associated with more than one Report.
 * @export
 * @interface ReportMappingReportingAPI
 */
export interface ReportMappingReportingAPI {
  /**
   * The Report Id.
   * @type {string}
   * @memberof ReportMappingReportingAPI
   */
  reportId?: string;
  /**
   * The Mapping Id.
   * @type {string}
   * @memberof ReportMappingReportingAPI
   */
  mappingId?: string;
  /**
   * The iModel Id.
   * @type {string}
   * @memberof ReportMappingReportingAPI
   */
  imodelId?: string;
  /**
   *
   * @type {ReportMappingLinksReportingAPI}
   * @memberof ReportMappingReportingAPI
   */
  _links?: ReportMappingLinksReportingAPI;
}
/**
 * Container for a Report Mapping object.
 * @export
 * @interface ReportMappingSingleReportingAPI
 */
export interface ReportMappingSingleReportingAPI {
  /**
   *
   * @type {ReportMappingReportingAPI}
   * @memberof ReportMappingSingleReportingAPI
   */
  mapping?: ReportMappingReportingAPI;
}
/**
 * Defines a unit of data that can be exposed as an OData feed. The contents of a Report are defined in Report Mappings.
 * @export
 * @interface ReportReportingAPI
 */
export interface ReportReportingAPI {
  /**
   * The Report Id.
   * @type {string}
   * @memberof ReportReportingAPI
   */
  id?: string;
  /**
   * Name of the Report.
   * @type {string}
   * @memberof ReportReportingAPI
   */
  displayName?: string;
  /**
   * Description of the Report.
   * @type {string}
   * @memberof ReportReportingAPI
   */
  description?: string;
  /**
   * Flag indicating whether or not a Report has been marked for deletion.
   * @type {boolean}
   * @memberof ReportReportingAPI
   */
  deleted?: boolean;
  /**
   *
   * @type {ReportLinksReportingAPI}
   * @memberof ReportReportingAPI
   */
  _links?: ReportLinksReportingAPI;
}
/**
 * Container for a Report object.
 * @export
 * @interface ReportSingleReportingAPI
 */
export interface ReportSingleReportingAPI {
  /**
   *
   * @type {ReportReportingAPI}
   * @memberof ReportSingleReportingAPI
   */
  report?: ReportReportingAPI;
}
/**
 * Properties of the Report to be updated.
 * @export
 * @interface ReportUpdateReportingAPI
 */
export interface ReportUpdateReportingAPI {
  /**
   * Name of the Report.
   * @type {string}
   * @memberof ReportUpdateReportingAPI
   */
  displayName?: string;
  /**
   * Description of the Report.
   * @type {string}
   * @memberof ReportUpdateReportingAPI
   */
  description?: string;
  /**
   * Flag indicating whether or not a Report has been marked for deletion.
   * @type {boolean}
   * @memberof ReportUpdateReportingAPI
   */
  deleted?: boolean;
}
/**
 * DataAccessApi - fetch parameter creator
 * @export
 */
export const DataAccessApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Lists all OData Entities for a Report. This endpoint can be used as an OData feed in applications like Excel or Power BI.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Export
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _export(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          "reportId",
          "Required parameter reportId was null or undefined when calling _export."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling _export."
        );
      }
      const localVarPath = `/export/{reportId}`.replace(
        `{${"reportId"}}`,
        encodeURIComponent(String(reportId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Lists the raw table data for a Report Entity.     ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Export Entity
     * @param {string} reportId The Report Id.
     * @param {string} region NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the Export endpoint directly.
     * @param {string} manifestId NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the Export endpoint directly.
     * @param {string} entityType NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the Export endpoint directly.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportEntity(
      reportId: string,
      region: string,
      manifestId: string,
      entityType: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          "reportId",
          "Required parameter reportId was null or undefined when calling exportEntity."
        );
      }
      // verify required parameter 'region' is not null or undefined
      if (region === null || region === undefined) {
        throw new RequiredError(
          "region",
          "Required parameter region was null or undefined when calling exportEntity."
        );
      }
      // verify required parameter 'manifestId' is not null or undefined
      if (manifestId === null || manifestId === undefined) {
        throw new RequiredError(
          "manifestId",
          "Required parameter manifestId was null or undefined when calling exportEntity."
        );
      }
      // verify required parameter 'entityType' is not null or undefined
      if (entityType === null || entityType === undefined) {
        throw new RequiredError(
          "entityType",
          "Required parameter entityType was null or undefined when calling exportEntity."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling exportEntity."
        );
      }
      const localVarPath = `/export/{reportId}/{region}/{manifestId}/{entityType}`
        .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)))
        .replace(`{${"region"}}`, encodeURIComponent(String(region)))
        .replace(`{${"manifestId"}}`, encodeURIComponent(String(manifestId)))
        .replace(`{${"entityType"}}`, encodeURIComponent(String(entityType)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Lists schemas for all Entities tied to a Report.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Export Metadata
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportMetadata(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          "reportId",
          "Required parameter reportId was null or undefined when calling exportMetadata."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling exportMetadata."
        );
      }
      const localVarPath = `/export/{reportId}/$metadata`.replace(
        `{${"reportId"}}`,
        encodeURIComponent(String(reportId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DataAccessApi - functional programming interface
 * @export
 */
export const DataAccessApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Lists all OData Entities for a Report. This endpoint can be used as an OData feed in applications like Excel or Power BI.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Export
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _export(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ODataResponseReportingAPI> {
      const localVarFetchArgs = DataAccessApiFetchParamCreator(
        configuration
      )._export(reportId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Lists the raw table data for a Report Entity.     ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Export Entity
     * @param {string} reportId The Report Id.
     * @param {string} region NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the Export endpoint directly.
     * @param {string} manifestId NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the Export endpoint directly.
     * @param {string} entityType NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the Export endpoint directly.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportEntity(
      reportId: string,
      region: string,
      manifestId: string,
      entityType: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataAccessApiFetchParamCreator(
        configuration
      ).exportEntity(
        reportId,
        region,
        manifestId,
        entityType,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Lists schemas for all Entities tied to a Report.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Export Metadata
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportMetadata(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataAccessApiFetchParamCreator(
        configuration
      ).exportMetadata(reportId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * DataAccessApi - factory interface
 * @export
 */
export const DataAccessApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Lists all OData Entities for a Report. This endpoint can be used as an OData feed in applications like Excel or Power BI.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Export
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _export(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return DataAccessApiFp(configuration)._export(
        reportId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Lists the raw table data for a Report Entity.     ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Export Entity
     * @param {string} reportId The Report Id.
     * @param {string} region NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the Export endpoint directly.
     * @param {string} manifestId NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the Export endpoint directly.
     * @param {string} entityType NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the Export endpoint directly.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportEntity(
      reportId: string,
      region: string,
      manifestId: string,
      entityType: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return DataAccessApiFp(configuration).exportEntity(
        reportId,
        region,
        manifestId,
        entityType,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Lists schemas for all Entities tied to a Report.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Export Metadata
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportMetadata(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return DataAccessApiFp(configuration).exportMetadata(
        reportId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * DataAccessApi - object-oriented interface
 * @export
 * @class DataAccessApi
 * @extends {BaseAPI}
 */
export class DataAccessApi extends BaseAPI {
  /**
   * ---    Lists all OData Entities for a Report. This endpoint can be used as an OData feed in applications like Excel or Power BI.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Export
   * @param {string} reportId The Report Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataAccessApi
   */
  public _export(
    reportId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return DataAccessApiFp(this.configuration)._export(
      reportId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Lists the raw table data for a Report Entity.     ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Export Entity
   * @param {string} reportId The Report Id.
   * @param {string} region NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the Export endpoint directly.
   * @param {string} manifestId NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the Export endpoint directly.
   * @param {string} entityType NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the Export endpoint directly.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataAccessApi
   */
  public exportEntity(
    reportId: string,
    region: string,
    manifestId: string,
    entityType: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return DataAccessApiFp(this.configuration).exportEntity(
      reportId,
      region,
      manifestId,
      entityType,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Lists schemas for all Entities tied to a Report.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Export Metadata
   * @param {string} reportId The Report Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataAccessApi
   */
  public exportMetadata(
    reportId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return DataAccessApiFp(this.configuration).exportMetadata(
      reportId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
/**
 * ExtractionApi - fetch parameter creator
 * @export
 */
export const ExtractionApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Gets the Status of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Extraction Status
     * @param {string} imodelId Globally Unique Identifier of the target iModel.
     * @param {string} jobId Unique Identifier of the Extraction Run.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtractionStatus(
      imodelId: string,
      jobId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getExtractionStatus."
        );
      }
      // verify required parameter 'jobId' is not null or undefined
      if (jobId === null || jobId === undefined) {
        throw new RequiredError(
          "jobId",
          "Required parameter jobId was null or undefined when calling getExtractionStatus."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getExtractionStatus."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/extraction/status/{jobId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Used to trigger Extraction of data from an iModel. For the iModel data source, data must be Extracted first before it can be used in your Reports.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Run Extraction
     * @param {string} imodelId The iModel Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runExtraction(
      imodelId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling runExtraction."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling runExtraction."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/extraction/run`.replace(
        `{${"imodelId"}}`,
        encodeURIComponent(String(imodelId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ExtractionApi - functional programming interface
 * @export
 */
export const ExtractionApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Gets the Status of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Extraction Status
     * @param {string} imodelId Globally Unique Identifier of the target iModel.
     * @param {string} jobId Unique Identifier of the Extraction Run.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtractionStatus(
      imodelId: string,
      jobId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ExtractionStatusReportingAPI> {
      const localVarFetchArgs = ExtractionApiFetchParamCreator(
        configuration
      ).getExtractionStatus(imodelId, jobId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Used to trigger Extraction of data from an iModel. For the iModel data source, data must be Extracted first before it can be used in your Reports.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Run Extraction
     * @param {string} imodelId The iModel Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runExtraction(
      imodelId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ExtractionRunReportingAPI> {
      const localVarFetchArgs = ExtractionApiFetchParamCreator(
        configuration
      ).runExtraction(imodelId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ExtractionApi - factory interface
 * @export
 */
export const ExtractionApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Gets the Status of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Extraction Status
     * @param {string} imodelId Globally Unique Identifier of the target iModel.
     * @param {string} jobId Unique Identifier of the Extraction Run.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtractionStatus(
      imodelId: string,
      jobId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ExtractionApiFp(configuration).getExtractionStatus(
        imodelId,
        jobId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Used to trigger Extraction of data from an iModel. For the iModel data source, data must be Extracted first before it can be used in your Reports.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Run Extraction
     * @param {string} imodelId The iModel Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runExtraction(
      imodelId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ExtractionApiFp(configuration).runExtraction(
        imodelId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * ExtractionApi - object-oriented interface
 * @export
 * @class ExtractionApi
 * @extends {BaseAPI}
 */
export class ExtractionApi extends BaseAPI {
  /**
   * ---    Gets the Status of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Extraction Status
   * @param {string} imodelId Globally Unique Identifier of the target iModel.
   * @param {string} jobId Unique Identifier of the Extraction Run.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExtractionApi
   */
  public getExtractionStatus(
    imodelId: string,
    jobId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ExtractionApiFp(this.configuration).getExtractionStatus(
      imodelId,
      jobId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Used to trigger Extraction of data from an iModel. For the iModel data source, data must be Extracted first before it can be used in your Reports.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Run Extraction
   * @param {string} imodelId The iModel Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExtractionApi
   */
  public runExtraction(
    imodelId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ExtractionApiFp(this.configuration).runExtraction(
      imodelId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
/**
 * MappingsApi - fetch parameter creator
 * @export
 */
export const MappingsApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Creates a Calculated Property for a Group. Each Calculated Property defines a property or 'column' which is calculated for each element that is returned by the Group's query.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Calculated Property
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new CalculatedProperty.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CalculatedPropertyCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: CalculatedPropertyCreateReportingAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling createCalculatedproperty."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling createCalculatedproperty."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling createCalculatedproperty."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createCalculatedproperty."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/calculatedProperties`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"CalculatedPropertyCreateReportingAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Creates a Group for an iModel data source Mappping. A Group is a collection of design elements from an iModel represented by an [ECSQL](https://www.itwinjs.org/learning/ecsql/) query and defines one table in the output data of a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping for which to create a new Group.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: GroupCreateReportingAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling createGroup."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling createGroup."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createGroup."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"GroupCreateReportingAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Creates a Group Property for a Group. Each Group Property defines a property or 'column' of data desired from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new GroupProperty.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupPropertyCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: GroupPropertyCreateReportingAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling createGroupproperty."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling createGroupproperty."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling createGroupproperty."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createGroupproperty."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/properties`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"GroupPropertyCreateReportingAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Creates a Mapping for an iModel. Each Mapping represents a collection of tables (Groups) of data that can be consumed in a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Mapping
     * @param {string} imodelId Id of the iModel for which to create a new Mapping.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMapping(
      imodelId: string,
      Authorization: string,
      body?: MappingCreateReportingAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling createMapping."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createMapping."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings`.replace(
        `{${"imodelId"}}`,
        encodeURIComponent(String(imodelId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"MappingCreateReportingAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a Calculated Property from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Calculated Property
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the CalculatedProperty to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling deleteCalculatedproperty."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling deleteCalculatedproperty."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling deleteCalculatedproperty."
        );
      }
      // verify required parameter 'propertyId' is not null or undefined
      if (propertyId === null || propertyId === undefined) {
        throw new RequiredError(
          "propertyId",
          "Required parameter propertyId was null or undefined when calling deleteCalculatedproperty."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteCalculatedproperty."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/calculatedProperties/{propertyId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
        .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling deleteGroup."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling deleteGroup."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling deleteGroup."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteGroup."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a Group Property from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the GroupProperty to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling deleteGroupproperty."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling deleteGroupproperty."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling deleteGroupproperty."
        );
      }
      // verify required parameter 'propertyId' is not null or undefined
      if (propertyId === null || propertyId === undefined) {
        throw new RequiredError(
          "propertyId",
          "Required parameter propertyId was null or undefined when calling deleteGroupproperty."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteGroupproperty."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/properties/{propertyId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
        .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling deleteMapping."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling deleteMapping."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteMapping."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all Calculated Properties for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Calculated Properties
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalculatedproperties(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getCalculatedproperties."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling getCalculatedproperties."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling getCalculatedproperties."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getCalculatedproperties."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/calculatedProperties`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter["$continuationToken"] = continuationToken;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets a Calculated Property for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Calculated Property
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId The CalculatedProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getCalculatedproperty."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling getCalculatedproperty."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling getCalculatedproperty."
        );
      }
      // verify required parameter 'propertyId' is not null or undefined
      if (propertyId === null || propertyId === undefined) {
        throw new RequiredError(
          "propertyId",
          "Required parameter propertyId was null or undefined when calling getCalculatedproperty."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getCalculatedproperty."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/calculatedProperties/{propertyId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
        .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getGroup."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling getGroup."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling getGroup."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getGroup."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all Group Properties for a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get GroupProperties
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupproperties(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getGroupproperties."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling getGroupproperties."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling getGroupproperties."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getGroupproperties."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/properties`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter["$continuationToken"] = continuationToken;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets a Group Property for a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId The GroupProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getGroupproperty."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling getGroupproperty."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling getGroupproperty."
        );
      }
      // verify required parameter 'propertyId' is not null or undefined
      if (propertyId === null || propertyId === undefined) {
        throw new RequiredError(
          "propertyId",
          "Required parameter propertyId was null or undefined when calling getGroupproperty."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getGroupproperty."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/properties/{propertyId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
        .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all Groups for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Groups
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getGroups."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling getGroups."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getGroups."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter["$continuationToken"] = continuationToken;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getMapping."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling getMapping."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getMapping."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all Mappings for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Mappings
     * @param {string} imodelId The iModel Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMappings(
      imodelId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling getMappings."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getMappings."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings`.replace(
        `{${"imodelId"}}`,
        encodeURIComponent(String(imodelId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter["$continuationToken"] = continuationToken;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a Calculated Property for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Calculated Property
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the CalculatedProperty to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CalculatedPropertyUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      body?: CalculatedPropertyUpdateReportingAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling updateCalculatedproperty."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling updateCalculatedproperty."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling updateCalculatedproperty."
        );
      }
      // verify required parameter 'propertyId' is not null or undefined
      if (propertyId === null || propertyId === undefined) {
        throw new RequiredError(
          "propertyId",
          "Required parameter propertyId was null or undefined when calling updateCalculatedproperty."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateCalculatedproperty."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/calculatedProperties/{propertyId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
        .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"CalculatedPropertyUpdateReportingAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Group
     * @param {string} imodelId Globally Unique Identifier of the target iModel.
     * @param {string} mappingId Globally Unique Identifier of the target Mapping.
     * @param {string} groupId Id of the Group to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: GroupUpdateReportingAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling updateGroup."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling updateGroup."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling updateGroup."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateGroup."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"GroupUpdateReportingAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a Group Property for a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the GroupProperty to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupPropertyUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      body?: GroupPropertyUpdateReportingAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling updateGroupproperty."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling updateGroupproperty."
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          "groupId",
          "Required parameter groupId was null or undefined when calling updateGroupproperty."
        );
      }
      // verify required parameter 'propertyId' is not null or undefined
      if (propertyId === null || propertyId === undefined) {
        throw new RequiredError(
          "propertyId",
          "Required parameter propertyId was null or undefined when calling updateGroupproperty."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateGroupproperty."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/properties/{propertyId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)))
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
        .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"GroupPropertyUpdateReportingAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: MappingUpdateReportingAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          "imodelId",
          "Required parameter imodelId was null or undefined when calling updateMapping."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling updateMapping."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateMapping."
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings/{mappingId}`
        .replace(`{${"imodelId"}}`, encodeURIComponent(String(imodelId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"MappingUpdateReportingAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MappingsApi - functional programming interface
 * @export
 */
export const MappingsApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Creates a Calculated Property for a Group. Each Calculated Property defines a property or 'column' which is calculated for each element that is returned by the Group's query.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Calculated Property
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new CalculatedProperty.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CalculatedPropertyCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: CalculatedPropertyCreateReportingAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<CalculatedPropertySingleReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).createCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Creates a Group for an iModel data source Mappping. A Group is a collection of design elements from an iModel represented by an [ECSQL](https://www.itwinjs.org/learning/ecsql/) query and defines one table in the output data of a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping for which to create a new Group.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: GroupCreateReportingAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<GroupSingleReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).createGroup(imodelId, mappingId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Creates a Group Property for a Group. Each Group Property defines a property or 'column' of data desired from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new GroupProperty.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupPropertyCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: GroupPropertyCreateReportingAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<GroupPropertySingleReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).createGroupproperty(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Creates a Mapping for an iModel. Each Mapping represents a collection of tables (Groups) of data that can be consumed in a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Mapping
     * @param {string} imodelId Id of the iModel for which to create a new Mapping.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMapping(
      imodelId: string,
      Authorization: string,
      body?: MappingCreateReportingAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<MappingSingleReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).createMapping(imodelId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a Calculated Property from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Calculated Property
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the CalculatedProperty to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).deleteCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).deleteGroup(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a Group Property from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the GroupProperty to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).deleteGroupproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).deleteMapping(imodelId, mappingId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all Calculated Properties for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Calculated Properties
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalculatedproperties(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<CalculatedPropertyCollectionReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).getCalculatedproperties(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets a Calculated Property for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Calculated Property
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId The CalculatedProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<CalculatedPropertySingleReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).getCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<GroupSingleReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).getGroup(imodelId, mappingId, groupId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all Group Properties for a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get GroupProperties
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupproperties(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<GroupPropertyCollectionReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).getGroupproperties(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets a Group Property for a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId The GroupProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<GroupPropertySingleReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).getGroupproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all Groups for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Groups
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<GroupCollectionReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).getGroups(
        imodelId,
        mappingId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<MappingSingleReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).getMapping(imodelId, mappingId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all Mappings for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Mappings
     * @param {string} imodelId The iModel Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMappings(
      imodelId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<MappingCollectionReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).getMappings(
        imodelId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a Calculated Property for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Calculated Property
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the CalculatedProperty to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CalculatedPropertyUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      body?: CalculatedPropertyUpdateReportingAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<CalculatedPropertySingleReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).updateCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        body,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Group
     * @param {string} imodelId Globally Unique Identifier of the target iModel.
     * @param {string} mappingId Globally Unique Identifier of the target Mapping.
     * @param {string} groupId Id of the Group to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: GroupUpdateReportingAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<GroupSingleReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).updateGroup(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a Group Property for a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the GroupProperty to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupPropertyUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      body?: GroupPropertyUpdateReportingAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<GroupPropertySingleReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).updateGroupproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        body,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: MappingUpdateReportingAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<MappingSingleReportingAPI> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration
      ).updateMapping(
        imodelId,
        mappingId,
        Authorization,
        body,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * MappingsApi - factory interface
 * @export
 */
export const MappingsApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Creates a Calculated Property for a Group. Each Calculated Property defines a property or 'column' which is calculated for each element that is returned by the Group's query.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Calculated Property
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new CalculatedProperty.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CalculatedPropertyCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: CalculatedPropertyCreateReportingAPI,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).createCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Creates a Group for an iModel data source Mappping. A Group is a collection of design elements from an iModel represented by an [ECSQL](https://www.itwinjs.org/learning/ecsql/) query and defines one table in the output data of a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping for which to create a new Group.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: GroupCreateReportingAPI,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).createGroup(
        imodelId,
        mappingId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Creates a Group Property for a Group. Each Group Property defines a property or 'column' of data desired from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new GroupProperty.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupPropertyCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: GroupPropertyCreateReportingAPI,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).createGroupproperty(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Creates a Mapping for an iModel. Each Mapping represents a collection of tables (Groups) of data that can be consumed in a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Mapping
     * @param {string} imodelId Id of the iModel for which to create a new Mapping.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMapping(
      imodelId: string,
      Authorization: string,
      body?: MappingCreateReportingAPI,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).createMapping(
        imodelId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a Calculated Property from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Calculated Property
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the CalculatedProperty to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).deleteCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).deleteGroup(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a Group Property from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the GroupProperty to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).deleteGroupproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).deleteMapping(
        imodelId,
        mappingId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Gets all Calculated Properties for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Calculated Properties
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalculatedproperties(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).getCalculatedproperties(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Gets a Calculated Property for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Calculated Property
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId The CalculatedProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).getCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Gets a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).getGroup(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Gets all Group Properties for a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get GroupProperties
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupproperties(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).getGroupproperties(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Gets a Group Property for a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId The GroupProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).getGroupproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Gets all Groups for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Groups
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).getGroups(
        imodelId,
        mappingId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Gets a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).getMapping(
        imodelId,
        mappingId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Gets all Mappings for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Mappings
     * @param {string} imodelId The iModel Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMappings(
      imodelId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).getMappings(
        imodelId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Updates a Calculated Property for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Calculated Property
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the CalculatedProperty to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CalculatedPropertyUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      body?: CalculatedPropertyUpdateReportingAPI,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).updateCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Updates a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Group
     * @param {string} imodelId Globally Unique Identifier of the target iModel.
     * @param {string} mappingId Globally Unique Identifier of the target Mapping.
     * @param {string} groupId Id of the Group to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: GroupUpdateReportingAPI,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).updateGroup(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Updates a Group Property for a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the GroupProperty to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupPropertyUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      body?: GroupPropertyUpdateReportingAPI,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).updateGroupproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Updates a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: MappingUpdateReportingAPI,
      Accept?: string,
      options?: any
    ) {
      return MappingsApiFp(configuration).updateMapping(
        imodelId,
        mappingId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * MappingsApi - object-oriented interface
 * @export
 * @class MappingsApi
 * @extends {BaseAPI}
 */
export class MappingsApi extends BaseAPI {
  /**
   * ---    Creates a Calculated Property for a Group. Each Calculated Property defines a property or 'column' which is calculated for each element that is returned by the Group's query.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create Calculated Property
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId Id of the Group for which to create a new CalculatedProperty.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {CalculatedPropertyCreateReportingAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public createCalculatedproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    body?: CalculatedPropertyCreateReportingAPI,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).createCalculatedproperty(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Creates a Group for an iModel data source Mappping. A Group is a collection of design elements from an iModel represented by an [ECSQL](https://www.itwinjs.org/learning/ecsql/) query and defines one table in the output data of a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create Group
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId Id of the Mapping for which to create a new Group.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {GroupCreateReportingAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public createGroup(
    imodelId: string,
    mappingId: string,
    Authorization: string,
    body?: GroupCreateReportingAPI,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).createGroup(
      imodelId,
      mappingId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Creates a Group Property for a Group. Each Group Property defines a property or 'column' of data desired from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create GroupProperty
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId Id of the Group for which to create a new GroupProperty.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {GroupPropertyCreateReportingAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public createGroupproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    body?: GroupPropertyCreateReportingAPI,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).createGroupproperty(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Creates a Mapping for an iModel. Each Mapping represents a collection of tables (Groups) of data that can be consumed in a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create Mapping
   * @param {string} imodelId Id of the iModel for which to create a new Mapping.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {MappingCreateReportingAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public createMapping(
    imodelId: string,
    Authorization: string,
    body?: MappingCreateReportingAPI,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).createMapping(
      imodelId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a Calculated Property from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete Calculated Property
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} propertyId Id of the CalculatedProperty to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public deleteCalculatedproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    propertyId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).deleteCalculatedproperty(
      imodelId,
      mappingId,
      groupId,
      propertyId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete Group
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId Id of the Group to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public deleteGroup(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).deleteGroup(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a Group Property from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete GroupProperty
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} propertyId Id of the GroupProperty to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public deleteGroupproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    propertyId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).deleteGroupproperty(
      imodelId,
      mappingId,
      groupId,
      propertyId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete Mapping
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId Id of the Mapping to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public deleteMapping(
    imodelId: string,
    mappingId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).deleteMapping(
      imodelId,
      mappingId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all Calculated Properties for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Calculated Properties
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getCalculatedproperties(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).getCalculatedproperties(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      top,
      continuationToken,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets a Calculated Property for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Calculated Property
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} propertyId The CalculatedProperty Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getCalculatedproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    propertyId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).getCalculatedproperty(
      imodelId,
      mappingId,
      groupId,
      propertyId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Group
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getGroup(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).getGroup(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all Group Properties for a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get GroupProperties
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getGroupproperties(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).getGroupproperties(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      top,
      continuationToken,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets a Group Property for a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get GroupProperty
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} propertyId The GroupProperty Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getGroupproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    propertyId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).getGroupproperty(
      imodelId,
      mappingId,
      groupId,
      propertyId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all Groups for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Groups
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getGroups(
    imodelId: string,
    mappingId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).getGroups(
      imodelId,
      mappingId,
      Authorization,
      top,
      continuationToken,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Mapping
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getMapping(
    imodelId: string,
    mappingId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).getMapping(
      imodelId,
      mappingId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all Mappings for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Mappings
   * @param {string} imodelId The iModel Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getMappings(
    imodelId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).getMappings(
      imodelId,
      Authorization,
      top,
      continuationToken,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a Calculated Property for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Update Calculated Property
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} propertyId Id of the CalculatedProperty to be updated.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {CalculatedPropertyUpdateReportingAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public updateCalculatedproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    propertyId: string,
    Authorization: string,
    body?: CalculatedPropertyUpdateReportingAPI,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).updateCalculatedproperty(
      imodelId,
      mappingId,
      groupId,
      propertyId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Update Group
   * @param {string} imodelId Globally Unique Identifier of the target iModel.
   * @param {string} mappingId Globally Unique Identifier of the target Mapping.
   * @param {string} groupId Id of the Group to be updated.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {GroupUpdateReportingAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public updateGroup(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    body?: GroupUpdateReportingAPI,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).updateGroup(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a Group Property for a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Update GroupProperty
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} propertyId Id of the GroupProperty to be updated.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {GroupPropertyUpdateReportingAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public updateGroupproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    propertyId: string,
    Authorization: string,
    body?: GroupPropertyUpdateReportingAPI,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).updateGroupproperty(
      imodelId,
      mappingId,
      groupId,
      propertyId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Update Mapping
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId Id of the Mapping to be updated.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {MappingUpdateReportingAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public updateMapping(
    imodelId: string,
    mappingId: string,
    Authorization: string,
    body?: MappingUpdateReportingAPI,
    Accept?: string,
    options?: any
  ) {
    return MappingsApiFp(this.configuration).updateMapping(
      imodelId,
      mappingId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
/**
 * ReportsApi - fetch parameter creator
 * @export
 */
export const ReportsApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * ---    Creates a Report within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Report
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReport(
      Authorization: string,
      body?: ReportCreateReportingAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createReport."
        );
      }
      const localVarPath = `/reports/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"ReportCreateReportingAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Creates a Report Mapping. Each one links a Mapping to a Report and each Report can have more than one Report Mapping.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read`, `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Report Mapping
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportMappingCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReportMapping(
      reportId: string,
      Authorization: string,
      body?: ReportMappingCreateReportingAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          "reportId",
          "Required parameter reportId was null or undefined when calling createReportMapping."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling createReportMapping."
        );
      }
      const localVarPath = `/reports/{reportId}/datasources/imodelMappings`.replace(
        `{${"reportId"}}`,
        encodeURIComponent(String(reportId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"ReportMappingCreateReportingAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Marks a Report for deletetion. Reports are permanently deleted one month after being marked for deletion. A Report marked for deletion can be restored if it hasn't been permanently deleted yet.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Report
     * @param {string} reportId Id of the Report to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReport(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          "reportId",
          "Required parameter reportId was null or undefined when calling deleteReport."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteReport."
        );
      }
      const localVarPath = `/reports/{reportId}`.replace(
        `{${"reportId"}}`,
        encodeURIComponent(String(reportId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a Report Mapping from a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Report Mapping
     * @param {string} reportId The Report Id.
     * @param {string} mappingId Id of the Report Mapping to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReportMapping(
      reportId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          "reportId",
          "Required parameter reportId was null or undefined when calling deleteReportMapping."
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          "mappingId",
          "Required parameter mappingId was null or undefined when calling deleteReportMapping."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling deleteReportMapping."
        );
      }
      const localVarPath = `/reports/{reportId}/datasources/imodelMappings/{mappingId}`
        .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)))
        .replace(`{${"mappingId"}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "DELETE" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all Reports within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Project Reports
     * @param {string} projectId The Project Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {boolean} [deleted] Optionally filter Reports by those marked for deletion. NOTE: Reports marked for deletion will be permanently deleted after 1 month unless deletion is reverted.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectReports(
      projectId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      deleted?: boolean,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          "projectId",
          "Required parameter projectId was null or undefined when calling getProjectReports."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getProjectReports."
        );
      }
      const localVarPath = `/reports`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter["$continuationToken"] = continuationToken;
      }

      if (deleted !== undefined) {
        localVarQueryParameter["deleted"] = deleted;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets a single Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Report
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          "reportId",
          "Required parameter reportId was null or undefined when calling getReport."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getReport."
        );
      }
      const localVarPath = `/reports/{reportId}`.replace(
        `{${"reportId"}}`,
        encodeURIComponent(String(reportId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all Report Mappings for a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Report Mappings
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportMappings(
      reportId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          "reportId",
          "Required parameter reportId was null or undefined when calling getReportMappings."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling getReportMappings."
        );
      }
      const localVarPath = `/reports/{reportId}/datasources/imodelMappings`.replace(
        `{${"reportId"}}`,
        encodeURIComponent(String(reportId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (top !== undefined) {
        localVarQueryParameter["$top"] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter["$continuationToken"] = continuationToken;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Report
     * @param {string} reportId Id of the Report to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReport(
      reportId: string,
      Authorization: string,
      body?: ReportUpdateReportingAPI,
      Accept?: string,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          "reportId",
          "Required parameter reportId was null or undefined when calling updateReport."
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          "Authorization",
          "Required parameter Authorization was null or undefined when calling updateReport."
        );
      }
      const localVarPath = `/reports/{reportId}`.replace(
        `{${"reportId"}}`,
        encodeURIComponent(String(reportId))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: "PATCH" },
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("X-Api-Subscription-Key")
            : configuration.apiKey;
        localVarHeaderParameter["X-Api-Subscription-Key"] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? configuration.apiKey("subscription-key")
            : configuration.apiKey;
        localVarQueryParameter["subscription-key"] = localVarApiKeyValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter["Authorization"] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter["Accept"] = String(Accept);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>"ReportUpdateReportingAPI" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
  return {
    /**
     * ---    Creates a Report within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Report
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReport(
      Authorization: string,
      body?: ReportCreateReportingAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ReportSingleReportingAPI> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).createReport(Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Creates a Report Mapping. Each one links a Mapping to a Report and each Report can have more than one Report Mapping.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read`, `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Report Mapping
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportMappingCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReportMapping(
      reportId: string,
      Authorization: string,
      body?: ReportMappingCreateReportingAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ReportMappingSingleReportingAPI> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).createReportMapping(reportId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Marks a Report for deletetion. Reports are permanently deleted one month after being marked for deletion. A Report marked for deletion can be restored if it hasn't been permanently deleted yet.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Report
     * @param {string} reportId Id of the Report to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReport(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).deleteReport(reportId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a Report Mapping from a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Report Mapping
     * @param {string} reportId The Report Id.
     * @param {string} mappingId Id of the Report Mapping to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReportMapping(
      reportId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).deleteReportMapping(
        reportId,
        mappingId,
        Authorization,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all Reports within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Project Reports
     * @param {string} projectId The Project Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {boolean} [deleted] Optionally filter Reports by those marked for deletion. NOTE: Reports marked for deletion will be permanently deleted after 1 month unless deletion is reverted.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectReports(
      projectId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      deleted?: boolean,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ReportCollectionReportingAPI> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getProjectReports(
        projectId,
        Authorization,
        top,
        continuationToken,
        deleted,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets a single Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Report
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ReportSingleReportingAPI> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReport(reportId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all Report Mappings for a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Report Mappings
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportMappings(
      reportId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ReportMappingCollectionReportingAPI> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).getReportMappings(
        reportId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Report
     * @param {string} reportId Id of the Report to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReport(
      reportId: string,
      Authorization: string,
      body?: ReportUpdateReportingAPI,
      Accept?: string,
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<ReportSingleReportingAPI> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration
      ).updateReport(reportId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     * ---    Creates a Report within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Report
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReport(
      Authorization: string,
      body?: ReportCreateReportingAPI,
      Accept?: string,
      options?: any
    ) {
      return ReportsApiFp(configuration).createReport(
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Creates a Report Mapping. Each one links a Mapping to a Report and each Report can have more than one Report Mapping.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read`, `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Report Mapping
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportMappingCreateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReportMapping(
      reportId: string,
      Authorization: string,
      body?: ReportMappingCreateReportingAPI,
      Accept?: string,
      options?: any
    ) {
      return ReportsApiFp(configuration).createReportMapping(
        reportId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Marks a Report for deletetion. Reports are permanently deleted one month after being marked for deletion. A Report marked for deletion can be restored if it hasn't been permanently deleted yet.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Report
     * @param {string} reportId Id of the Report to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReport(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ReportsApiFp(configuration).deleteReport(
        reportId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a Report Mapping from a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Report Mapping
     * @param {string} reportId The Report Id.
     * @param {string} mappingId Id of the Report Mapping to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReportMapping(
      reportId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ReportsApiFp(configuration).deleteReportMapping(
        reportId,
        mappingId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Gets all Reports within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Project Reports
     * @param {string} projectId The Project Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {boolean} [deleted] Optionally filter Reports by those marked for deletion. NOTE: Reports marked for deletion will be permanently deleted after 1 month unless deletion is reverted.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectReports(
      projectId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      deleted?: boolean,
      Accept?: string,
      options?: any
    ) {
      return ReportsApiFp(configuration).getProjectReports(
        projectId,
        Authorization,
        top,
        continuationToken,
        deleted,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Gets a single Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Report
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any
    ) {
      return ReportsApiFp(configuration).getReport(
        reportId,
        Authorization,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Gets all Report Mappings for a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Report Mappings
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportMappings(
      reportId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any
    ) {
      return ReportsApiFp(configuration).getReportMappings(
        reportId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options
      )(fetch, basePath);
    },
    /**
     * ---    Updates a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Report
     * @param {string} reportId Id of the Report to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportUpdateReportingAPI} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReport(
      reportId: string,
      Authorization: string,
      body?: ReportUpdateReportingAPI,
      Accept?: string,
      options?: any
    ) {
      return ReportsApiFp(configuration).updateReport(
        reportId,
        Authorization,
        body,
        Accept,
        options
      )(fetch, basePath);
    },
  };
};

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
  /**
   * ---    Creates a Report within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create Report
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {ReportCreateReportingAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public createReport(
    Authorization: string,
    body?: ReportCreateReportingAPI,
    Accept?: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).createReport(
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Creates a Report Mapping. Each one links a Mapping to a Report and each Report can have more than one Report Mapping.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read`, `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create Report Mapping
   * @param {string} reportId The Report Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {ReportMappingCreateReportingAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public createReportMapping(
    reportId: string,
    Authorization: string,
    body?: ReportMappingCreateReportingAPI,
    Accept?: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).createReportMapping(
      reportId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Marks a Report for deletetion. Reports are permanently deleted one month after being marked for deletion. A Report marked for deletion can be restored if it hasn't been permanently deleted yet.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete Report
   * @param {string} reportId Id of the Report to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public deleteReport(
    reportId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).deleteReport(
      reportId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a Report Mapping from a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete Report Mapping
   * @param {string} reportId The Report Id.
   * @param {string} mappingId Id of the Report Mapping to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public deleteReportMapping(
    reportId: string,
    mappingId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).deleteReportMapping(
      reportId,
      mappingId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all Reports within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Project Reports
   * @param {string} projectId The Project Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {boolean} [deleted] Optionally filter Reports by those marked for deletion. NOTE: Reports marked for deletion will be permanently deleted after 1 month unless deletion is reverted.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getProjectReports(
    projectId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    deleted?: boolean,
    Accept?: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).getProjectReports(
      projectId,
      Authorization,
      top,
      continuationToken,
      deleted,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets a single Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Report
   * @param {string} reportId The Report Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReport(
    reportId: string,
    Authorization: string,
    Accept?: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).getReport(
      reportId,
      Authorization,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all Report Mappings for a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGVIEW` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Report Mappings
   * @param {string} reportId The Report Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportMappings(
    reportId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    Accept?: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).getReportMappings(
      reportId,
      Authorization,
      top,
      continuationToken,
      Accept,
      options
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `REPORTINGEDIT` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Update Report
   * @param {string} reportId Id of the Report to be updated.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {ReportUpdateReportingAPI} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public updateReport(
    reportId: string,
    Authorization: string,
    body?: ReportUpdateReportingAPI,
    Accept?: string,
    options?: any
  ) {
    return ReportsApiFp(this.configuration).updateReport(
      reportId,
      Authorization,
      body,
      Accept,
      options
    )(this.fetch, this.basePath);
  }
}
