/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/

import React from "react";
import { ComboBox, Flex, Input, Label, Text, Textarea } from "@itwin/itwinui-react";
import { useTranslation } from "../../useTranslation.js";

import type { FormatSet } from "@itwin/ecschema-metadata";

/**
 * Props for the FormatSetPanel component
 */
interface FormatSetPanelProps {
  formatSet?: FormatSet;
  editable?: boolean;
  onFormatSetChange?: (formatSet: FormatSet) => void;
}

/**
 * A React component that displays and allows editing of format set properties.
 */
export const FormatSetPanel: React.FC<FormatSetPanelProps> = ({ formatSet, editable = false, onFormatSetChange }) => {
  const [label, setLabel] = React.useState(formatSet?.label || "");
  const [description, setDescription] = React.useState("");
  const [unitSystem, setUnitSystem] = React.useState<string>("metric");
  const { translate } = useTranslation();

  // Generate unique IDs for form elements
  const labelInputId = React.useId();
  const descriptionInputId = React.useId();
  const unitSystemSelectId = React.useId();

  // Unit system options
  const unitSystemOptions = [
    { value: "metric", label: "Metric" },
    { value: "imperial", label: "Imperial" },
    { value: "usCustomary", label: "US Customary" },
    { value: "usSurvey", label: "US Survey" },
  ];

  // Hardcoded example descriptions based on format set name
  const getExampleDescription = React.useCallback((formatSetName: string) => {
    switch (formatSetName) {
      case "TestFormatSet1":
        return "Arizona Highway Project (Civil) - This format set contains all the formatting standards used by civil engineers on the Arizona Highway Project. Includes units for measurements, coordinates, and construction materials.";
      case "TestFormatSet2":
        return "Arizona Highway Project (Project Manager) - Format set tailored for project management views with emphasis on cost, schedule, and resource tracking. Uses simplified units suitable for executive reporting.";
      case "TestFormatSet3":
        return "My personal format set - Custom formatting preferences for individual use. Combines metric and imperial units based on personal workflow requirements.";
      case "AutogeneratedFormatSet":
        return "Auto-generated Format Set from iModel - This format set was automatically created based on the KindOfQuantity definitions found in the opened iModel's schemas. It provides formatting for all quantity types used in the model.";
      default:
        return "Standard format set containing quantity formatting definitions for various measurement types including length, area, volume, and angles.";
    }
  }, []);

  // Update local state when formatSet prop changes
  React.useEffect(() => {
    setLabel(formatSet?.label || "");
    setDescription(formatSet?.name ? getExampleDescription(formatSet.name) : "");
    setUnitSystem("metric"); // Default to metric, could be extended to read from formatSet
  }, [formatSet, getExampleDescription]);

  const handleLabelChange = React.useCallback(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      const newLabel = event.target.value;
      setLabel(newLabel);

      if (editable && formatSet && onFormatSetChange) {
        const updatedFormatSet: FormatSet = {
          ...formatSet,
          label: newLabel,
        };
        onFormatSetChange(updatedFormatSet);
      }
    },
    [editable, formatSet, onFormatSetChange],
  );

  const handleDescriptionChange = React.useCallback((event: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newDescription = event.target.value;
    setDescription(newDescription);
    // Note: FormatSet doesn't have description property yet, so we don't update the formatSet
  }, []);

  const handleUnitSystemChange = React.useCallback((value: string) => {
    setUnitSystem(value);
    // Note: FormatSet doesn't have unitSystem property yet, so we don't update the formatSet
  }, []);

  if (!formatSet) {
    return (
      <Flex flexDirection="column" justifyContent="center" alignItems="center" style={{ height: "100%" }}>
        <Text variant="leading" isMuted>
          {translate("QuantityFormat:labels.selectFormatSetToView")}
        </Text>
      </Flex>
    );
  }

  return (
    <Flex flexDirection="column" alignItems="flex-start" gap="m" style={{ padding: "var(--iui-size-s)" }}>
      <Text variant="subheading">{translate("QuantityFormat:labels.formatSetDetails")}</Text>

      <Flex alignItems="center" gap="m">
        <Label htmlFor={labelInputId}>{translate("QuantityFormat:labels.label")}</Label>
        <Input
          id={labelInputId}
          value={label}
          onChange={handleLabelChange}
          disabled={!editable}
          placeholder={translate("QuantityFormat:labels.formatSetDisplayLabel")}
          className="quantityFormat--formatSetPanel-input"
          style={{ flex: 1 }}
        />
      </Flex>

      <Flex alignItems="center" gap="m">
        <Label htmlFor={unitSystemSelectId}>{translate("QuantityFormat:labels.unitSystem")}</Label>
        <ComboBox
          id={unitSystemSelectId}
          value={unitSystem}
          onChange={handleUnitSystemChange}
          options={unitSystemOptions}
          inputProps={{
            disabled: !editable,
            placeholder: translate("QuantityFormat:labels.selectUnitSystem"),
            style: {
              backgroundColor: !editable ? "var(--iui-color-background-zebra)" : undefined,
            },
          }}
          className="quantityFormat--formatSetPanel-input"
          style={{ flex: 1 }}
        />
      </Flex>

      <Flex flexDirection="column" alignItems="flex-start" gap="xs">
        <Label htmlFor={descriptionInputId}>{translate("QuantityFormat:labels.description")}</Label>
        <Textarea
          id={descriptionInputId}
          value={description}
          onChange={handleDescriptionChange}
          disabled={!editable}
          placeholder={translate("QuantityFormat:labels.formatSetDescription")}
          className="quantityFormat--formatSetPanel-input"
          rows={4}
        />
      </Flex>
    </Flex>
  );
};
