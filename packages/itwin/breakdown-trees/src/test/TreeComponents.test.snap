// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TreeComponent tests. ClassificationsTree renders correctly with children 1`] = `
<ClassificationsTree
  displayGuids={false}
  iModel={null}
  setIsDisplayGuids={[Function]}
/>
`;

exports[`TreeComponent tests. ComponentIndex renders correctly with children 1`] = `
<ComponentIndex
  displayGuids={false}
  iModel={null}
  setIsDisplayGuids={[Function]}
/>
`;

exports[`TreeComponent tests. SpatialContainmentTree by Discipline renders correctly with children 1`] = `
<SpatialContainmentTree
  displayGuids={false}
  groupByDiscipline={true}
  groupByType={false}
  iModel={null}
  setGroupByDiscipline={[Function]}
  setGroupByType={[Function]}
  setIsDisplayGuids={[Function]}
/>
`;

exports[`TreeComponent tests. SpatialContainmentTree by Type and Discipline renders correctly with children 1`] = `
<SpatialContainmentTree
  displayGuids={false}
  groupByDiscipline={true}
  groupByType={true}
  iModel={null}
  setGroupByDiscipline={[Function]}
  setGroupByType={[Function]}
  setIsDisplayGuids={[Function]}
/>
`;

exports[`TreeComponent tests. SpatialContainmentTree by Type renders correctly with children 1`] = `
<SpatialContainmentTree
  displayGuids={false}
  groupByDiscipline={false}
  groupByType={true}
  iModel={null}
  setGroupByDiscipline={[Function]}
  setGroupByType={[Function]}
  setIsDisplayGuids={[Function]}
/>
`;

exports[`TreeComponent tests. SpatialContainmentTree renders correctly with children 1`] = `
<SpatialContainmentTree
  displayGuids={false}
  groupByDiscipline={false}
  groupByType={false}
  iModel={null}
  setGroupByDiscipline={[Function]}
  setGroupByType={[Function]}
  setIsDisplayGuids={[Function]}
/>
`;

exports[`TreeComponent tests. TreeNodeWrapper renders correctly 1`] = `
<TreeNodeWrapper
  itemsMapper={
    TreeNodeFunctionIconInfoMapper {
      "_TreeNodeClassFunctionIconInfoMap": Map {},
      "_functionIconInfos": Array [],
      "_globalFunctionIconInfos": Array [],
      "_groupNodeFunctionIconInfos": Array [],
      "_multipleNodesFunctionIconInfos": Array [],
      "_treeDataProvider": Object {
        "dispose": [Function],
        "getFilteredNodePaths": [Function],
        "getNodeKey": [Function],
        "getNodes": [Function],
        "getNodesCount": [Function],
        "imodel": null,
        "rulesetId": "breakdown-trees-react/RulesList",
      },
    }
  }
  node={null}
  selectedTreenodeCount={0}
  treeActions={null}
  treeModel={null}
>
  <div
    data-testid="nodeLoaded"
    onContextMenu={[Function]}
  >
    <div>
      <TreeNode
        isExpanded={[Function]}
        isLeaf={false}
        isLoading={[Function]}
        isSelected={[Function]}
        key="function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this._interceptor.removeInvocation(invocation_1);
                    var method = new MethodInfo(target, p);
                    var methodInvocation = new MethodInvocation(target, method, args, ProxyType.DYNAMIC);
                    _this._interceptor.intercept(methodInvocation);
                    return methodInvocation.returnValue;
                }"
        label={
          <div
            className={undefined}
          >
            null
          </div>
        }
        level={[Function]}
        onClick={[Function]}
        onClickExpansionToggle={[Function]}
        onMouseDown={[Function]}
        onMouseMove={[Function]}
      >
        <div
          className="core-tree-node is-selected"
          onClick={[Function]}
          onMouseDown={[Function]}
          onMouseMove={[Function]}
          role="treeitem"
          tabIndex={-1}
        >
          <div
            className="contents"
            style={
              Object {
                "marginLeft": NaN,
              }
            }
          >
            <ProgressRadial
              indeterminate={true}
              size="x-small"
            >
              <div
                className="iui-progress-indicator-radial iui-indeterminate iui-x-small"
              >
                <svg
                  aria-hidden="true"
                  className="iui-radial"
                  viewBox="0 0 32 32"
                >
                  <circle
                    className="iui-track"
                    cx="16"
                    cy="16"
                    r="14"
                  />
                  <circle
                    className="iui-fill"
                    cx="16"
                    cy="16"
                    r="14"
                    style={
                      Object {
                        "strokeDashoffset": 0,
                      }
                    }
                  />
                </svg>
              </div>
            </ProgressRadial>
            <div>
              <Component
                key={[Function]}
              >
                <Component />
              </Component>
            </div>
          </div>
        </div>
      </TreeNode>
    </div>
    <div />
  </div>
</TreeNodeWrapper>
`;

exports[`TreeComponent tests. TreeWithRuleset renders correctly 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Object {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "onStateChange": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <ControlledTreeWrapper
    dataProvider={
      Object {
        "dispose": [Function],
        "getFilteredNodePaths": [Function],
        "getNodeKey": [Function],
        "getNodes": [Function],
        "getNodesCount": [Function],
        "imodel": null,
        "rulesetId": "breakdown-trees-react/RulesList",
      }
    }
    displayGuids={true}
    enableVisibility={false}
    iModel={null}
    loadedRuleset={
      Object {
        "$schema": "../../node_modules/@itwin/presentation-common/Ruleset.schema.json",
        "id": "itwin-breakdown-trees/SpatialBreakdown",
        "rules": Array [
          Object {
            "ruleType": "RootNodes",
            "specifications": Array [
              Object {
                "classes": Array [
                  Object {
                    "arePolymorphic": true,
                    "classNames": Array [
                      "CompositeElement",
                    ],
                    "schemaName": "SpatialComposition",
                  },
                ],
                "groupByClass": false,
                "groupByLabel": false,
                "instanceFilter": "NOT model.IsPrivate AND this.ComposingElement = NULL",
                "relatedInstances": Array [
                  Object {
                    "alias": "model",
                    "isRequired": true,
                    "relationshipPath": Object {
                      "direction": "Backward",
                      "relationship": Object {
                        "className": "ModelContainsElements",
                        "schemaName": "BisCore",
                      },
                      "targetClass": Object {
                        "className": "Model",
                        "schemaName": "BisCore",
                      },
                    },
                  },
                ],
                "specType": "InstanceNodesOfSpecificClasses",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "doNotSort": true,
                "groupByClass": false,
                "groupByLabel": false,
                "relationshipPaths": Array [
                  Object {
                    "direction": "Backward",
                    "relationship": Object {
                      "className": "PhysicalSystemServicesSpatialElements",
                      "schemaName": "BisCore",
                    },
                    "targetClass": Object {
                      "className": "DistributionSystem",
                      "schemaName": "DistributionSystems",
                    },
                  },
                ],
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"DistributionSystem\\", \\"DistributionSystems\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "doNotSort": true,
                "groupByClass": false,
                "groupByLabel": false,
                "relationshipPaths": Array [
                  Object {
                    "direction": "Forward",
                    "relationship": Object {
                      "className": "DistributionSystemGroupsDistributionElements",
                      "schemaName": "DistributionSystems",
                    },
                    "targetClass": Object {
                      "className": "SpatialElement",
                      "schemaName": "Biscore",
                    },
                  },
                ],
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "doNotSort": true,
                "groupByClass": false,
                "groupByLabel": false,
                "relationshipPaths": Array [
                  Object {
                    "direction": "Forward",
                    "relationship": Object {
                      "className": "CompositeComposesSubComposites",
                      "schemaName": "SpatialComposition",
                    },
                    "targetClass": Object {
                      "className": "CompositeElement",
                      "schemaName": "SpatialComposition",
                    },
                  },
                ],
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "groupByClass": true,
                "groupByLabel": false,
                "relationshipPaths": Array [
                  Object {
                    "direction": "Forward",
                    "relationship": Object {
                      "className": "CompositeOverlapsSpatialElements",
                      "schemaName": "SpatialComposition",
                    },
                    "targetClass": Object {
                      "className": "SpatialElement",
                      "schemaName": "BisCore",
                    },
                  },
                ],
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "groupByClass": true,
                "groupByLabel": false,
                "relationshipPaths": Array [
                  Object {
                    "direction": "Forward",
                    "relationship": Object {
                      "className": "SpatialOrganizerReferencesSpatialElements",
                      "schemaName": "SpatialComposition",
                    },
                    "targetClass": Object {
                      "className": "SpatialElement",
                      "schemaName": "BisCore",
                    },
                  },
                ],
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "groupByClass": true,
                "groupByLabel": false,
                "relationshipPaths": Array [
                  Object {
                    "direction": "Forward",
                    "relationship": Object {
                      "className": "SpatialOrganizerHoldsSpatialElements",
                      "schemaName": "SpatialComposition",
                    },
                    "targetClass": Object {
                      "className": "SpatialElement",
                      "schemaName": "BisCore",
                    },
                  },
                ],
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ContentDisplayType = \\"RelatedElementsRequest\\"",
            "ruleType": "Content",
            "specifications": Array [
              Object {
                "relationshipPaths": Array [
                  Array [
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "CompositeComposesSubComposites",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "CompositeOverlapsSpatialElements",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "ElementOwnsChildElements",
                        "schemaName": "BisCore",
                      },
                    },
                  ],
                ],
                "specType": "ContentRelatedInstances",
              },
              Object {
                "relationshipPaths": Array [
                  Array [
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "CompositeComposesSubComposites",
                        "schemaName": "SpatialComposition",
                      },
                      "targetClass": Object {
                        "className": "ISpatialOrganizer",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "SpatialOrganizerHoldsSpatialElements",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "ElementOwnsChildElements",
                        "schemaName": "BisCore",
                      },
                    },
                  ],
                ],
                "specType": "ContentRelatedInstances",
              },
              Object {
                "relationshipPaths": Array [
                  Array [
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "CompositeComposesSubComposites",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "SpatialOrganizerReferencesSpatialElements",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "ElementOwnsChildElements",
                        "schemaName": "BisCore",
                      },
                    },
                  ],
                ],
                "specType": "ContentRelatedInstances",
              },
              Object {
                "relationshipPaths": Array [
                  Array [
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "DistributionSystemGroupsDistributionElements",
                        "schemaName": "DistributionSystems",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "ElementOwnsChildElements",
                        "schemaName": "BisCore",
                      },
                    },
                  ],
                ],
                "specType": "ContentRelatedInstances",
              },
            ],
          },
        ],
      }
    }
    optionItems={Array []}
    searchTools={true}
    setIsDisplayGuids={[Function]}
    treeName="TreeWithRulesetTest"
    treeNodeIconMapper={
      TreeNodeFunctionIconInfoMapper {
        "_TreeNodeClassFunctionIconInfoMap": Map {},
        "_functionIconInfos": Array [],
        "_globalFunctionIconInfos": Array [],
        "_groupNodeFunctionIconInfos": Array [],
        "_multipleNodesFunctionIconInfos": Array [],
        "_treeDataProvider": Object {
          "dispose": [Function],
          "getFilteredNodePaths": [Function],
          "getNodeKey": [Function],
          "getNodes": [Function],
          "getNodesCount": [Function],
          "imodel": null,
          "rulesetId": "breakdown-trees-react/RulesList",
        },
      }
    }
  />
</ContextProvider>
`;

exports[`TreeComponent tests. TreeWithRuleset renders correctly with children 1`] = `
<Provider
  store={
    Object {
      "@@observable": [Function],
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ControlledTreeWrapper
    dataProvider={
      Object {
        "dispose": [Function],
        "getFilteredNodePaths": [Function],
        "getNodeKey": [Function],
        "getNodes": [Function],
        "getNodesCount": [Function],
        "imodel": null,
        "rulesetId": "breakdown-trees-react/RulesList",
      }
    }
    displayGuids={true}
    enableVisibility={false}
    iModel={null}
    loadedRuleset={
      Object {
        "$schema": "../../node_modules/@bentley/presentation-common/Ruleset.schema.json",
        "id": "ui-framework/SpatialBreakdown",
        "rules": Array [
          Object {
            "ruleType": "RootNodes",
            "specifications": Array [
              Object {
                "arePolymorphic": true,
                "classes": Array [
                  Object {
                    "classNames": Array [
                      "CompositeElement",
                    ],
                    "schemaName": "SpatialComposition",
                  },
                ],
                "groupByClass": false,
                "groupByLabel": false,
                "instanceFilter": "NOT model.IsPrivate AND this.ComposingElement = NULL",
                "relatedInstances": Array [
                  Object {
                    "alias": "model",
                    "class": Object {
                      "className": "Model",
                      "schemaName": "BisCore",
                    },
                    "isRequired": true,
                    "relationship": Object {
                      "className": "ModelContainsElements",
                      "schemaName": "BisCore",
                    },
                    "requiredDirection": "Backward",
                  },
                ],
                "specType": "InstanceNodesOfSpecificClasses",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "doNotSort": true,
                "groupByClass": false,
                "groupByLabel": false,
                "relatedClasses": Object {
                  "classNames": Array [
                    "DistributionSystem",
                  ],
                  "schemaName": "DistributionSystems",
                },
                "relationships": Object {
                  "classNames": Array [
                    "PhysicalSystemServicesSpatialElements",
                  ],
                  "schemaName": "BisCore",
                },
                "requiredDirection": "Backward",
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"DistributionSystem\\", \\"DistributionSystems\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "doNotSort": true,
                "groupByClass": false,
                "groupByLabel": false,
                "relatedClasses": Object {
                  "classNames": Array [
                    "SpatialElement",
                  ],
                  "schemaName": "Biscore",
                },
                "relationships": Object {
                  "classNames": Array [
                    "DistributionSystemGroupsDistributionElements",
                  ],
                  "schemaName": "DistributionSystems",
                },
                "requiredDirection": "Forward",
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "doNotSort": true,
                "groupByClass": false,
                "groupByLabel": false,
                "relatedClasses": Object {
                  "classNames": Array [
                    "CompositeElement",
                  ],
                  "schemaName": "SpatialComposition",
                },
                "relationships": Object {
                  "classNames": Array [
                    "CompositeComposesSubComposites",
                  ],
                  "schemaName": "SpatialComposition",
                },
                "requiredDirection": "Forward",
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "groupByClass": true,
                "groupByLabel": false,
                "relatedClasses": Object {
                  "classNames": Array [
                    "SpatialElement",
                  ],
                  "schemaName": "BisCore",
                },
                "relationships": Object {
                  "classNames": Array [
                    "CompositeOverlapsSpatialElements",
                  ],
                  "schemaName": "SpatialComposition",
                },
                "requiredDirection": "Forward",
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "groupByClass": true,
                "groupByLabel": false,
                "relatedClasses": Object {
                  "classNames": Array [
                    "SpatialElement",
                  ],
                  "schemaName": "BisCore",
                },
                "relationships": Object {
                  "classNames": Array [
                    "SpatialOrganizerReferencesSpatialElements",
                  ],
                  "schemaName": "SpatialComposition",
                },
                "requiredDirection": "Forward",
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "groupByClass": true,
                "groupByLabel": false,
                "relatedClasses": Object {
                  "classNames": Array [
                    "SpatialElement",
                  ],
                  "schemaName": "BisCore",
                },
                "relationships": Object {
                  "classNames": Array [
                    "SpatialOrganizerHoldsSpatialElements",
                  ],
                  "schemaName": "SpatialComposition",
                },
                "requiredDirection": "Forward",
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ContentDisplayType = \\"RelatedElementsRequest\\"",
            "ruleType": "Content",
            "specifications": Array [
              Object {
                "relationshipPaths": Array [
                  Array [
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "CompositeComposesSubComposites",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "CompositeOverlapsSpatialElements",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "ElementOwnsChildElements",
                        "schemaName": "BisCore",
                      },
                    },
                  ],
                ],
                "specType": "ContentRelatedInstances",
              },
              Object {
                "relationshipPaths": Array [
                  Array [
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "CompositeComposesSubComposites",
                        "schemaName": "SpatialComposition",
                      },
                      "targetClass": Object {
                        "className": "ISpatialOrganizer",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "SpatialOrganizerHoldsSpatialElements",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "ElementOwnsChildElements",
                        "schemaName": "BisCore",
                      },
                    },
                  ],
                ],
                "specType": "ContentRelatedInstances",
              },
              Object {
                "relationshipPaths": Array [
                  Array [
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "CompositeComposesSubComposites",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "SpatialOrganizerReferencesSpatialElements",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "ElementOwnsChildElements",
                        "schemaName": "BisCore",
                      },
                    },
                  ],
                ],
                "specType": "ContentRelatedInstances",
              },
              Object {
                "relationshipPaths": Array [
                  Array [
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "DistributionSystemGroupsDistributionElements",
                        "schemaName": "DistributionSystems",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "ElementOwnsChildElements",
                        "schemaName": "BisCore",
                      },
                    },
                  ],
                ],
                "specType": "ContentRelatedInstances",
              },
            ],
          },
        ],
      }
    }
    optionItems={Array []}
    searchTools={true}
    setIsDisplayGuids={[Function]}
    treeName="TreeWithRulesetTest"
    treeNodeIconMapper={
      TreeNodeFunctionIconInfoMapper {
        "_TreeNodeClassFunctionIconInfoMap": Map {},
        "_functionIconInfos": Array [],
        "_globalFunctionIconInfos": Array [],
        "_groupNodeFunctionIconInfos": Array [],
        "_multipleNodesFunctionIconInfos": Array [],
        "_treeDataProvider": Object {
          "dispose": [Function],
          "getFilteredNodePaths": [Function],
          "getNodeKey": [Function],
          "getNodes": [Function],
          "getNodesCount": [Function],
          "imodel": null,
          "rulesetId": "breakdown-trees-react/RulesList",
        },
      }
    }
  >
    <div
      className="custom-tree-component-overwrites"
    >
      <div>
        <SearchBar
          alignment={0}
          enableGrouping={true}
          filteringInProgress={false}
          onFilterCancel={[Function]}
          onFilterClear={[Function]}
          onFilterStart={[Function]}
          onSelectedChanged={[Function]}
          placeholder="dummy text"
          resultCount={0}
          title="dummy text"
          value=""
          valueChangedDelay={500}
        >
          <div
            className="search-bar"
          >
            <div
              className="search-bar-group-button2"
            >
              <IconButton
                icon="icon-more-2"
                onClick={[Function]}
              >
                <button
                  className="visibility-icon-button"
                  onClick={[Function]}
                >
                  <span
                    className="icon icon-more-2"
                  />
                </button>
              </IconButton>
            </div>
            <div
              className="search-bar-button-container"
            >
              <TreeNodeFunctionsToolbar
                selectedNodes={Array []}
                treeModel={
                  MutableTreeModel {
                    "_rootNode": Object {
                      "depth": -1,
                      "id": undefined,
                      "numChildren": undefined,
                    },
                    "_tree": SparseTree {
                      "_idToNode": Object {},
                      "_parentToChildren": Object {},
                      "_rootNodes": SparseArray {
                        "_array": Array [],
                        "_length": 0,
                        Symbol(immer-draftable): true,
                      },
                      Symbol(immer-draftable): true,
                    },
                    Symbol(immer-draftable): true,
                  }
                }
                treeNodeIconMapper={
                  TreeNodeFunctionIconInfoMapper {
                    "_TreeNodeClassFunctionIconInfoMap": Map {},
                    "_functionIconInfos": Array [],
                    "_globalFunctionIconInfos": Array [],
                    "_groupNodeFunctionIconInfos": Array [],
                    "_multipleNodesFunctionIconInfos": Array [],
                    "_treeDataProvider": Object {
                      "dispose": [Function],
                      "getFilteredNodePaths": [Function],
                      "getNodeKey": [Function],
                      "getNodes": [Function],
                      "getNodesCount": [Function],
                      "imodel": null,
                      "rulesetId": "breakdown-trees-react/RulesList",
                    },
                  }
                }
              >
                <div
                  className="custom-tree-toolbar"
                />
              </TreeNodeFunctionsToolbar>
            </div>
            <div
              className="search-bar-search-container"
            >
              <SearchBox
                className="search-bar-search-box"
                onClear={[Function]}
                onFilterCancel={[Function]}
                onFilterClear={[Function]}
                onFilterStart={[Function]}
                onSelectedChanged={[Function]}
                placeholder="dummy text"
                resultCount={0}
                searchText=""
                valueChangedDelay={500}
              >
                <div
                  className="bldg-uisnip-core-searchbox search-bar-search-box"
                >
                  <input
                    onChange={[Function]}
                    onCut={[Function]}
                    onKeyDown={[Function]}
                    onPaste={[Function]}
                    placeholder="dummy text"
                    value=""
                  />
                  <div
                    className="uisnip-core-searchbox-stepping-container"
                  >
                    <div
                      className="uisnip-core-searchbox-separator"
                    />
                    <IconButton
                      className="uisnip-core-searchbox-step-button"
                      disabled={true}
                      icon="icon-chevron-up"
                      onClick={[Function]}
                      title="Previous"
                    >
                      <button
                        className="visibility-icon-button uisnip-core-searchbox-step-button"
                        disabled={true}
                        onClick={[Function]}
                        title="Previous"
                      >
                        <span
                          className="icon icon-chevron-up"
                        />
                      </button>
                    </IconButton>
                    <IconButton
                      className="uisnip-core-searchbox-step-button"
                      disabled={true}
                      icon="icon-chevron-down"
                      onClick={[Function]}
                      title="Next"
                    >
                      <button
                        className="visibility-icon-button uisnip-core-searchbox-step-button"
                        disabled={true}
                        onClick={[Function]}
                        title="Next"
                      >
                        <span
                          className="icon icon-chevron-down"
                        />
                      </button>
                    </IconButton>
                  </div>
                  <span
                    className="uisnip-core-searchbox-step-button icon icon-close"
                    onClick={[Function]}
                  />
                </div>
              </SearchBox>
            </div>
            <IconButton
              className="search-bar-search-icons show"
              icon="icon-search"
              onClick={[Function]}
              title="dummy text"
            >
              <button
                className="visibility-icon-button search-bar-search-icons show"
                onClick={[Function]}
                title="dummy text"
              >
                <span
                  className="icon icon-search"
                />
              </button>
            </IconButton>
          </div>
        </SearchBar>
        <MoreOptionsButton
          optionItems={Array []}
        >
          <div>
            <IconButton
              className="toolbar-icon right"
              icon="icon-more-2"
              key="drop-down-button"
              onClick={[Function]}
              title="dummy text"
            >
              <button
                className="visibility-icon-button toolbar-icon right"
                onClick={[Function]}
                title="dummy text"
              >
                <span
                  className="icon icon-more-2"
                />
              </button>
            </IconButton>
            <div>
              <Popup
                isOpen={false}
                left={-1}
                offset={0}
                onOutsideClick={[Function]}
                position={7}
                showArrow={false}
                showShadow={true}
                target={
                  <div>
                    <button
                      class="visibility-icon-button toolbar-icon right"
                      title="dummy text"
                    >
                      <span
                        class="icon icon-more-2"
                      />
                    </button>
                    <div />
                  </div>
                }
                top={-1}
              />
            </div>
          </div>
        </MoreOptionsButton>
      </div>
      <div
        className="tree-component-overwrites"
      >
        <ControlledTree
          eventsHandler={
            SelectionTrackingUnifiedSelectionTreeEventHandler {
              "_cancelled": Subject {
                "_isScalar": false,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "_dataProvider": PresentationTreeDataProvider {
                "_appendChildrenCountForGroupingNodes": undefined,
                "_dataSource": Object {
                  "getFilteredNodePaths": [Function],
                  "getNodesAndCount": [Function],
                  "getNodesCount": [Function],
                },
                "_diagnosticsOptions": undefined,
                "_disposeVariablesChangeListener": [Function],
                "_getNodesAndCount": [Function],
                "_imodel": null,
                "_pagingSize": 20,
                "_rulesetRegistration": RulesetRegistrationHelper {
                  "_rulesetId": "ui-framework/SpatialBreakdown",
                },
              },
              "_disposed": Subject {
                "_isScalar": false,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "_editingParams": undefined,
              "_listeners": Array [
                [Function],
              ],
              "_modelMutator": TreeModelMutator {
                "_collapsedChildrenDisposalEnabled": false,
                "_modelSource": TreeModelSource {
                  "_model": MutableTreeModel {
                    "_rootNode": Object {
                      "depth": -1,
                      "id": undefined,
                      "numChildren": undefined,
                    },
                    "_tree": SparseTree {
                      "_idToNode": Object {},
                      "_parentToChildren": Object {},
                      "_rootNodes": SparseArray {
                        "_array": Array [],
                        "_length": 0,
                        Symbol(immer-draftable): true,
                      },
                      Symbol(immer-draftable): true,
                    },
                    Symbol(immer-draftable): true,
                  },
                  "onModelChanged": BeUiEvent {
                    "_insideRaiseEvent": false,
                    "_listeners": Array [
                      Object {
                        "listener": [Function],
                        "once": false,
                        "scope": undefined,
                      },
                      Object {
                        "listener": [Function],
                        "once": false,
                        "scope": undefined,
                      },
                      Object {
                        "listener": [Function],
                        "once": false,
                        "scope": undefined,
                      },
                      Object {
                        "listener": [Function],
                        "once": false,
                        "scope": undefined,
                      },
                    ],
                  },
                },
                "_nodeLoader": PagedTreeNodeLoader {
                  "_dataProvider": PresentationTreeDataProvider {
                    "_appendChildrenCountForGroupingNodes": undefined,
                    "_dataSource": Object {
                      "getFilteredNodePaths": [Function],
                      "getNodesAndCount": [Function],
                      "getNodesCount": [Function],
                    },
                    "_diagnosticsOptions": undefined,
                    "_disposeVariablesChangeListener": [Function],
                    "_getNodesAndCount": [Function],
                    "_imodel": null,
                    "_pagingSize": 20,
                    "_rulesetRegistration": RulesetRegistrationHelper {
                      "_rulesetId": "ui-framework/SpatialBreakdown",
                    },
                  },
                  "_loadScheduler": SubscriptionScheduler {
                    "_scheduledObservables": Map {
                      Observable {
                        "_isScalar": false,
                        "operator": MapOperator {
                          "project": [Function],
                          "thisArg": undefined,
                        },
                        "source": Observable {
                          "_isScalar": false,
                          "_subscribe": [Function],
                        },
                      } => AnonymousSubject {
                        "_isScalar": false,
                        "closed": false,
                        "destination": AnonymousSubject {
                          "source": AnonymousSubject {
                            "_isScalar": false,
                            "closed": false,
                            "destination": AnonymousSubject {
                              "source": AnonymousSubject {
                                "_isScalar": false,
                                "closed": false,
                                "destination": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": Observable {
                                    "_isScalar": false,
                                    "operator": FinallyOperator {
                                      "callback": [Function],
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "operator": MapOperator {
                                        "project": [Function],
                                        "thisArg": undefined,
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "_subscribe": [Function],
                                      },
                                    },
                                  },
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [],
                                  "thrownError": null,
                                },
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [],
                                "operator": SwitchMapOperator {
                                  "project": [Function],
                                },
                                "source": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": Observable {
                                    "_isScalar": false,
                                    "operator": FinallyOperator {
                                      "callback": [Function],
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "operator": MapOperator {
                                        "project": [Function],
                                        "thisArg": undefined,
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "_subscribe": [Function],
                                      },
                                    },
                                  },
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [],
                                  "thrownError": null,
                                },
                                "thrownError": null,
                              },
                              "subjectFactory": [Function],
                            },
                            "hasError": false,
                            "isStopped": false,
                            "observers": Array [],
                            "operator": FinallyOperator {
                              "callback": [Function],
                            },
                            "source": AnonymousSubject {
                              "source": AnonymousSubject {
                                "_isScalar": false,
                                "closed": false,
                                "destination": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": Observable {
                                    "_isScalar": false,
                                    "operator": FinallyOperator {
                                      "callback": [Function],
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "operator": MapOperator {
                                        "project": [Function],
                                        "thisArg": undefined,
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "_subscribe": [Function],
                                      },
                                    },
                                  },
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [],
                                  "thrownError": null,
                                },
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [],
                                "operator": SwitchMapOperator {
                                  "project": [Function],
                                },
                                "source": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": Observable {
                                    "_isScalar": false,
                                    "operator": FinallyOperator {
                                      "callback": [Function],
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "operator": MapOperator {
                                        "project": [Function],
                                        "thisArg": undefined,
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "_subscribe": [Function],
                                      },
                                    },
                                  },
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [],
                                  "thrownError": null,
                                },
                                "thrownError": null,
                              },
                              "subjectFactory": [Function],
                            },
                            "thrownError": null,
                          },
                          "subjectFactory": [Function],
                        },
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [],
                        "operator": RefCountOperator {
                          "connectable": AnonymousSubject {
                            "source": AnonymousSubject {
                              "_isScalar": false,
                              "closed": false,
                              "destination": AnonymousSubject {
                                "source": AnonymousSubject {
                                  "_isScalar": false,
                                  "closed": false,
                                  "destination": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": Observable {
                                      "_isScalar": false,
                                      "operator": FinallyOperator {
                                        "callback": [Function],
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "operator": MapOperator {
                                          "project": [Function],
                                          "thisArg": undefined,
                                        },
                                        "source": Observable {
                                          "_isScalar": false,
                                          "_subscribe": [Function],
                                        },
                                      },
                                    },
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [],
                                    "thrownError": null,
                                  },
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [],
                                  "operator": SwitchMapOperator {
                                    "project": [Function],
                                  },
                                  "source": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": Observable {
                                      "_isScalar": false,
                                      "operator": FinallyOperator {
                                        "callback": [Function],
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "operator": MapOperator {
                                          "project": [Function],
                                          "thisArg": undefined,
                                        },
                                        "source": Observable {
                                          "_isScalar": false,
                                          "_subscribe": [Function],
                                        },
                                      },
                                    },
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [],
                                    "thrownError": null,
                                  },
                                  "thrownError": null,
                                },
                                "subjectFactory": [Function],
                              },
                              "hasError": false,
                              "isStopped": false,
                              "observers": Array [],
                              "operator": FinallyOperator {
                                "callback": [Function],
                              },
                              "source": AnonymousSubject {
                                "source": AnonymousSubject {
                                  "_isScalar": false,
                                  "closed": false,
                                  "destination": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": Observable {
                                      "_isScalar": false,
                                      "operator": FinallyOperator {
                                        "callback": [Function],
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "operator": MapOperator {
                                          "project": [Function],
                                          "thisArg": undefined,
                                        },
                                        "source": Observable {
                                          "_isScalar": false,
                                          "_subscribe": [Function],
                                        },
                                      },
                                    },
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [],
                                    "thrownError": null,
                                  },
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [],
                                  "operator": SwitchMapOperator {
                                    "project": [Function],
                                  },
                                  "source": BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": Observable {
                                      "_isScalar": false,
                                      "operator": FinallyOperator {
                                        "callback": [Function],
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "operator": MapOperator {
                                          "project": [Function],
                                          "thisArg": undefined,
                                        },
                                        "source": Observable {
                                          "_isScalar": false,
                                          "_subscribe": [Function],
                                        },
                                      },
                                    },
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [],
                                    "thrownError": null,
                                  },
                                  "thrownError": null,
                                },
                                "subjectFactory": [Function],
                              },
                              "thrownError": null,
                            },
                            "subjectFactory": [Function],
                          },
                        },
                        "source": AnonymousSubject {
                          "source": AnonymousSubject {
                            "_isScalar": false,
                            "closed": false,
                            "destination": AnonymousSubject {
                              "source": AnonymousSubject {
                                "_isScalar": false,
                                "closed": false,
                                "destination": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": Observable {
                                    "_isScalar": false,
                                    "operator": FinallyOperator {
                                      "callback": [Function],
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "operator": MapOperator {
                                        "project": [Function],
                                        "thisArg": undefined,
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "_subscribe": [Function],
                                      },
                                    },
                                  },
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [],
                                  "thrownError": null,
                                },
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [],
                                "operator": SwitchMapOperator {
                                  "project": [Function],
                                },
                                "source": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": Observable {
                                    "_isScalar": false,
                                    "operator": FinallyOperator {
                                      "callback": [Function],
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "operator": MapOperator {
                                        "project": [Function],
                                        "thisArg": undefined,
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "_subscribe": [Function],
                                      },
                                    },
                                  },
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [],
                                  "thrownError": null,
                                },
                                "thrownError": null,
                              },
                              "subjectFactory": [Function],
                            },
                            "hasError": false,
                            "isStopped": false,
                            "observers": Array [],
                            "operator": FinallyOperator {
                              "callback": [Function],
                            },
                            "source": AnonymousSubject {
                              "source": AnonymousSubject {
                                "_isScalar": false,
                                "closed": false,
                                "destination": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": Observable {
                                    "_isScalar": false,
                                    "operator": FinallyOperator {
                                      "callback": [Function],
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "operator": MapOperator {
                                        "project": [Function],
                                        "thisArg": undefined,
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "_subscribe": [Function],
                                      },
                                    },
                                  },
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [],
                                  "thrownError": null,
                                },
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [],
                                "operator": SwitchMapOperator {
                                  "project": [Function],
                                },
                                "source": BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": Observable {
                                    "_isScalar": false,
                                    "operator": FinallyOperator {
                                      "callback": [Function],
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "operator": MapOperator {
                                        "project": [Function],
                                        "thisArg": undefined,
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "_subscribe": [Function],
                                      },
                                    },
                                  },
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [],
                                  "thrownError": null,
                                },
                                "thrownError": null,
                              },
                              "subjectFactory": [Function],
                            },
                            "thrownError": null,
                          },
                          "subjectFactory": [Function],
                        },
                        "thrownError": null,
                      },
                    },
                    "_scheduler": Subject {
                      "_isScalar": false,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        MergeMapSubscriber {
                          "_parentOrParents": Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              [Circular],
                              SimpleInnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  OnErrorResumeNextSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      AsapAction {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "delay": 0,
                                        "id": 1,
                                        "pending": true,
                                        "scheduler": AsapScheduler {
                                          "SchedulerAction": [Function],
                                          "actions": Array [
                                            [Circular],
                                          ],
                                          "active": false,
                                          "now": [Function],
                                          "scheduled": 1,
                                        },
                                        "state": Object {
                                          "source": AnonymousSubject {
                                            "_isScalar": false,
                                            "closed": false,
                                            "destination": AnonymousSubject {
                                              "_isScalar": false,
                                              "closed": false,
                                              "destination": AnonymousSubject {
                                                "source": AnonymousSubject {
                                                  "_isScalar": false,
                                                  "closed": false,
                                                  "destination": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "operator": SwitchMapOperator {
                                                    "project": [Function],
                                                  },
                                                  "source": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "thrownError": null,
                                                },
                                                "subjectFactory": [Function],
                                              },
                                              "hasError": false,
                                              "isStopped": false,
                                              "observers": Array [],
                                              "operator": RefCountOperator {
                                                "connectable": AnonymousSubject {
                                                  "source": AnonymousSubject {
                                                    "_isScalar": false,
                                                    "closed": false,
                                                    "destination": BehaviorSubject {
                                                      "_isScalar": false,
                                                      "_value": Observable {
                                                        "_isScalar": false,
                                                        "operator": FinallyOperator {
                                                          "callback": [Function],
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "operator": MapOperator {
                                                            "project": [Function],
                                                            "thisArg": undefined,
                                                          },
                                                          "source": Observable {
                                                            "_isScalar": false,
                                                            "_subscribe": [Function],
                                                          },
                                                        },
                                                      },
                                                      "closed": false,
                                                      "hasError": false,
                                                      "isStopped": false,
                                                      "observers": Array [],
                                                      "thrownError": null,
                                                    },
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "operator": SwitchMapOperator {
                                                      "project": [Function],
                                                    },
                                                    "source": BehaviorSubject {
                                                      "_isScalar": false,
                                                      "_value": Observable {
                                                        "_isScalar": false,
                                                        "operator": FinallyOperator {
                                                          "callback": [Function],
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "operator": MapOperator {
                                                            "project": [Function],
                                                            "thisArg": undefined,
                                                          },
                                                          "source": Observable {
                                                            "_isScalar": false,
                                                            "_subscribe": [Function],
                                                          },
                                                        },
                                                      },
                                                      "closed": false,
                                                      "hasError": false,
                                                      "isStopped": false,
                                                      "observers": Array [],
                                                      "thrownError": null,
                                                    },
                                                    "thrownError": null,
                                                  },
                                                  "subjectFactory": [Function],
                                                },
                                              },
                                              "source": AnonymousSubject {
                                                "source": AnonymousSubject {
                                                  "_isScalar": false,
                                                  "closed": false,
                                                  "destination": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "operator": SwitchMapOperator {
                                                    "project": [Function],
                                                  },
                                                  "source": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "thrownError": null,
                                                },
                                                "subjectFactory": [Function],
                                              },
                                              "thrownError": null,
                                            },
                                            "hasError": false,
                                            "isStopped": false,
                                            "observers": Array [],
                                            "operator": ObserveOnOperator {
                                              "delay": 0,
                                              "scheduler": QueueScheduler {
                                                "SchedulerAction": [Function],
                                                "actions": Array [],
                                                "active": false,
                                                "now": [Function],
                                                "scheduled": undefined,
                                              },
                                            },
                                            "source": AnonymousSubject {
                                              "_isScalar": false,
                                              "closed": false,
                                              "destination": AnonymousSubject {
                                                "source": AnonymousSubject {
                                                  "_isScalar": false,
                                                  "closed": false,
                                                  "destination": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "operator": SwitchMapOperator {
                                                    "project": [Function],
                                                  },
                                                  "source": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "thrownError": null,
                                                },
                                                "subjectFactory": [Function],
                                              },
                                              "hasError": false,
                                              "isStopped": false,
                                              "observers": Array [],
                                              "operator": RefCountOperator {
                                                "connectable": AnonymousSubject {
                                                  "source": AnonymousSubject {
                                                    "_isScalar": false,
                                                    "closed": false,
                                                    "destination": BehaviorSubject {
                                                      "_isScalar": false,
                                                      "_value": Observable {
                                                        "_isScalar": false,
                                                        "operator": FinallyOperator {
                                                          "callback": [Function],
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "operator": MapOperator {
                                                            "project": [Function],
                                                            "thisArg": undefined,
                                                          },
                                                          "source": Observable {
                                                            "_isScalar": false,
                                                            "_subscribe": [Function],
                                                          },
                                                        },
                                                      },
                                                      "closed": false,
                                                      "hasError": false,
                                                      "isStopped": false,
                                                      "observers": Array [],
                                                      "thrownError": null,
                                                    },
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "operator": SwitchMapOperator {
                                                      "project": [Function],
                                                    },
                                                    "source": BehaviorSubject {
                                                      "_isScalar": false,
                                                      "_value": Observable {
                                                        "_isScalar": false,
                                                        "operator": FinallyOperator {
                                                          "callback": [Function],
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "operator": MapOperator {
                                                            "project": [Function],
                                                            "thisArg": undefined,
                                                          },
                                                          "source": Observable {
                                                            "_isScalar": false,
                                                            "_subscribe": [Function],
                                                          },
                                                        },
                                                      },
                                                      "closed": false,
                                                      "hasError": false,
                                                      "isStopped": false,
                                                      "observers": Array [],
                                                      "thrownError": null,
                                                    },
                                                    "thrownError": null,
                                                  },
                                                  "subjectFactory": [Function],
                                                },
                                              },
                                              "source": AnonymousSubject {
                                                "source": AnonymousSubject {
                                                  "_isScalar": false,
                                                  "closed": false,
                                                  "destination": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "operator": SwitchMapOperator {
                                                    "project": [Function],
                                                  },
                                                  "source": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "thrownError": null,
                                                },
                                                "subjectFactory": [Function],
                                              },
                                              "thrownError": null,
                                            },
                                            "thrownError": null,
                                          },
                                          "subscriber": [Circular],
                                        },
                                        "work": [Function],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": [Circular],
                                    "isStopped": false,
                                    "nextSources": Array [],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": [Function],
                              "_context": [Circular],
                              "_error": [Function],
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "active": 1,
                          "buffer": Array [],
                          "closed": false,
                          "concurrent": 1,
                          "destination": Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              [Circular],
                              SimpleInnerSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  OnErrorResumeNextSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      AsapAction {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "delay": 0,
                                        "id": 1,
                                        "pending": true,
                                        "scheduler": AsapScheduler {
                                          "SchedulerAction": [Function],
                                          "actions": Array [
                                            [Circular],
                                          ],
                                          "active": false,
                                          "now": [Function],
                                          "scheduled": 1,
                                        },
                                        "state": Object {
                                          "source": AnonymousSubject {
                                            "_isScalar": false,
                                            "closed": false,
                                            "destination": AnonymousSubject {
                                              "_isScalar": false,
                                              "closed": false,
                                              "destination": AnonymousSubject {
                                                "source": AnonymousSubject {
                                                  "_isScalar": false,
                                                  "closed": false,
                                                  "destination": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "operator": SwitchMapOperator {
                                                    "project": [Function],
                                                  },
                                                  "source": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "thrownError": null,
                                                },
                                                "subjectFactory": [Function],
                                              },
                                              "hasError": false,
                                              "isStopped": false,
                                              "observers": Array [],
                                              "operator": RefCountOperator {
                                                "connectable": AnonymousSubject {
                                                  "source": AnonymousSubject {
                                                    "_isScalar": false,
                                                    "closed": false,
                                                    "destination": BehaviorSubject {
                                                      "_isScalar": false,
                                                      "_value": Observable {
                                                        "_isScalar": false,
                                                        "operator": FinallyOperator {
                                                          "callback": [Function],
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "operator": MapOperator {
                                                            "project": [Function],
                                                            "thisArg": undefined,
                                                          },
                                                          "source": Observable {
                                                            "_isScalar": false,
                                                            "_subscribe": [Function],
                                                          },
                                                        },
                                                      },
                                                      "closed": false,
                                                      "hasError": false,
                                                      "isStopped": false,
                                                      "observers": Array [],
                                                      "thrownError": null,
                                                    },
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "operator": SwitchMapOperator {
                                                      "project": [Function],
                                                    },
                                                    "source": BehaviorSubject {
                                                      "_isScalar": false,
                                                      "_value": Observable {
                                                        "_isScalar": false,
                                                        "operator": FinallyOperator {
                                                          "callback": [Function],
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "operator": MapOperator {
                                                            "project": [Function],
                                                            "thisArg": undefined,
                                                          },
                                                          "source": Observable {
                                                            "_isScalar": false,
                                                            "_subscribe": [Function],
                                                          },
                                                        },
                                                      },
                                                      "closed": false,
                                                      "hasError": false,
                                                      "isStopped": false,
                                                      "observers": Array [],
                                                      "thrownError": null,
                                                    },
                                                    "thrownError": null,
                                                  },
                                                  "subjectFactory": [Function],
                                                },
                                              },
                                              "source": AnonymousSubject {
                                                "source": AnonymousSubject {
                                                  "_isScalar": false,
                                                  "closed": false,
                                                  "destination": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "operator": SwitchMapOperator {
                                                    "project": [Function],
                                                  },
                                                  "source": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "thrownError": null,
                                                },
                                                "subjectFactory": [Function],
                                              },
                                              "thrownError": null,
                                            },
                                            "hasError": false,
                                            "isStopped": false,
                                            "observers": Array [],
                                            "operator": ObserveOnOperator {
                                              "delay": 0,
                                              "scheduler": QueueScheduler {
                                                "SchedulerAction": [Function],
                                                "actions": Array [],
                                                "active": false,
                                                "now": [Function],
                                                "scheduled": undefined,
                                              },
                                            },
                                            "source": AnonymousSubject {
                                              "_isScalar": false,
                                              "closed": false,
                                              "destination": AnonymousSubject {
                                                "source": AnonymousSubject {
                                                  "_isScalar": false,
                                                  "closed": false,
                                                  "destination": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "operator": SwitchMapOperator {
                                                    "project": [Function],
                                                  },
                                                  "source": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "thrownError": null,
                                                },
                                                "subjectFactory": [Function],
                                              },
                                              "hasError": false,
                                              "isStopped": false,
                                              "observers": Array [],
                                              "operator": RefCountOperator {
                                                "connectable": AnonymousSubject {
                                                  "source": AnonymousSubject {
                                                    "_isScalar": false,
                                                    "closed": false,
                                                    "destination": BehaviorSubject {
                                                      "_isScalar": false,
                                                      "_value": Observable {
                                                        "_isScalar": false,
                                                        "operator": FinallyOperator {
                                                          "callback": [Function],
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "operator": MapOperator {
                                                            "project": [Function],
                                                            "thisArg": undefined,
                                                          },
                                                          "source": Observable {
                                                            "_isScalar": false,
                                                            "_subscribe": [Function],
                                                          },
                                                        },
                                                      },
                                                      "closed": false,
                                                      "hasError": false,
                                                      "isStopped": false,
                                                      "observers": Array [],
                                                      "thrownError": null,
                                                    },
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "operator": SwitchMapOperator {
                                                      "project": [Function],
                                                    },
                                                    "source": BehaviorSubject {
                                                      "_isScalar": false,
                                                      "_value": Observable {
                                                        "_isScalar": false,
                                                        "operator": FinallyOperator {
                                                          "callback": [Function],
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "operator": MapOperator {
                                                            "project": [Function],
                                                            "thisArg": undefined,
                                                          },
                                                          "source": Observable {
                                                            "_isScalar": false,
                                                            "_subscribe": [Function],
                                                          },
                                                        },
                                                      },
                                                      "closed": false,
                                                      "hasError": false,
                                                      "isStopped": false,
                                                      "observers": Array [],
                                                      "thrownError": null,
                                                    },
                                                    "thrownError": null,
                                                  },
                                                  "subjectFactory": [Function],
                                                },
                                              },
                                              "source": AnonymousSubject {
                                                "source": AnonymousSubject {
                                                  "_isScalar": false,
                                                  "closed": false,
                                                  "destination": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "operator": SwitchMapOperator {
                                                    "project": [Function],
                                                  },
                                                  "source": BehaviorSubject {
                                                    "_isScalar": false,
                                                    "_value": Observable {
                                                      "_isScalar": false,
                                                      "operator": FinallyOperator {
                                                        "callback": [Function],
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "operator": MapOperator {
                                                          "project": [Function],
                                                          "thisArg": undefined,
                                                        },
                                                        "source": Observable {
                                                          "_isScalar": false,
                                                          "_subscribe": [Function],
                                                        },
                                                      },
                                                    },
                                                    "closed": false,
                                                    "hasError": false,
                                                    "isStopped": false,
                                                    "observers": Array [],
                                                    "thrownError": null,
                                                  },
                                                  "thrownError": null,
                                                },
                                                "subjectFactory": [Function],
                                              },
                                              "thrownError": null,
                                            },
                                            "thrownError": null,
                                          },
                                          "subscriber": [Circular],
                                        },
                                        "work": [Function],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": [Circular],
                                    "isStopped": false,
                                    "nextSources": Array [],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "parent": [Circular],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": [Function],
                              "_context": [Circular],
                              "_error": [Function],
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "hasCompleted": false,
                          "index": 1,
                          "isStopped": false,
                          "project": [Function],
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    },
                  },
                  "_pageLoader": PageLoader {
                    "_activePageRequests": Map {
                      undefined => Map {
                        0 => Observable {
                          "_isScalar": false,
                          "operator": RefCountOperator {
                            "connectable": Observable {
                              "source": Observable {
                                "_isScalar": false,
                                "operator": FinallyOperator {
                                  "callback": [Function],
                                },
                                "source": Observable {
                                  "_isScalar": false,
                                  "operator": MergeMapOperator {
                                    "concurrent": 1,
                                    "project": [Function],
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "operator": RefCountOperator {
                                      "connectable": Observable {
                                        "source": Observable {
                                          "_isScalar": false,
                                          "operator": MergeMapOperator {
                                            "concurrent": 1,
                                            "project": [Function],
                                          },
                                          "source": Observable {
                                            "_isScalar": false,
                                            "_subscribe": [Function],
                                          },
                                        },
                                        "subjectFactory": [Function],
                                      },
                                    },
                                    "source": Observable {
                                      "source": Observable {
                                        "_isScalar": false,
                                        "operator": MergeMapOperator {
                                          "concurrent": 1,
                                          "project": [Function],
                                        },
                                        "source": Observable {
                                          "_isScalar": false,
                                          "_subscribe": [Function],
                                        },
                                      },
                                      "subjectFactory": [Function],
                                    },
                                  },
                                },
                              },
                              "subjectFactory": [Function],
                            },
                          },
                          "source": Observable {
                            "source": Observable {
                              "_isScalar": false,
                              "operator": FinallyOperator {
                                "callback": [Function],
                              },
                              "source": Observable {
                                "_isScalar": false,
                                "operator": MergeMapOperator {
                                  "concurrent": 1,
                                  "project": [Function],
                                },
                                "source": Observable {
                                  "_isScalar": false,
                                  "operator": RefCountOperator {
                                    "connectable": Observable {
                                      "source": Observable {
                                        "_isScalar": false,
                                        "operator": MergeMapOperator {
                                          "concurrent": 1,
                                          "project": [Function],
                                        },
                                        "source": Observable {
                                          "_isScalar": false,
                                          "_subscribe": [Function],
                                        },
                                      },
                                      "subjectFactory": [Function],
                                    },
                                  },
                                  "source": Observable {
                                    "source": Observable {
                                      "_isScalar": false,
                                      "operator": MergeMapOperator {
                                        "concurrent": 1,
                                        "project": [Function],
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "_subscribe": [Function],
                                      },
                                    },
                                    "subjectFactory": [Function],
                                  },
                                },
                              },
                            },
                            "subjectFactory": [Function],
                          },
                        },
                      },
                    },
                    "_dataSource": TreeDataSource {
                      "_dataProvider": PresentationTreeDataProvider {
                        "_appendChildrenCountForGroupingNodes": undefined,
                        "_dataSource": Object {
                          "getFilteredNodePaths": [Function],
                          "getNodesAndCount": [Function],
                          "getNodesCount": [Function],
                        },
                        "_diagnosticsOptions": undefined,
                        "_disposeVariablesChangeListener": [Function],
                        "_getNodesAndCount": [Function],
                        "_imodel": null,
                        "_pagingSize": 20,
                        "_rulesetRegistration": RulesetRegistrationHelper {
                          "_rulesetId": "ui-framework/SpatialBreakdown",
                        },
                      },
                      "onItemsChanged": BeEvent {
                        "_insideRaiseEvent": false,
                        "_listeners": Array [],
                      },
                    },
                    "_pageSize": 20,
                  },
                  "_pageSize": 20,
                  "_treeModelSource": TreeModelSource {
                    "_model": MutableTreeModel {
                      "_rootNode": Object {
                        "depth": -1,
                        "id": undefined,
                        "numChildren": undefined,
                      },
                      "_tree": SparseTree {
                        "_idToNode": Object {},
                        "_parentToChildren": Object {},
                        "_rootNodes": SparseArray {
                          "_array": Array [],
                          "_length": 0,
                          Symbol(immer-draftable): true,
                        },
                        Symbol(immer-draftable): true,
                      },
                      Symbol(immer-draftable): true,
                    },
                    "onModelChanged": BeUiEvent {
                      "_insideRaiseEvent": false,
                      "_listeners": Array [
                        Object {
                          "listener": [Function],
                          "once": false,
                          "scope": undefined,
                        },
                        Object {
                          "listener": [Function],
                          "once": false,
                          "scope": undefined,
                        },
                        Object {
                          "listener": [Function],
                          "once": false,
                          "scope": undefined,
                        },
                        Object {
                          "listener": [Function],
                          "once": false,
                          "scope": undefined,
                        },
                      ],
                    },
                  },
                },
              },
              "_modelSource": TreeModelSource {
                "_model": MutableTreeModel {
                  "_rootNode": Object {
                    "depth": -1,
                    "id": undefined,
                    "numChildren": undefined,
                  },
                  "_tree": SparseTree {
                    "_idToNode": Object {},
                    "_parentToChildren": Object {},
                    "_rootNodes": SparseArray {
                      "_array": Array [],
                      "_length": 0,
                      Symbol(immer-draftable): true,
                    },
                    Symbol(immer-draftable): true,
                  },
                  Symbol(immer-draftable): true,
                },
                "onModelChanged": BeUiEvent {
                  "_insideRaiseEvent": false,
                  "_listeners": Array [
                    Object {
                      "listener": [Function],
                      "once": false,
                      "scope": undefined,
                    },
                    Object {
                      "listener": [Function],
                      "once": false,
                      "scope": undefined,
                    },
                    Object {
                      "listener": [Function],
                      "once": false,
                      "scope": undefined,
                    },
                    Object {
                      "listener": [Function],
                      "once": false,
                      "scope": undefined,
                    },
                  ],
                },
              },
              "_onNewSelectionSetCallback": [Function],
              "_selectionHandler": SelectionHandler {
                "_disposables": DisposableList {
                  "_disposables": Array [
                    FuncDisposable {
                      "_disposeFunc": [Function],
                    },
                  ],
                },
                "_inSelect": false,
                "imodel": null,
                "manager": SelectionManager {
                  "_hiliteSetProviders": Map {},
                  "_imodelToolSelectionSyncHandlers": Map {},
                  "_selectionContainerMap": Map {
                    null => SelectionContainer {
                      "_selectedItemsSetMap": Map {
                        0 => Object {
                          "instanceKeys": Array [],
                          "nodeKeys": Array [],
                        },
                      },
                    },
                  },
                  "scopes": undefined,
                  "selectionChange": SelectionChangeEvent {
                    "_insideRaiseEvent": false,
                    "_listeners": Array [
                      Object {
                        "listener": [Function],
                        "once": false,
                        "scope": undefined,
                      },
                    ],
                  },
                },
                "name": "Tree_ui-framework/SpatialBreakdown_260b8b37-de1c-4796-bdaa-c0acb6103804",
                "onSelect": [Function],
                "onSelectionChanged": [Function],
                "rulesetId": "ui-framework/SpatialBreakdown",
              },
              "_selectionPredicate": undefined,
              "_selectionReplaced": Subject {
                "_isScalar": false,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "_unregisterModelChangedListener": [Function],
              "_visibilityHandler": undefined,
            }
          }
          height={0}
          model={
            MutableTreeModel {
              "_rootNode": Object {
                "depth": -1,
                "id": undefined,
                "numChildren": undefined,
              },
              "_tree": SparseTree {
                "_idToNode": Object {},
                "_parentToChildren": Object {},
                "_rootNodes": SparseArray {
                  "_array": Array [],
                  "_length": 0,
                  Symbol(immer-draftable): true,
                },
                Symbol(immer-draftable): true,
              },
              Symbol(immer-draftable): true,
            }
          }
          nodeLoader={
            PagedTreeNodeLoader {
              "_dataProvider": PresentationTreeDataProvider {
                "_appendChildrenCountForGroupingNodes": undefined,
                "_dataSource": Object {
                  "getFilteredNodePaths": [Function],
                  "getNodesAndCount": [Function],
                  "getNodesCount": [Function],
                },
                "_diagnosticsOptions": undefined,
                "_disposeVariablesChangeListener": [Function],
                "_getNodesAndCount": [Function],
                "_imodel": null,
                "_pagingSize": 20,
                "_rulesetRegistration": RulesetRegistrationHelper {
                  "_rulesetId": "ui-framework/SpatialBreakdown",
                },
              },
              "_loadScheduler": SubscriptionScheduler {
                "_scheduledObservables": Map {
                  Observable {
                    "_isScalar": false,
                    "operator": MapOperator {
                      "project": [Function],
                      "thisArg": undefined,
                    },
                    "source": Observable {
                      "_isScalar": false,
                      "_subscribe": [Function],
                    },
                  } => AnonymousSubject {
                    "_isScalar": false,
                    "closed": false,
                    "destination": AnonymousSubject {
                      "source": AnonymousSubject {
                        "_isScalar": false,
                        "closed": false,
                        "destination": AnonymousSubject {
                          "source": AnonymousSubject {
                            "_isScalar": false,
                            "closed": false,
                            "destination": BehaviorSubject {
                              "_isScalar": false,
                              "_value": Observable {
                                "_isScalar": false,
                                "operator": FinallyOperator {
                                  "callback": [Function],
                                },
                                "source": Observable {
                                  "_isScalar": false,
                                  "operator": MapOperator {
                                    "project": [Function],
                                    "thisArg": undefined,
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "_subscribe": [Function],
                                  },
                                },
                              },
                              "closed": false,
                              "hasError": false,
                              "isStopped": false,
                              "observers": Array [],
                              "thrownError": null,
                            },
                            "hasError": false,
                            "isStopped": false,
                            "observers": Array [],
                            "operator": SwitchMapOperator {
                              "project": [Function],
                            },
                            "source": BehaviorSubject {
                              "_isScalar": false,
                              "_value": Observable {
                                "_isScalar": false,
                                "operator": FinallyOperator {
                                  "callback": [Function],
                                },
                                "source": Observable {
                                  "_isScalar": false,
                                  "operator": MapOperator {
                                    "project": [Function],
                                    "thisArg": undefined,
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "_subscribe": [Function],
                                  },
                                },
                              },
                              "closed": false,
                              "hasError": false,
                              "isStopped": false,
                              "observers": Array [],
                              "thrownError": null,
                            },
                            "thrownError": null,
                          },
                          "subjectFactory": [Function],
                        },
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [],
                        "operator": FinallyOperator {
                          "callback": [Function],
                        },
                        "source": AnonymousSubject {
                          "source": AnonymousSubject {
                            "_isScalar": false,
                            "closed": false,
                            "destination": BehaviorSubject {
                              "_isScalar": false,
                              "_value": Observable {
                                "_isScalar": false,
                                "operator": FinallyOperator {
                                  "callback": [Function],
                                },
                                "source": Observable {
                                  "_isScalar": false,
                                  "operator": MapOperator {
                                    "project": [Function],
                                    "thisArg": undefined,
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "_subscribe": [Function],
                                  },
                                },
                              },
                              "closed": false,
                              "hasError": false,
                              "isStopped": false,
                              "observers": Array [],
                              "thrownError": null,
                            },
                            "hasError": false,
                            "isStopped": false,
                            "observers": Array [],
                            "operator": SwitchMapOperator {
                              "project": [Function],
                            },
                            "source": BehaviorSubject {
                              "_isScalar": false,
                              "_value": Observable {
                                "_isScalar": false,
                                "operator": FinallyOperator {
                                  "callback": [Function],
                                },
                                "source": Observable {
                                  "_isScalar": false,
                                  "operator": MapOperator {
                                    "project": [Function],
                                    "thisArg": undefined,
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "_subscribe": [Function],
                                  },
                                },
                              },
                              "closed": false,
                              "hasError": false,
                              "isStopped": false,
                              "observers": Array [],
                              "thrownError": null,
                            },
                            "thrownError": null,
                          },
                          "subjectFactory": [Function],
                        },
                        "thrownError": null,
                      },
                      "subjectFactory": [Function],
                    },
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "operator": RefCountOperator {
                      "connectable": AnonymousSubject {
                        "source": AnonymousSubject {
                          "_isScalar": false,
                          "closed": false,
                          "destination": AnonymousSubject {
                            "source": AnonymousSubject {
                              "_isScalar": false,
                              "closed": false,
                              "destination": BehaviorSubject {
                                "_isScalar": false,
                                "_value": Observable {
                                  "_isScalar": false,
                                  "operator": FinallyOperator {
                                    "callback": [Function],
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "operator": MapOperator {
                                      "project": [Function],
                                      "thisArg": undefined,
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "_subscribe": [Function],
                                    },
                                  },
                                },
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [],
                                "thrownError": null,
                              },
                              "hasError": false,
                              "isStopped": false,
                              "observers": Array [],
                              "operator": SwitchMapOperator {
                                "project": [Function],
                              },
                              "source": BehaviorSubject {
                                "_isScalar": false,
                                "_value": Observable {
                                  "_isScalar": false,
                                  "operator": FinallyOperator {
                                    "callback": [Function],
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "operator": MapOperator {
                                      "project": [Function],
                                      "thisArg": undefined,
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "_subscribe": [Function],
                                    },
                                  },
                                },
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [],
                                "thrownError": null,
                              },
                              "thrownError": null,
                            },
                            "subjectFactory": [Function],
                          },
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "operator": FinallyOperator {
                            "callback": [Function],
                          },
                          "source": AnonymousSubject {
                            "source": AnonymousSubject {
                              "_isScalar": false,
                              "closed": false,
                              "destination": BehaviorSubject {
                                "_isScalar": false,
                                "_value": Observable {
                                  "_isScalar": false,
                                  "operator": FinallyOperator {
                                    "callback": [Function],
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "operator": MapOperator {
                                      "project": [Function],
                                      "thisArg": undefined,
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "_subscribe": [Function],
                                    },
                                  },
                                },
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [],
                                "thrownError": null,
                              },
                              "hasError": false,
                              "isStopped": false,
                              "observers": Array [],
                              "operator": SwitchMapOperator {
                                "project": [Function],
                              },
                              "source": BehaviorSubject {
                                "_isScalar": false,
                                "_value": Observable {
                                  "_isScalar": false,
                                  "operator": FinallyOperator {
                                    "callback": [Function],
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "operator": MapOperator {
                                      "project": [Function],
                                      "thisArg": undefined,
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "_subscribe": [Function],
                                    },
                                  },
                                },
                                "closed": false,
                                "hasError": false,
                                "isStopped": false,
                                "observers": Array [],
                                "thrownError": null,
                              },
                              "thrownError": null,
                            },
                            "subjectFactory": [Function],
                          },
                          "thrownError": null,
                        },
                        "subjectFactory": [Function],
                      },
                    },
                    "source": AnonymousSubject {
                      "source": AnonymousSubject {
                        "_isScalar": false,
                        "closed": false,
                        "destination": AnonymousSubject {
                          "source": AnonymousSubject {
                            "_isScalar": false,
                            "closed": false,
                            "destination": BehaviorSubject {
                              "_isScalar": false,
                              "_value": Observable {
                                "_isScalar": false,
                                "operator": FinallyOperator {
                                  "callback": [Function],
                                },
                                "source": Observable {
                                  "_isScalar": false,
                                  "operator": MapOperator {
                                    "project": [Function],
                                    "thisArg": undefined,
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "_subscribe": [Function],
                                  },
                                },
                              },
                              "closed": false,
                              "hasError": false,
                              "isStopped": false,
                              "observers": Array [],
                              "thrownError": null,
                            },
                            "hasError": false,
                            "isStopped": false,
                            "observers": Array [],
                            "operator": SwitchMapOperator {
                              "project": [Function],
                            },
                            "source": BehaviorSubject {
                              "_isScalar": false,
                              "_value": Observable {
                                "_isScalar": false,
                                "operator": FinallyOperator {
                                  "callback": [Function],
                                },
                                "source": Observable {
                                  "_isScalar": false,
                                  "operator": MapOperator {
                                    "project": [Function],
                                    "thisArg": undefined,
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "_subscribe": [Function],
                                  },
                                },
                              },
                              "closed": false,
                              "hasError": false,
                              "isStopped": false,
                              "observers": Array [],
                              "thrownError": null,
                            },
                            "thrownError": null,
                          },
                          "subjectFactory": [Function],
                        },
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [],
                        "operator": FinallyOperator {
                          "callback": [Function],
                        },
                        "source": AnonymousSubject {
                          "source": AnonymousSubject {
                            "_isScalar": false,
                            "closed": false,
                            "destination": BehaviorSubject {
                              "_isScalar": false,
                              "_value": Observable {
                                "_isScalar": false,
                                "operator": FinallyOperator {
                                  "callback": [Function],
                                },
                                "source": Observable {
                                  "_isScalar": false,
                                  "operator": MapOperator {
                                    "project": [Function],
                                    "thisArg": undefined,
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "_subscribe": [Function],
                                  },
                                },
                              },
                              "closed": false,
                              "hasError": false,
                              "isStopped": false,
                              "observers": Array [],
                              "thrownError": null,
                            },
                            "hasError": false,
                            "isStopped": false,
                            "observers": Array [],
                            "operator": SwitchMapOperator {
                              "project": [Function],
                            },
                            "source": BehaviorSubject {
                              "_isScalar": false,
                              "_value": Observable {
                                "_isScalar": false,
                                "operator": FinallyOperator {
                                  "callback": [Function],
                                },
                                "source": Observable {
                                  "_isScalar": false,
                                  "operator": MapOperator {
                                    "project": [Function],
                                    "thisArg": undefined,
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "_subscribe": [Function],
                                  },
                                },
                              },
                              "closed": false,
                              "hasError": false,
                              "isStopped": false,
                              "observers": Array [],
                              "thrownError": null,
                            },
                            "thrownError": null,
                          },
                          "subjectFactory": [Function],
                        },
                        "thrownError": null,
                      },
                      "subjectFactory": [Function],
                    },
                    "thrownError": null,
                  },
                },
                "_scheduler": Subject {
                  "_isScalar": false,
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [
                    MergeMapSubscriber {
                      "_parentOrParents": Subscriber {
                        "_parentOrParents": null,
                        "_subscriptions": Array [
                          [Circular],
                          SimpleInnerSubscriber {
                            "_parentOrParents": [Circular],
                            "_subscriptions": Array [
                              OnErrorResumeNextSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  AsapAction {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "delay": 0,
                                    "id": 1,
                                    "pending": true,
                                    "scheduler": AsapScheduler {
                                      "SchedulerAction": [Function],
                                      "actions": Array [
                                        [Circular],
                                      ],
                                      "active": false,
                                      "now": [Function],
                                      "scheduled": 1,
                                    },
                                    "state": Object {
                                      "source": AnonymousSubject {
                                        "_isScalar": false,
                                        "closed": false,
                                        "destination": AnonymousSubject {
                                          "_isScalar": false,
                                          "closed": false,
                                          "destination": AnonymousSubject {
                                            "source": AnonymousSubject {
                                              "_isScalar": false,
                                              "closed": false,
                                              "destination": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "hasError": false,
                                              "isStopped": false,
                                              "observers": Array [],
                                              "operator": SwitchMapOperator {
                                                "project": [Function],
                                              },
                                              "source": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "thrownError": null,
                                            },
                                            "subjectFactory": [Function],
                                          },
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [],
                                          "operator": RefCountOperator {
                                            "connectable": AnonymousSubject {
                                              "source": AnonymousSubject {
                                                "_isScalar": false,
                                                "closed": false,
                                                "destination": BehaviorSubject {
                                                  "_isScalar": false,
                                                  "_value": Observable {
                                                    "_isScalar": false,
                                                    "operator": FinallyOperator {
                                                      "callback": [Function],
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "operator": MapOperator {
                                                        "project": [Function],
                                                        "thisArg": undefined,
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "_subscribe": [Function],
                                                      },
                                                    },
                                                  },
                                                  "closed": false,
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "thrownError": null,
                                                },
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "operator": SwitchMapOperator {
                                                  "project": [Function],
                                                },
                                                "source": BehaviorSubject {
                                                  "_isScalar": false,
                                                  "_value": Observable {
                                                    "_isScalar": false,
                                                    "operator": FinallyOperator {
                                                      "callback": [Function],
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "operator": MapOperator {
                                                        "project": [Function],
                                                        "thisArg": undefined,
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "_subscribe": [Function],
                                                      },
                                                    },
                                                  },
                                                  "closed": false,
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "thrownError": null,
                                                },
                                                "thrownError": null,
                                              },
                                              "subjectFactory": [Function],
                                            },
                                          },
                                          "source": AnonymousSubject {
                                            "source": AnonymousSubject {
                                              "_isScalar": false,
                                              "closed": false,
                                              "destination": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "hasError": false,
                                              "isStopped": false,
                                              "observers": Array [],
                                              "operator": SwitchMapOperator {
                                                "project": [Function],
                                              },
                                              "source": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "thrownError": null,
                                            },
                                            "subjectFactory": [Function],
                                          },
                                          "thrownError": null,
                                        },
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [],
                                        "operator": ObserveOnOperator {
                                          "delay": 0,
                                          "scheduler": QueueScheduler {
                                            "SchedulerAction": [Function],
                                            "actions": Array [],
                                            "active": false,
                                            "now": [Function],
                                            "scheduled": undefined,
                                          },
                                        },
                                        "source": AnonymousSubject {
                                          "_isScalar": false,
                                          "closed": false,
                                          "destination": AnonymousSubject {
                                            "source": AnonymousSubject {
                                              "_isScalar": false,
                                              "closed": false,
                                              "destination": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "hasError": false,
                                              "isStopped": false,
                                              "observers": Array [],
                                              "operator": SwitchMapOperator {
                                                "project": [Function],
                                              },
                                              "source": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "thrownError": null,
                                            },
                                            "subjectFactory": [Function],
                                          },
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [],
                                          "operator": RefCountOperator {
                                            "connectable": AnonymousSubject {
                                              "source": AnonymousSubject {
                                                "_isScalar": false,
                                                "closed": false,
                                                "destination": BehaviorSubject {
                                                  "_isScalar": false,
                                                  "_value": Observable {
                                                    "_isScalar": false,
                                                    "operator": FinallyOperator {
                                                      "callback": [Function],
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "operator": MapOperator {
                                                        "project": [Function],
                                                        "thisArg": undefined,
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "_subscribe": [Function],
                                                      },
                                                    },
                                                  },
                                                  "closed": false,
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "thrownError": null,
                                                },
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "operator": SwitchMapOperator {
                                                  "project": [Function],
                                                },
                                                "source": BehaviorSubject {
                                                  "_isScalar": false,
                                                  "_value": Observable {
                                                    "_isScalar": false,
                                                    "operator": FinallyOperator {
                                                      "callback": [Function],
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "operator": MapOperator {
                                                        "project": [Function],
                                                        "thisArg": undefined,
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "_subscribe": [Function],
                                                      },
                                                    },
                                                  },
                                                  "closed": false,
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "thrownError": null,
                                                },
                                                "thrownError": null,
                                              },
                                              "subjectFactory": [Function],
                                            },
                                          },
                                          "source": AnonymousSubject {
                                            "source": AnonymousSubject {
                                              "_isScalar": false,
                                              "closed": false,
                                              "destination": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "hasError": false,
                                              "isStopped": false,
                                              "observers": Array [],
                                              "operator": SwitchMapOperator {
                                                "project": [Function],
                                              },
                                              "source": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "thrownError": null,
                                            },
                                            "subjectFactory": [Function],
                                          },
                                          "thrownError": null,
                                        },
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                    "work": [Function],
                                  },
                                ],
                                "closed": false,
                                "destination": [Circular],
                                "isStopped": false,
                                "nextSources": Array [],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "parent": [Circular],
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "closed": false,
                        "destination": SafeSubscriber {
                          "_complete": [Function],
                          "_context": [Circular],
                          "_error": [Function],
                          "_next": [Function],
                          "_parentOrParents": null,
                          "_parentSubscriber": [Circular],
                          "_subscriptions": null,
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "isStopped": false,
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                        "isStopped": false,
                        "syncErrorThrowable": true,
                        "syncErrorThrown": false,
                        "syncErrorValue": null,
                      },
                      "_subscriptions": Array [
                        SubjectSubscription {
                          "_parentOrParents": [Circular],
                          "_subscriptions": null,
                          "closed": false,
                          "subject": [Circular],
                          "subscriber": [Circular],
                        },
                      ],
                      "active": 1,
                      "buffer": Array [],
                      "closed": false,
                      "concurrent": 1,
                      "destination": Subscriber {
                        "_parentOrParents": null,
                        "_subscriptions": Array [
                          [Circular],
                          SimpleInnerSubscriber {
                            "_parentOrParents": [Circular],
                            "_subscriptions": Array [
                              OnErrorResumeNextSubscriber {
                                "_parentOrParents": [Circular],
                                "_subscriptions": Array [
                                  AsapAction {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "delay": 0,
                                    "id": 1,
                                    "pending": true,
                                    "scheduler": AsapScheduler {
                                      "SchedulerAction": [Function],
                                      "actions": Array [
                                        [Circular],
                                      ],
                                      "active": false,
                                      "now": [Function],
                                      "scheduled": 1,
                                    },
                                    "state": Object {
                                      "source": AnonymousSubject {
                                        "_isScalar": false,
                                        "closed": false,
                                        "destination": AnonymousSubject {
                                          "_isScalar": false,
                                          "closed": false,
                                          "destination": AnonymousSubject {
                                            "source": AnonymousSubject {
                                              "_isScalar": false,
                                              "closed": false,
                                              "destination": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "hasError": false,
                                              "isStopped": false,
                                              "observers": Array [],
                                              "operator": SwitchMapOperator {
                                                "project": [Function],
                                              },
                                              "source": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "thrownError": null,
                                            },
                                            "subjectFactory": [Function],
                                          },
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [],
                                          "operator": RefCountOperator {
                                            "connectable": AnonymousSubject {
                                              "source": AnonymousSubject {
                                                "_isScalar": false,
                                                "closed": false,
                                                "destination": BehaviorSubject {
                                                  "_isScalar": false,
                                                  "_value": Observable {
                                                    "_isScalar": false,
                                                    "operator": FinallyOperator {
                                                      "callback": [Function],
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "operator": MapOperator {
                                                        "project": [Function],
                                                        "thisArg": undefined,
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "_subscribe": [Function],
                                                      },
                                                    },
                                                  },
                                                  "closed": false,
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "thrownError": null,
                                                },
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "operator": SwitchMapOperator {
                                                  "project": [Function],
                                                },
                                                "source": BehaviorSubject {
                                                  "_isScalar": false,
                                                  "_value": Observable {
                                                    "_isScalar": false,
                                                    "operator": FinallyOperator {
                                                      "callback": [Function],
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "operator": MapOperator {
                                                        "project": [Function],
                                                        "thisArg": undefined,
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "_subscribe": [Function],
                                                      },
                                                    },
                                                  },
                                                  "closed": false,
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "thrownError": null,
                                                },
                                                "thrownError": null,
                                              },
                                              "subjectFactory": [Function],
                                            },
                                          },
                                          "source": AnonymousSubject {
                                            "source": AnonymousSubject {
                                              "_isScalar": false,
                                              "closed": false,
                                              "destination": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "hasError": false,
                                              "isStopped": false,
                                              "observers": Array [],
                                              "operator": SwitchMapOperator {
                                                "project": [Function],
                                              },
                                              "source": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "thrownError": null,
                                            },
                                            "subjectFactory": [Function],
                                          },
                                          "thrownError": null,
                                        },
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [],
                                        "operator": ObserveOnOperator {
                                          "delay": 0,
                                          "scheduler": QueueScheduler {
                                            "SchedulerAction": [Function],
                                            "actions": Array [],
                                            "active": false,
                                            "now": [Function],
                                            "scheduled": undefined,
                                          },
                                        },
                                        "source": AnonymousSubject {
                                          "_isScalar": false,
                                          "closed": false,
                                          "destination": AnonymousSubject {
                                            "source": AnonymousSubject {
                                              "_isScalar": false,
                                              "closed": false,
                                              "destination": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "hasError": false,
                                              "isStopped": false,
                                              "observers": Array [],
                                              "operator": SwitchMapOperator {
                                                "project": [Function],
                                              },
                                              "source": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "thrownError": null,
                                            },
                                            "subjectFactory": [Function],
                                          },
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [],
                                          "operator": RefCountOperator {
                                            "connectable": AnonymousSubject {
                                              "source": AnonymousSubject {
                                                "_isScalar": false,
                                                "closed": false,
                                                "destination": BehaviorSubject {
                                                  "_isScalar": false,
                                                  "_value": Observable {
                                                    "_isScalar": false,
                                                    "operator": FinallyOperator {
                                                      "callback": [Function],
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "operator": MapOperator {
                                                        "project": [Function],
                                                        "thisArg": undefined,
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "_subscribe": [Function],
                                                      },
                                                    },
                                                  },
                                                  "closed": false,
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "thrownError": null,
                                                },
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "operator": SwitchMapOperator {
                                                  "project": [Function],
                                                },
                                                "source": BehaviorSubject {
                                                  "_isScalar": false,
                                                  "_value": Observable {
                                                    "_isScalar": false,
                                                    "operator": FinallyOperator {
                                                      "callback": [Function],
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "operator": MapOperator {
                                                        "project": [Function],
                                                        "thisArg": undefined,
                                                      },
                                                      "source": Observable {
                                                        "_isScalar": false,
                                                        "_subscribe": [Function],
                                                      },
                                                    },
                                                  },
                                                  "closed": false,
                                                  "hasError": false,
                                                  "isStopped": false,
                                                  "observers": Array [],
                                                  "thrownError": null,
                                                },
                                                "thrownError": null,
                                              },
                                              "subjectFactory": [Function],
                                            },
                                          },
                                          "source": AnonymousSubject {
                                            "source": AnonymousSubject {
                                              "_isScalar": false,
                                              "closed": false,
                                              "destination": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "hasError": false,
                                              "isStopped": false,
                                              "observers": Array [],
                                              "operator": SwitchMapOperator {
                                                "project": [Function],
                                              },
                                              "source": BehaviorSubject {
                                                "_isScalar": false,
                                                "_value": Observable {
                                                  "_isScalar": false,
                                                  "operator": FinallyOperator {
                                                    "callback": [Function],
                                                  },
                                                  "source": Observable {
                                                    "_isScalar": false,
                                                    "operator": MapOperator {
                                                      "project": [Function],
                                                      "thisArg": undefined,
                                                    },
                                                    "source": Observable {
                                                      "_isScalar": false,
                                                      "_subscribe": [Function],
                                                    },
                                                  },
                                                },
                                                "closed": false,
                                                "hasError": false,
                                                "isStopped": false,
                                                "observers": Array [],
                                                "thrownError": null,
                                              },
                                              "thrownError": null,
                                            },
                                            "subjectFactory": [Function],
                                          },
                                          "thrownError": null,
                                        },
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                    "work": [Function],
                                  },
                                ],
                                "closed": false,
                                "destination": [Circular],
                                "isStopped": false,
                                "nextSources": Array [],
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "parent": [Circular],
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "closed": false,
                        "destination": SafeSubscriber {
                          "_complete": [Function],
                          "_context": [Circular],
                          "_error": [Function],
                          "_next": [Function],
                          "_parentOrParents": null,
                          "_parentSubscriber": [Circular],
                          "_subscriptions": null,
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "isStopped": false,
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                        "isStopped": false,
                        "syncErrorThrowable": true,
                        "syncErrorThrown": false,
                        "syncErrorValue": null,
                      },
                      "hasCompleted": false,
                      "index": 1,
                      "isStopped": false,
                      "project": [Function],
                      "syncErrorThrowable": true,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                  ],
                  "thrownError": null,
                },
              },
              "_pageLoader": PageLoader {
                "_activePageRequests": Map {
                  undefined => Map {
                    0 => Observable {
                      "_isScalar": false,
                      "operator": RefCountOperator {
                        "connectable": Observable {
                          "source": Observable {
                            "_isScalar": false,
                            "operator": FinallyOperator {
                              "callback": [Function],
                            },
                            "source": Observable {
                              "_isScalar": false,
                              "operator": MergeMapOperator {
                                "concurrent": 1,
                                "project": [Function],
                              },
                              "source": Observable {
                                "_isScalar": false,
                                "operator": RefCountOperator {
                                  "connectable": Observable {
                                    "source": Observable {
                                      "_isScalar": false,
                                      "operator": MergeMapOperator {
                                        "concurrent": 1,
                                        "project": [Function],
                                      },
                                      "source": Observable {
                                        "_isScalar": false,
                                        "_subscribe": [Function],
                                      },
                                    },
                                    "subjectFactory": [Function],
                                  },
                                },
                                "source": Observable {
                                  "source": Observable {
                                    "_isScalar": false,
                                    "operator": MergeMapOperator {
                                      "concurrent": 1,
                                      "project": [Function],
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "_subscribe": [Function],
                                    },
                                  },
                                  "subjectFactory": [Function],
                                },
                              },
                            },
                          },
                          "subjectFactory": [Function],
                        },
                      },
                      "source": Observable {
                        "source": Observable {
                          "_isScalar": false,
                          "operator": FinallyOperator {
                            "callback": [Function],
                          },
                          "source": Observable {
                            "_isScalar": false,
                            "operator": MergeMapOperator {
                              "concurrent": 1,
                              "project": [Function],
                            },
                            "source": Observable {
                              "_isScalar": false,
                              "operator": RefCountOperator {
                                "connectable": Observable {
                                  "source": Observable {
                                    "_isScalar": false,
                                    "operator": MergeMapOperator {
                                      "concurrent": 1,
                                      "project": [Function],
                                    },
                                    "source": Observable {
                                      "_isScalar": false,
                                      "_subscribe": [Function],
                                    },
                                  },
                                  "subjectFactory": [Function],
                                },
                              },
                              "source": Observable {
                                "source": Observable {
                                  "_isScalar": false,
                                  "operator": MergeMapOperator {
                                    "concurrent": 1,
                                    "project": [Function],
                                  },
                                  "source": Observable {
                                    "_isScalar": false,
                                    "_subscribe": [Function],
                                  },
                                },
                                "subjectFactory": [Function],
                              },
                            },
                          },
                        },
                        "subjectFactory": [Function],
                      },
                    },
                  },
                },
                "_dataSource": TreeDataSource {
                  "_dataProvider": PresentationTreeDataProvider {
                    "_appendChildrenCountForGroupingNodes": undefined,
                    "_dataSource": Object {
                      "getFilteredNodePaths": [Function],
                      "getNodesAndCount": [Function],
                      "getNodesCount": [Function],
                    },
                    "_diagnosticsOptions": undefined,
                    "_disposeVariablesChangeListener": [Function],
                    "_getNodesAndCount": [Function],
                    "_imodel": null,
                    "_pagingSize": 20,
                    "_rulesetRegistration": RulesetRegistrationHelper {
                      "_rulesetId": "ui-framework/SpatialBreakdown",
                    },
                  },
                  "onItemsChanged": BeEvent {
                    "_insideRaiseEvent": false,
                    "_listeners": Array [],
                  },
                },
                "_pageSize": 20,
              },
              "_pageSize": 20,
              "_treeModelSource": TreeModelSource {
                "_model": MutableTreeModel {
                  "_rootNode": Object {
                    "depth": -1,
                    "id": undefined,
                    "numChildren": undefined,
                  },
                  "_tree": SparseTree {
                    "_idToNode": Object {},
                    "_parentToChildren": Object {},
                    "_rootNodes": SparseArray {
                      "_array": Array [],
                      "_length": 0,
                      Symbol(immer-draftable): true,
                    },
                    Symbol(immer-draftable): true,
                  },
                  Symbol(immer-draftable): true,
                },
                "onModelChanged": BeUiEvent {
                  "_insideRaiseEvent": false,
                  "_listeners": Array [
                    Object {
                      "listener": [Function],
                      "once": false,
                      "scope": undefined,
                    },
                    Object {
                      "listener": [Function],
                      "once": false,
                      "scope": undefined,
                    },
                    Object {
                      "listener": [Function],
                      "once": false,
                      "scope": undefined,
                    },
                    Object {
                      "listener": [Function],
                      "once": false,
                      "scope": undefined,
                    },
                  ],
                },
              },
            }
          }
          selectionMode={12}
          treeRenderer={[Function]}
          width={0}
        >
          <Loader
            loading={true}
            noData={false}
          >
            <div
              className="components-controlledTree-loader"
            >
              <DelayedSpinner
                size="large"
              />
            </div>
          </Loader>
        </ControlledTree>
      </div>
    </div>
  </ControlledTreeWrapper>
</Provider>
`;

exports[`TreeComponent tests. TreeWithRuleset renders correctly with visibility 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Object {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "onStateChange": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <ControlledTreeWrapper
    dataProvider={
      Object {
        "dispose": [Function],
        "getFilteredNodePaths": [Function],
        "getNodeKey": [Function],
        "getNodes": [Function],
        "getNodesCount": [Function],
        "imodel": null,
        "rulesetId": "breakdown-trees-react/RulesList",
      }
    }
    displayGuids={true}
    enableVisibility={true}
    iModel={null}
    loadedRuleset={
      Object {
        "$schema": "../../node_modules/@itwin/presentation-common/Ruleset.schema.json",
        "id": "itwin-breakdown-trees/SpatialBreakdown",
        "rules": Array [
          Object {
            "ruleType": "RootNodes",
            "specifications": Array [
              Object {
                "classes": Array [
                  Object {
                    "arePolymorphic": true,
                    "classNames": Array [
                      "CompositeElement",
                    ],
                    "schemaName": "SpatialComposition",
                  },
                ],
                "groupByClass": false,
                "groupByLabel": false,
                "instanceFilter": "NOT model.IsPrivate AND this.ComposingElement = NULL",
                "relatedInstances": Array [
                  Object {
                    "alias": "model",
                    "isRequired": true,
                    "relationshipPath": Object {
                      "direction": "Backward",
                      "relationship": Object {
                        "className": "ModelContainsElements",
                        "schemaName": "BisCore",
                      },
                      "targetClass": Object {
                        "className": "Model",
                        "schemaName": "BisCore",
                      },
                    },
                  },
                ],
                "specType": "InstanceNodesOfSpecificClasses",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "doNotSort": true,
                "groupByClass": false,
                "groupByLabel": false,
                "relationshipPaths": Array [
                  Object {
                    "direction": "Backward",
                    "relationship": Object {
                      "className": "PhysicalSystemServicesSpatialElements",
                      "schemaName": "BisCore",
                    },
                    "targetClass": Object {
                      "className": "DistributionSystem",
                      "schemaName": "DistributionSystems",
                    },
                  },
                ],
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"DistributionSystem\\", \\"DistributionSystems\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "doNotSort": true,
                "groupByClass": false,
                "groupByLabel": false,
                "relationshipPaths": Array [
                  Object {
                    "direction": "Forward",
                    "relationship": Object {
                      "className": "DistributionSystemGroupsDistributionElements",
                      "schemaName": "DistributionSystems",
                    },
                    "targetClass": Object {
                      "className": "SpatialElement",
                      "schemaName": "Biscore",
                    },
                  },
                ],
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "doNotSort": true,
                "groupByClass": false,
                "groupByLabel": false,
                "relationshipPaths": Array [
                  Object {
                    "direction": "Forward",
                    "relationship": Object {
                      "className": "CompositeComposesSubComposites",
                      "schemaName": "SpatialComposition",
                    },
                    "targetClass": Object {
                      "className": "CompositeElement",
                      "schemaName": "SpatialComposition",
                    },
                  },
                ],
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "groupByClass": true,
                "groupByLabel": false,
                "relationshipPaths": Array [
                  Object {
                    "direction": "Forward",
                    "relationship": Object {
                      "className": "CompositeOverlapsSpatialElements",
                      "schemaName": "SpatialComposition",
                    },
                    "targetClass": Object {
                      "className": "SpatialElement",
                      "schemaName": "BisCore",
                    },
                  },
                ],
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "groupByClass": true,
                "groupByLabel": false,
                "relationshipPaths": Array [
                  Object {
                    "direction": "Forward",
                    "relationship": Object {
                      "className": "SpatialOrganizerReferencesSpatialElements",
                      "schemaName": "SpatialComposition",
                    },
                    "targetClass": Object {
                      "className": "SpatialElement",
                      "schemaName": "BisCore",
                    },
                  },
                ],
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ParentNode.IsOfClass(\\"CompositeElement\\", \\"SpatialComposition\\")",
            "ruleType": "ChildNodes",
            "specifications": Array [
              Object {
                "groupByClass": true,
                "groupByLabel": false,
                "relationshipPaths": Array [
                  Object {
                    "direction": "Forward",
                    "relationship": Object {
                      "className": "SpatialOrganizerHoldsSpatialElements",
                      "schemaName": "SpatialComposition",
                    },
                    "targetClass": Object {
                      "className": "SpatialElement",
                      "schemaName": "BisCore",
                    },
                  },
                ],
                "specType": "RelatedInstanceNodes",
              },
            ],
          },
          Object {
            "condition": "ContentDisplayType = \\"RelatedElementsRequest\\"",
            "ruleType": "Content",
            "specifications": Array [
              Object {
                "relationshipPaths": Array [
                  Array [
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "CompositeComposesSubComposites",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "CompositeOverlapsSpatialElements",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "ElementOwnsChildElements",
                        "schemaName": "BisCore",
                      },
                    },
                  ],
                ],
                "specType": "ContentRelatedInstances",
              },
              Object {
                "relationshipPaths": Array [
                  Array [
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "CompositeComposesSubComposites",
                        "schemaName": "SpatialComposition",
                      },
                      "targetClass": Object {
                        "className": "ISpatialOrganizer",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "SpatialOrganizerHoldsSpatialElements",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "ElementOwnsChildElements",
                        "schemaName": "BisCore",
                      },
                    },
                  ],
                ],
                "specType": "ContentRelatedInstances",
              },
              Object {
                "relationshipPaths": Array [
                  Array [
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "CompositeComposesSubComposites",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "SpatialOrganizerReferencesSpatialElements",
                        "schemaName": "SpatialComposition",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "ElementOwnsChildElements",
                        "schemaName": "BisCore",
                      },
                    },
                  ],
                ],
                "specType": "ContentRelatedInstances",
              },
              Object {
                "relationshipPaths": Array [
                  Array [
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "DistributionSystemGroupsDistributionElements",
                        "schemaName": "DistributionSystems",
                      },
                    },
                    Object {
                      "count": "*",
                      "direction": "Forward",
                      "relationship": Object {
                        "className": "ElementOwnsChildElements",
                        "schemaName": "BisCore",
                      },
                    },
                  ],
                ],
                "specType": "ContentRelatedInstances",
              },
            ],
          },
        ],
      }
    }
    optionItems={Array []}
    searchTools={true}
    setIsDisplayGuids={[Function]}
    treeName="TreeWithRulesetTest"
    treeNodeIconMapper={
      TreeNodeFunctionIconInfoMapper {
        "_TreeNodeClassFunctionIconInfoMap": Map {},
        "_functionIconInfos": Array [],
        "_globalFunctionIconInfos": Array [],
        "_groupNodeFunctionIconInfos": Array [],
        "_multipleNodesFunctionIconInfos": Array [],
        "_treeDataProvider": Object {
          "dispose": [Function],
          "getFilteredNodePaths": [Function],
          "getNodeKey": [Function],
          "getNodes": [Function],
          "getNodesCount": [Function],
          "imodel": null,
          "rulesetId": "breakdown-trees-react/RulesList",
        },
      }
    }
  />
</ContextProvider>
`;
