sep=;
Release Tag;API Item
public;areAllModelsVisible(models: string[], viewport: Viewport): boolean
public;BaseFilterableTreeProps 
public;BaseTreeProps 
public;CategoriesTreeComponent:
public;CategoriesTreeComponentProps 
public;CategoriesTreeHeaderButtonProps 
public;CategoryInfo
public;CategoryTree(props: CategoryTreeProps): JSX.Element | null
public;CategoryTreeProps 
public;CategoryVisibilityHandler 
public;CategoryVisibilityHandlerParams
public;ClassGroupingOption
public;ContextMenuItemProps
public;createVisibilityTreeNodeRenderer({ levelOffset, disableRootNodeCollapse, descriptionEnabled, iconsEnabled, onVisibilityToggled, }: VisibilityTreeNodeRendererProps): (treeNodeProps: TreeNodeRendererProps_2) => JSX.Element
public;createVisibilityTreeRenderer({ nodeRendererProps, ...restProps }: VisibilityTreeRendererProps): (treeProps: TreeRendererProps) => JSX.Element
public;DefaultLabelRenderer({ label, context }: DefaultLabelRendererProps): React.JSX.Element
public;DefaultLabelRendererProps
alpha;ExternalSourcesTree(props: ExternalSourcesTreeProps): JSX.Element | null
alpha;ExternalSourcesTreeComponent:
alpha;ExternalSourcesTreeComponentProps = Omit
alpha;ExternalSourcesTreeProps 
beta;FilterableTreeNodeRendererProps 
beta;FilterableTreeRenderer({ nodeRenderer, nodeLoader, reportUsage, ...restProps }: FilterableTreeRendererProps): JSX.Element
beta;FilterableTreeRendererProps 
beta;FilterableVisibilityTreeNodeRenderer({ levelOffset, disableRootNodeCollapse, descriptionEnabled, isEnlarged, onVisibilityToggled, ...restProps }: FilterableVisibilityTreeNodeRendererProps): JSX.Element
beta;FilterableVisibilityTreeNodeRendererProps = Omit
public;hideAllCategories(categories: string[], viewport: Viewport): Promise
public;hideAllModels(models: string[], viewport: Viewport): Promise
beta;HierarchyLevelConfig
public;IModelContentTree: (props: IModelContentTreeProps) => JSX.Element | null
public;IModelContentTreeComponent:
public;IModelContentTreeComponentProps = Omit
public;IModelContentTreeProps 
public;invertAllCategories(categories: CategoryInfo[], viewport: Viewport): Promise
public;invertAllModels(models: string[], viewport: Viewport): Promise
public;IVisibilityHandler 
public;LabelRendererContext
public;ModelInfo
public;ModelsTree(props: ModelsTreeProps): JSX.Element | null
public;ModelsTreeComponent:
public;ModelsTreeHeaderButtonProps 
public;ModelsTreeHierarchyConfiguration
public;ModelsTreeNodeType
public;ModelsTreeProps 
public;ModelsTreeSelectionPredicate = (key: NodeKey, type: ModelsTreeNodeType) => boolean
public;ModelsVisibilityHandler 
public;ModelsVisibilityHandlerProps
public;ModelTreeComponentProps 
public;SelectableTree(props: SelectableTreeProps): JSX.Element | null
public;SelectableTreeProps
public;showAllCategories(categories: string[], viewport: Viewport): Promise
public;showAllModels(models: string[], viewport: Viewport): Promise
beta;StatelessCategoriesTreeComponent: (props: StatelessCategoriesTreeComponentProps) => JSX.Element | null
beta;StatelessExternalSourcesTreeComponent: (props: StatelessExternalSourcesTreeComponentProps) => JSX.Element | null
beta;StatelessIModelContentTreeComponent: (props: StatelessIModelContentTreeComponentProps) => JSX.Element | null
beta;StatelessModelsTreeComponent: (props: StatelessModelsTreeComponentProps) => JSX.Element | null
public;toggleModels(models: string[], enable: boolean, viewport: Viewport): Promise
public;TreeContextMenuItem({ id, children, title, onSelect }: PropsWithChildren
public;TreeContextMenuItemProps
public;TreeContextMenuProps
public;TreeDefinition
public;TreeNodeLabelRendererProps
public;TreeNodeRendererProps
public;TreeRenderer({ contextMenuItems, nodeRenderer, nodeLabelRenderer, density, ...restProps }: TreeRendererProps): JSX.Element
public;TreeRendererBaseProps 
public;TreeRendererProps = TreeRendererProps_2 & TreeRendererBaseProps
public;TreeRenderProps
public;TreeWidget
public;TreeWidgetComponent(props: SelectableTreeProps): JSX.Element
public;TreeWidgetId = "tree-widget-react:trees"
public;TreeWidgetOptions
public;TreeWidgetUiItemsProvider 
public;useTreeTransientState
public;useVisibilityTreeFiltering(nodeLoader: AbstractTreeNodeLoaderWithProvider
deprecated;useVisibilityTreeFiltering(nodeLoader: AbstractTreeNodeLoaderWithProvider
beta;useVisibilityTreeState({ imodel, ruleset, filterInfo, onFilterChange, visibilityHandler, selectionPredicate, eventHandler, reportUsage, ...props }: UseVisibilityTreeStateProps): UsePresentationTreeStateResult
beta;UseVisibilityTreeStateProps 
public;VisibilityChangeListener = (nodeIds?: string[], visibilityStatus?: Map
public;VisibilityStatus
public;VisibilityTreeEventHandler 
public;VisibilityTreeEventHandlerParams 
public;VisibilityTreeFilterInfo
public;VisibilityTreeNodeCheckbox(props: VisibilityTreeNodeCheckboxProps): JSX.Element
public;VisibilityTreeNodeRendererProps
public;VisibilityTreeNoFilteredData(props: VisibilityTreeNoFilteredDataProps): JSX.Element
public;VisibilityTreeNoFilteredDataProps
public;VisibilityTreeRendererProps 
public;VisibilityTreeSelectionPredicate = (node: TreeNodeItem) => boolean