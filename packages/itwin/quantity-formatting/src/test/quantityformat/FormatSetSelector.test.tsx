/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/

import { beforeEach, describe, expect, it, vi } from "vitest";
import { render, screen } from "@testing-library/react";
import { userEvent } from "@testing-library/user-event";
import { FormatSetSelector } from "../../components/quantityformat/FormatSetSelector.js";

import type { FormatSet } from "@itwin/ecschema-metadata";
// Mock the useTranslation hook
vi.mock("../../useTranslation.js", () => ({
  useTranslation: () => ({
    translate: (key: string) => {
      const translations: Record<string, string> = {
        "QuantityFormat:labels.searchFormatSets": "Search format sets...",
        "QuantityFormat:labels.noFormatSetsFound": "No format sets found matching",
        "QuantityFormat:labels.noFormatSetsAvailable": "No format sets available",
      };
      return translations[key] || key;
    },
  }),
}));

describe("FormatSetSelector", () => {
  const mockOnFormatSetChange = vi.fn();
  const user = userEvent.setup();

  // Mock format set data
  const mockFormatSets = [
    {
      name: "TestFormatSet1",
      label: "Arizona Highway Project (Civil)",
      unitSystem: "metric",
    } as FormatSet,
    {
      name: "TestFormatSet2",
      label: "Arizona Highway Project (Project Manager)",
      unitSystem: "imperial",
    } as FormatSet,
    {
      name: "TestFormatSet3",
      label: "My personal format set",
      unitSystem: "metric",
    } as FormatSet,
    {
      name: "AutogeneratedFormatSet",
      label: "Auto-generated Format Set from iModel",
      unitSystem: "metric",
    } as FormatSet,
  ];

  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe("Basic Rendering", () => {
    it("should render search input", () => {
      render(
        <FormatSetSelector
          formatSets={mockFormatSets}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      expect(screen.getByPlaceholderText("Search format sets...")).toBeTruthy();
    });

    it("should render all format sets when no search term", () => {
      render(
        <FormatSetSelector
          formatSets={mockFormatSets}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      expect(screen.getByText("Arizona Highway Project (Civil)")).toBeTruthy();
      expect(screen.getByText("Arizona Highway Project (Project Manager)")).toBeTruthy();
      expect(screen.getByText("My personal format set")).toBeTruthy();
      expect(screen.getByText("Auto-generated Format Set from iModel")).toBeTruthy();
    });

    it("should apply correct CSS classes", () => {
      const { container } = render(
        <FormatSetSelector
          formatSets={mockFormatSets}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      expect(container.querySelector(".quantityFormat--formatSetSelector-container")).toBeTruthy();
      expect(container.querySelector(".quantityFormat--formatSetSelector-list")).toBeTruthy();
      const listItems = container.querySelectorAll(".quantityFormat--formatSetSelector-listItem");
      expect(listItems.length).toBe(4);
    });
  });

  describe("Search Functionality", () => {
    it("should filter format sets based on search term", async () => {
      render(
        <FormatSetSelector
          formatSets={mockFormatSets}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      const searchInput = screen.getByPlaceholderText("Search format sets...");
      await user.type(searchInput, "Arizona");

      expect(screen.getByText("Arizona Highway Project (Civil)")).toBeTruthy();
      expect(screen.getByText("Arizona Highway Project (Project Manager)")).toBeTruthy();
      expect(screen.queryByText("My personal format set")).toBeNull();
      expect(screen.queryByText("Auto-generated Format Set from iModel")).toBeNull();
    });

    it("should be case insensitive", async () => {
      render(
        <FormatSetSelector
          formatSets={mockFormatSets}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      const searchInput = screen.getByPlaceholderText("Search format sets...");
      await user.type(searchInput, "ARIZONA");

      expect(screen.getByText("Arizona Highway Project (Civil)")).toBeTruthy();
      expect(screen.getByText("Arizona Highway Project (Project Manager)")).toBeTruthy();
    });

    it("should show no results message when search returns empty", async () => {
      render(
        <FormatSetSelector
          formatSets={mockFormatSets}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      const searchInput = screen.getByPlaceholderText("Search format sets...");
      await user.type(searchInput, "nonexistent");

      expect(screen.getByText(/No format sets found matching "nonexistent"/)).toBeTruthy();
    });

    it("should clear search and show all results when search is cleared", async () => {
      render(
        <FormatSetSelector
          formatSets={mockFormatSets}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      const searchInput = screen.getByPlaceholderText("Search format sets...");
      await user.type(searchInput, "Arizona");

      // Should only show filtered results
      expect(screen.queryByText("My personal format set")).toBeNull();

      await user.clear(searchInput);

      // Should show all results again
      expect(screen.getByText("My personal format set")).toBeTruthy();
      expect(screen.getByText("Auto-generated Format Set from iModel")).toBeTruthy();
    });
  });

  describe("Selection Functionality", () => {
    it("should call onFormatSetChange when format set is clicked", async () => {
      render(
        <FormatSetSelector
          formatSets={mockFormatSets}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      const formatSetItem = screen.getByText("Arizona Highway Project (Civil)");
      await user.click(formatSetItem);

      expect(mockOnFormatSetChange).toHaveBeenCalledWith(
        mockFormatSets[0],
        "TestFormatSet1"
      );
    });

    it("should highlight selected format set", () => {
      const { container } = render(
        <FormatSetSelector
          formatSets={mockFormatSets}
          selectedFormatSetKey="TestFormatSet2"
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      const listItems = container.querySelectorAll(".quantityFormat--formatSetSelector-listItem");
      const selectedItem = listItems[1]; // TestFormatSet2 is second item

      expect(selectedItem?.getAttribute("data-iui-active")).toBe("true");

    });

    it("should handle format sets with index-based keys when name is missing", () => {
      const formatSetsWithoutNames = [
        { label: "Format Set 1" } as FormatSet,
        { label: "Format Set 2" } as FormatSet,
      ];

      render(
        <FormatSetSelector
          formatSets={formatSetsWithoutNames}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      expect(screen.getByText("Format Set 1")).toBeTruthy();
      expect(screen.getByText("Format Set 2")).toBeTruthy();
    });
  });

  describe("Empty States", () => {
    it("should show no format sets available message when empty array", () => {
      render(
        <FormatSetSelector
          formatSets={[]}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      expect(screen.getByText("No format sets available")).toBeTruthy();
    });

    it("should show no format sets available message when undefined", () => {
      render(
        <FormatSetSelector
          formatSets={[]}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      expect(screen.getByText("No format sets available")).toBeTruthy();
    });
  });

  describe("Props and State Management", () => {
    it("should update when formatSets prop changes", () => {
      const { rerender } = render(
        <FormatSetSelector
          formatSets={[mockFormatSets[0]]}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      expect(screen.getByText("Arizona Highway Project (Civil)")).toBeTruthy();
      expect(screen.queryByText("My personal format set")).toBeNull();

      rerender(
        <FormatSetSelector
          formatSets={mockFormatSets}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      expect(screen.getByText("Arizona Highway Project (Civil)")).toBeTruthy();
      expect(screen.getByText("My personal format set")).toBeTruthy();
    });

    it("should maintain search state during prop updates", async () => {
      const { rerender } = render(
        <FormatSetSelector
          formatSets={mockFormatSets}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      const searchInput = screen.getByPlaceholderText("Search format sets...");
      await user.type(searchInput, "Arizona");

      // Rerender with same props
      rerender(
        <FormatSetSelector
          formatSets={mockFormatSets}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      expect(searchInput.getAttribute("value")).toBe("Arizona");
      expect(screen.getByText("Arizona Highway Project (Civil)")).toBeTruthy();
      expect(screen.queryByText("My personal format set")).toBeNull();
    });
  });

  describe("Accessibility", () => {
    it("should handle keyboard interactions", async () => {
      render(
        <FormatSetSelector
          formatSets={mockFormatSets}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      const firstItem = screen.getByText("Arizona Highway Project (Civil)");

      // Test Enter key
      await user.click(firstItem);
      expect(mockOnFormatSetChange).toHaveBeenCalledWith(
        mockFormatSets[0],
        "TestFormatSet1"
      );
    });
  });

  describe("Performance", () => {
    it("should handle large format set lists efficiently", () => {
      const largeFormatSetList = Array.from({ length: 100 }, (_, index) => ({
        name: `FormatSet${index}`,
        label: `Format Set ${index}`,
      })) as FormatSet[];

      render(
        <FormatSetSelector
          formatSets={largeFormatSetList}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      expect(screen.getByText("Format Set 0")).toBeTruthy();
      expect(screen.getByText("Format Set 99")).toBeTruthy();
    });

    it("should efficiently filter large lists", async () => {
      const largeFormatSetList = Array.from({ length: 100 }, (_, index) => ({
        name: `FormatSet${index}`,
        label: index < 10 ? `Special Format Set ${index}` : `Format Set ${index}`,
      })) as FormatSet[];

      render(
        <FormatSetSelector
          formatSets={largeFormatSetList}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      const searchInput = screen.getByPlaceholderText("Search format sets...");
      await user.type(searchInput, "Special");

      expect(screen.getByText("Special Format Set 0")).toBeTruthy();
      expect(screen.queryByText("Format Set 50")).toBeNull();
    });
  });
});
