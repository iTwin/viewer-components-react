sep=;
Release Tag;API Item
public;areAllModelsVisible(models: string[], viewport: Viewport): boolean
public;BaseFilterableTreeProps 
public;BaseTreeProps 
public;CategoriesTreeComponent:
public;CategoriesTreeComponentProps 
public;CategoriesTreeHeaderButtonProps 
public;CategoryInfo
public;CategoryTree(props: CategoryTreeProps): JSX.Element
public;CategoryTreeProps 
public;CategoryVisibilityHandler 
public;CategoryVisibilityHandlerParams
public;ClassGroupingOption
public;ContextMenuItemProps
public;createVisibilityTreeNodeRenderer({ levelOffset, disableRootNodeCollapse, descriptionEnabled, iconsEnabled }: VisibilityTreeNodeRendererProps): (treeNodeProps: TreeNodeRendererProps_2) => JSX.Element
public;createVisibilityTreeRenderer({ nodeRendererProps, ...restProps }: VisibilityTreeRendererProps): (treeProps: TreeRendererProps_2) => JSX.Element
public;DefaultLabelRenderer({ label, context }: DefaultLabelRendererProps): JSX.Element
public;DefaultLabelRendererProps
alpha;ExternalSourcesTree(props: ExternalSourcesTreeProps): JSX.Element
alpha;ExternalSourcesTreeComponent:
alpha;ExternalSourcesTreeComponentProps = Omit
alpha;ExternalSourcesTreeProps = BaseTreeProps
public;hideAllCategories(categories: string[], viewport: Viewport): Promise
public;hideAllModels(models: string[], viewport: Viewport): Promise
public;IModelContentTree: (props: IModelContentTreeProps) => JSX.Element
public;IModelContentTreeComponent:
public;IModelContentTreeComponentProps = Omit
public;IModelContentTreeProps = BaseTreeProps
public;invertAllCategories(categories: CategoryInfo[], viewport: Viewport): Promise
public;invertAllModels(models: string[], viewport: Viewport): Promise
public;IVisibilityHandler 
public;LabelRendererContext
public;ModelInfo
public;ModelsTree(props: ModelsTreeProps): JSX.Element
public;ModelsTreeComponent:
public;ModelsTreeHeaderButtonProps 
public;ModelsTreeHierarchyConfiguration
public;ModelsTreeNodeType
public;ModelsTreeProps 
public;ModelsTreeSelectionPredicate = (key: NodeKey, type: ModelsTreeNodeType) => boolean
public;ModelsVisibilityHandler 
public;ModelsVisibilityHandlerProps
public;ModelTreeComponentProps 
internal;RULESET_CATEGORIES: Ruleset
internal;RULESET_EXTERNAL_SOURCES: Ruleset
internal;RULESET_IMODEL_CONTENT: Ruleset
public;SelectableTree(props: SelectableTreeProps): JSX.Element | null
public;SelectableTreeProps
public;showAllCategories(categories: string[], viewport: Viewport): Promise
public;showAllModels(models: string[], viewport: Viewport): Promise
internal;SubjectModelIdsCache
public;toggleModels(models: string[], enable: boolean, viewport: Viewport): Promise
internal;TREE_NODE_LABEL_RENDERER = "visibility-tree-node-label"
public;TreeContextMenuItem({ id, children, title, onSelect }: PropsWithChildren
public;TreeContextMenuItemProps
public;TreeContextMenuProps
public;TreeDefinition
internal;TreeNodeLabelRenderer 
public;TreeNodeLabelRendererProps
internal;TreeNodeRendererContextProvider({ nodeLabelRenderer, node, children }: TreeNodeRendererContextProviderProps): JSX.Element
internal;TreeNodeRendererContextProviderProps 
public;TreeNodeRendererProps
public;TreeRenderer({ contextMenuItems, nodeRenderer, nodeLabelRenderer, density, ...restProps }: TreeRendererProps): JSX.Element
public;TreeRendererBaseProps 
public;TreeRendererProps = TreeRendererProps_2 & TreeRendererBaseProps
public;TreeWidget
public;TreeWidgetId = "tree-widget-react:trees"
public;TreeWidgetOptions
public;TreeWidgetUiItemsProvider 
internal;useCategories(viewManager: ViewManager, imodel: IModelConnection, view?: Viewport): CategoryInfo[]
internal;useContextMenu({ contextMenuItems }: TreeContextMenuProps):
public;useTreeTransientState
public;useVisibilityTreeFiltering(nodeLoader: AbstractTreeNodeLoaderWithProvider
public;VisibilityChangeListener = (nodeIds?: string[], visibilityStatus?: Map
public;VisibilityStatus
public;VisibilityTreeEventHandler 
public;VisibilityTreeEventHandlerParams 
public;VisibilityTreeFilterInfo
public;VisibilityTreeNodeCheckbox(props: NodeCheckboxRenderProps): JSX.Element
public;VisibilityTreeNodeRendererProps
public;VisibilityTreeNoFilteredData(props: VisibilityTreeNoFilteredDataProps): JSX.Element
public;VisibilityTreeNoFilteredDataProps
public;VisibilityTreeRendererProps 
public;VisibilityTreeSelectionPredicate = (node: TreeNodeItem) => boolean