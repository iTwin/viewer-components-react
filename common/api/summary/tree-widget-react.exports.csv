sep=;
Release Tag;API Item
public;areAllModelsVisible(models: string[], viewport: Viewport): boolean
public;CategoriesTreeComponent:
public;CategoriesTreeComponentProps 
public;CategoriesTreeHeaderButtonProps 
public;CategoryInfo
public;CategoryTree(props: CategoryTreeProps): JSX.Element
public;CategoryTreeProps
public;CategoryVisibilityHandler 
public;CategoryVisibilityHandlerParams
public;ClassGroupingOption
public;createVisibilityTreeNodeRenderer: (iconsEnabled: boolean, descriptionEnabled: boolean) => (props: TreeNodeRendererProps) => JSX.Element
public;hideAllCategories(categories: string[], viewport: Viewport): Promise
public;hideAllModels(models: string[], viewport: Viewport): Promise
public;IModelContentTree: (props: IModelContentTreeProps) => JSX.Element
public;IModelContentTreeComponent:
public;IModelContentTreeComponentProps = Omit
public;IModelContentTreeProps 
public;invertAllCategories(categories: CategoryInfo[], viewport: Viewport): Promise
public;invertAllModels(models: string[], viewport: Viewport): Promise
public;IVisibilityHandler 
public;ModelInfo
public;ModelsTree(props: ModelsTreeProps): JSX.Element
public;ModelsTreeComponent:
public;ModelsTreeHeaderButtonProps 
public;ModelsTreeNodeType
public;ModelsTreeProps
public;ModelsTreeSelectionPredicate = (key: NodeKey, type: ModelsTreeNodeType) => boolean
public;ModelsVisibilityHandler 
public;ModelsVisibilityHandlerProps
public;ModelTreeComponentProps 
internal;RULESET_CATEGORIES: Ruleset
internal;RULESET_IMODEL_CONTENT: Ruleset
internal;RULESET_MODELS: Ruleset
internal;RULESET_MODELS_GROUPED_BY_CLASS: Ruleset
public;showAllCategories(categories: string[], viewport: Viewport): Promise
public;showAllModels(models: string[], viewport: Viewport): Promise
internal;SubjectModelIdsCache
public;toggleModels(models: string[], enable: boolean, viewport: Viewport): Promise
public;TreeDefinition
public;TreeWidget
public;TreeWidgetComponent(props: TreeWidgetComponentProps): JSX.Element | null
public;TreeWidgetComponentProps
public;TreeWidgetId = "tree-widget-react:trees"
public;TreeWidgetOptions
public;TreeWidgetUiItemsProvider 
internal;useCategories(viewManager: ViewManager, imodel: IModelConnection, view?: Viewport): CategoryInfo[]
public;useVisibilityTreeFiltering: (nodeLoader: AbstractTreeNodeLoaderWithProvider
public;useVisibilityTreeRenderer: (iconsEnabled: boolean, descriptionsEnabled: boolean) => (props: TreeRendererProps) => JSX.Element
public;VisibilityChangeListener = (nodeIds?: string[], visibilityStatus?: Map
public;VisibilityStatus
public;VisibilityTreeEventHandler 
public;VisibilityTreeEventHandlerParams 
public;VisibilityTreeFilterInfo
public;visibilityTreeNodeCheckboxRenderer: (props: NodeCheckboxRenderProps) => JSX.Element
public;VisibilityTreeNoFilteredData(props: VisibilityTreeNoFilteredDataProps): JSX.Element
public;VisibilityTreeNoFilteredDataProps
public;VisibilityTreeSelectionPredicate = (node: TreeNodeItem) => boolean