sep=;
Release Tag;API Item
public;areAllModelsVisible(models: string[], viewport: Viewport): boolean
public;BaseFilterableTreeProps 
public;BaseTreeProps
internal;CachingElementIdsContainer
public;CategoriesTreeComponent:
public;CategoriesTreeComponentProps 
public;CategoriesTreeHeaderButtonProps 
public;CategoryInfo
public;CategoryTree(props: CategoryTreeProps): JSX.Element
public;CategoryTreeProps 
public;CategoryVisibilityHandler 
public;CategoryVisibilityHandlerParams
public;ClassGroupingOption
internal;createRuleset(props: CreateRulesetProps): Ruleset
internal;CreateRulesetProps = Omit
internal;createSearchRuleset(props: CreateSearchRulesetProps): Ruleset
internal;CreateSearchRulesetProps = Omit
public;createVisibilityTreeNodeRenderer({ levelOffset, disableRootNodeCollapse, descriptionEnabled, iconsEnabled }: VisibilityTreeNodeRendererProps): (treeNodeProps: TreeNodeRendererProps) => JSX.Element
public;createVisibilityTreeRenderer({ nodeRendererProps }: VisibilityTreeRendererProps): (props: TreeRendererProps) => JSX.Element
internal;customizeModelsTreeNodeItem(item: Partial
alpha;ExternalSourcesTree(props: ExternalSourcesTreeProps): JSX.Element
alpha;ExternalSourcesTreeComponent:
alpha;ExternalSourcesTreeProps = BaseTreeProps
public;hideAllCategories(categories: string[], viewport: Viewport): Promise
public;hideAllModels(models: string[], viewport: Viewport): Promise
public;IModelContentTree: (props: IModelContentTreeProps) => JSX.Element
public;IModelContentTreeComponent:
public;IModelContentTreeComponentProps = Omit
public;IModelContentTreeProps = BaseTreeProps
public;invertAllCategories(categories: CategoryInfo[], viewport: Viewport): Promise
public;invertAllModels(models: string[], viewport: Viewport): Promise
public;IVisibilityHandler 
public;ModelInfo
public;ModelsTree(props: ModelsTreeProps): JSX.Element
public;ModelsTreeComponent:
public;ModelsTreeHeaderButtonProps 
public;ModelsTreeHierarchyConfiguration
public;ModelsTreeNodeType
public;ModelsTreeProps 
public;ModelsTreeSelectionPredicate = (key: NodeKey, type: ModelsTreeNodeType) => boolean
public;ModelsVisibilityHandler 
public;ModelsVisibilityHandlerProps
public;ModelTreeComponentProps 
internal;RULESET_CATEGORIES: Ruleset
internal;RULESET_EXTERNAL_SOURCES: Ruleset
internal;RULESET_IMODEL_CONTENT: Ruleset
public;SelectableTree(props: SelectableTreeProps): JSX.Element | null
public;SelectableTreeProps
public;showAllCategories(categories: string[], viewport: Viewport): Promise
public;showAllModels(models: string[], viewport: Viewport): Promise
internal;SubjectModelIdsCache
public;toggleModels(models: string[], enable: boolean, viewport: Viewport): Promise
public;TreeDefinition
public;TreeWidget
public;TreeWidgetId = "tree-widget-react:trees"
public;TreeWidgetOptions
public;TreeWidgetUiItemsProvider 
internal;useCategories(viewManager: ViewManager, imodel: IModelConnection, view?: Viewport): CategoryInfo[]
public;useTreeTransientState
public;useVisibilityTreeFiltering(nodeLoader: AbstractTreeNodeLoaderWithProvider
public;VisibilityChangeListener = (nodeIds?: string[], visibilityStatus?: Map
public;VisibilityStatus
public;VisibilityTreeEventHandler 
public;VisibilityTreeEventHandlerParams 
public;VisibilityTreeFilterInfo
public;VisibilityTreeNodeCheckbox(props: NodeCheckboxRenderProps): JSX.Element
public;VisibilityTreeNodeRendererProps
public;VisibilityTreeNoFilteredData(props: VisibilityTreeNoFilteredDataProps): JSX.Element
public;VisibilityTreeNoFilteredDataProps
public;VisibilityTreeRendererProps
public;VisibilityTreeSelectionPredicate = (node: TreeNodeItem) => boolean