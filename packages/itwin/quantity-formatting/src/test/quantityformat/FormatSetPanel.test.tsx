/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/

import { beforeEach, describe, expect, it, vi } from "vitest";
import { render, screen, waitFor } from "@testing-library/react";
import { userEvent } from "@testing-library/user-event";
import { FormatSetPanel } from "../../components/quantityformat/FormatSetPanel.js";

import type { FormatSet } from "@itwin/ecschema-metadata";
// Mock the useTranslation hook
vi.mock("../../useTranslation.js", () => ({
  useTranslation: () => ({
    translate: (key: string) => {
      const translations: Record<string, string> = {
        "QuantityFormat:labels.formatSetDetails": "Format Set Details",
        "QuantityFormat:labels.label": "Label",
        "QuantityFormat:labels.unitSystem": "Unit System",
        "QuantityFormat:labels.description": "Description",
        "QuantityFormat:labels.formatSetDisplayLabel": "Format set display label",
        "QuantityFormat:labels.selectUnitSystem": "Select unit system",
        "QuantityFormat:labels.formatSetDescription": "Format set description",
        "QuantityFormat:labels.unitSystemTooltip": "Test tooltip",
        "QuantityFormat:labels.unitSystemMetric": "Metric",
        "QuantityFormat:labels.unitSystemImperial": "Imperial",
        "QuantityFormat:labels.unitSystemUsCustomary": "U.S. Customary",
        "QuantityFormat:labels.unitSystemUsSurvey": "U.S. Survey",
      };
      return translations[key] || key;
    },
  }),
}));

describe("FormatSetPanel", () => {
  const mockOnFormatSetChange = vi.fn();
  const user = userEvent.setup();

  // Mock format set data
  const mockFormatSet = {
    name: "TestFormatSet1",
    label: "Test Format Set 1",
    unitSystem: "metric",
    description: "A test format set",
  } as FormatSet;

  const mockFormatSet2 = {
    name: "AutogeneratedFormatSet",
    label: "Auto-generated Format Set",
    unitSystem: "metric",
    description: "Auto-generated Format Set from iModel data",
  } as FormatSet;

  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe("Format Set Display", () => {
    it("should render format set details when format set is provided", () => {
      render(<FormatSetPanel formatSet={mockFormatSet} />);

      expect(screen.getByText("Format Set Details")).toBeTruthy();
      expect(screen.getByDisplayValue("Test Format Set 1")).toBeTruthy();
      expect(screen.getByDisplayValue("Metric")).toBeTruthy();
      expect(screen.getByDisplayValue("A test format set")).toBeTruthy();
    });

    it("should render with correct CSS classes", () => {
      const { container } = render(<FormatSetPanel formatSet={mockFormatSet} />);

      expect(container.querySelector(".quantityFormat--formatSetPanel-container")).toBeTruthy();
      expect(container.querySelector(".quantityFormat--formatSetPanel-inputRow")).toBeTruthy();
      expect(container.querySelector(".quantityFormat--formatSetPanel-inputRow-descr")).toBeTruthy();
    });
  });

  describe("Form Labels and IDs", () => {
    it("should have proper form labels and IDs", () => {
      render(<FormatSetPanel formatSet={mockFormatSet} />);

      const labelInput = screen.getByLabelText("Label");
      const unitSystemSelect = screen.queryAllByLabelText("Unit System")[1] as HTMLInputElement;
      const descriptionTextarea = screen.getByLabelText("Description");

      expect(labelInput).toBeTruthy();
      expect(unitSystemSelect).toBeTruthy();
      expect(descriptionTextarea).toBeTruthy();

      expect(labelInput.getAttribute("id")).toBeTruthy();
      expect(unitSystemSelect.getAttribute("id")).toBeTruthy();
      expect(descriptionTextarea.getAttribute("id")).toBeTruthy();
    });

    it("should have correct placeholders", () => {
      render(<FormatSetPanel formatSet={mockFormatSet} />);

      expect(screen.getByPlaceholderText("Format set display label")).toBeTruthy();
      expect(screen.getByPlaceholderText("Select unit system")).toBeTruthy();
      expect(screen.getByPlaceholderText("Format set description")).toBeTruthy();
    });
  });

  describe("Editable Mode", () => {
    it("should enable inputs when editable is true", () => {
      render(<FormatSetPanel formatSet={mockFormatSet} editable={true} onFormatSetChange={mockOnFormatSetChange} />);

      const labelInput = screen.getByLabelText("Label") as HTMLInputElement;
      // Weird behavior with using inputProps directly on Select component
      const unitSystemSelect = screen.queryAllByLabelText("Unit System")[1] as HTMLInputElement;
      const descriptionTextarea = screen.getByLabelText("Description") as HTMLTextAreaElement;

      expect(labelInput.disabled).toBe(false);
      expect(unitSystemSelect.disabled).toBe(false);
      expect(descriptionTextarea.disabled).toBe(false);
    });

    it("should disable inputs when editable is false", () => {
      render(<FormatSetPanel formatSet={mockFormatSet} editable={false} />);

      const labelInput = screen.getByLabelText("Label") as HTMLInputElement;
      const unitSystemSelect = screen.queryAllByLabelText("Unit System")[1] as HTMLInputElement;
      const descriptionTextarea = screen.getByLabelText("Description") as HTMLTextAreaElement;
      expect(labelInput.disabled).toBe(true);
      expect(unitSystemSelect.disabled).toBe(true);
      expect(descriptionTextarea.disabled).toBe(true);
    });

    it("should call onFormatSetChange when label is changed in editable mode", async () => {
      render(
        <FormatSetPanel
          formatSet={mockFormatSet}
          editable={true}
          onFormatSetChange={mockOnFormatSetChange}
        />
      );

      const labelInput = screen.getByLabelText("Label");
      await user.clear(labelInput);
      await user.type(labelInput, "New Label");

      await waitFor(() => {
        expect(mockOnFormatSetChange).toHaveBeenCalledWith({
          ...mockFormatSet,
          label: "New Label",
        });
      });
    });
  });

  describe("Unit System Selection", () => { // TODO: Re-enable once format set supports UnitSystem.
    it("should display unit system select component", () => {
      render(<FormatSetPanel formatSet={mockFormatSet} editable={true} onFormatSetChange={mockOnFormatSetChange} />);

      const unitSystemSelect = screen.getByText("Unit System");
      expect(unitSystemSelect).toBeTruthy();
    });

    it("should show metric as default value", () => {
      render(<FormatSetPanel formatSet={mockFormatSet} editable={true} onFormatSetChange={mockOnFormatSetChange} />);

      expect(screen.getByDisplayValue("Metric")).toBeTruthy();
    });
  });

  describe("Description Handling", () => {
    it("should update description when text is changed", async () => {
      render(<FormatSetPanel formatSet={mockFormatSet} editable={true} onFormatSetChange={mockOnFormatSetChange} />);

      const descriptionTextarea = screen.getByLabelText("Description") as HTMLTextAreaElement;
      await user.clear(descriptionTextarea);
      await user.type(descriptionTextarea, "New description");

      expect(descriptionTextarea.value).toBe("New description");
    });

    it("should have correct number of rows for textarea", () => {
      render(<FormatSetPanel formatSet={mockFormatSet} />);

      const descriptionTextarea = screen.getByLabelText("Description");
      expect(descriptionTextarea.getAttribute("rows")).toBe("4");
    });
  });

  describe("Props Updates", () => {
    it("should update when formatSet prop changes", () => {
      const { rerender } = render(<FormatSetPanel formatSet={mockFormatSet} />);

      expect(screen.getByDisplayValue("Test Format Set 1")).toBeTruthy();

      rerender(<FormatSetPanel formatSet={mockFormatSet2} />);

      expect(screen.getByDisplayValue("Auto-generated Format Set")).toBeTruthy();
    });
  });

  describe("CSS Classes", () => {
    it("should apply correct CSS classes to inputs", () => {
      const { container } = render(<FormatSetPanel formatSet={mockFormatSet} />);

      const inputs = container.querySelectorAll(".quantityFormat--formatSetPanel-input");
      expect(inputs.length).toBeGreaterThan(0);
    });

    it("should apply correct CSS classes to layout containers", () => {
      const { container } = render(<FormatSetPanel formatSet={mockFormatSet} />);

      expect(container.querySelector(".quantityFormat--formatSetPanel-container")).toBeTruthy();
      expect(container.querySelector(".quantityFormat--formatSetPanel-inputRow")).toBeTruthy();
      expect(container.querySelector(".quantityFormat--formatSetPanel-inputRow-descr")).toBeTruthy();
    });
  });
});
