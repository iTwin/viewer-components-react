/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/

import React from "react";
import { Flex, LabeledInput, LabeledSelect, Text, Textarea } from "@itwin/itwinui-react";

import type { FormatSet } from "@itwin/ecschema-metadata";

/**
 * Props for the FormatSetPanel component
 */
interface FormatSetPanelProps {
  formatSet?: FormatSet;
  editable?: boolean;
  onFormatSetChange?: (formatSet: FormatSet) => void;
}

/**
 * A React component that displays and allows editing of format set properties.
 */
export const FormatSetPanel: React.FC<FormatSetPanelProps> = ({
  formatSet,
  editable = false,
  onFormatSetChange,
}) => {
  const [name, setName] = React.useState(formatSet?.name || "");
  const [label, setLabel] = React.useState(formatSet?.label || "");
  const [description, setDescription] = React.useState("");
  const [unitSystem, setUnitSystem] = React.useState<string>("metric");

  // Unit system options
  const unitSystemOptions = [
    { value: "metric", label: "Metric" },
    { value: "imperial", label: "Imperial" },
    { value: "usCustomary", label: "US Customary" },
    { value: "usSurvey", label: "US Survey" },
  ];

  // Hardcoded example descriptions based on format set name
  const getExampleDescription = React.useCallback((formatSetName: string) => {
    switch (formatSetName) {
      case "TestFormatSet1":
        return "Arizona Highway Project (Civil) - This format set contains all the formatting standards used by civil engineers on the Arizona Highway Project. Includes units for measurements, coordinates, and construction materials.";
      case "TestFormatSet2":
        return "Arizona Highway Project (Project Manager) - Format set tailored for project management views with emphasis on cost, schedule, and resource tracking. Uses simplified units suitable for executive reporting.";
      case "TestFormatSet3":
        return "My personal format set - Custom formatting preferences for individual use. Combines metric and imperial units based on personal workflow requirements.";
      case "AutogeneratedFormatSet":
        return "Auto-generated Format Set from iModel - This format set was automatically created based on the KindOfQuantity definitions found in the opened iModel's schemas. It provides formatting for all quantity types used in the model.";
      default:
        return "Standard format set containing quantity formatting definitions for various measurement types including length, area, volume, and angles.";
    }
  }, []);

  // Update local state when formatSet prop changes
  React.useEffect(() => {
    setName(formatSet?.name || "");
    setLabel(formatSet?.label || "");
    setDescription(formatSet?.name ? getExampleDescription(formatSet.name) : "");
    setUnitSystem("metric"); // Default to metric, could be extended to read from formatSet
  }, [formatSet, getExampleDescription]);

  const handleNameChange = React.useCallback(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      const newName = event.target.value;
      setName(newName);

      if (editable && formatSet && onFormatSetChange) {
        const updatedFormatSet: FormatSet = {
          ...formatSet,
          name: newName,
        };
        onFormatSetChange(updatedFormatSet);
      }
    },
    [editable, formatSet, onFormatSetChange]
  );

  const handleLabelChange = React.useCallback(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      const newLabel = event.target.value;
      setLabel(newLabel);

      if (editable && formatSet && onFormatSetChange) {
        const updatedFormatSet: FormatSet = {
          ...formatSet,
          label: newLabel,
        };
        onFormatSetChange(updatedFormatSet);
      }
    },
    [editable, formatSet, onFormatSetChange]
  );

  const handleDescriptionChange = React.useCallback(
    (event: React.ChangeEvent<HTMLTextAreaElement>) => {
      const newDescription = event.target.value;
      setDescription(newDescription);
      // Note: FormatSet doesn't have description property yet, so we don't update the formatSet
    },
    []
  );

  const handleUnitSystemChange = React.useCallback(
    (value: string) => {
      setUnitSystem(value);
      // Note: FormatSet doesn't have unitSystem property yet, so we don't update the formatSet
    },
    []
  );

  if (!formatSet) {
    return (
      <Flex flexDirection="column" justifyContent="center" alignItems="center" style={{ height: "100%" }}>
        <Text variant="leading" isMuted>
          Select a format set to view details
        </Text>
      </Flex>
    );
  }

  return (
    <Flex flexDirection="column" gap="m" style={{ padding: "var(--iui-size-m)" }}>
      <Text variant="leading">Format Set Details</Text>

      <LabeledInput
        label="Name"
        value={name}
        onChange={handleNameChange}
        disabled={!editable}
        placeholder="Format set name"
        className="format-set-panel-input"
      />

      <LabeledInput
        label="Label"
        value={label}
        onChange={handleLabelChange}
        disabled={!editable}
        placeholder="Format set display label"
        className="format-set-panel-input"
      />

      <Flex flexDirection="column" gap="xs">
        <Text variant="body">Description</Text>
        <Textarea
          value={description}
          onChange={handleDescriptionChange}
          disabled={!editable}
          placeholder="Format set description"
          className="format-set-panel-input"
          rows={4}
        />
      </Flex>

      <LabeledSelect
        label="Unit System"
        value={unitSystem}
        onChange={handleUnitSystemChange}
        options={unitSystemOptions}
        disabled={!editable}
        className="format-set-panel-input"
        placeholder="Select unit system"
      />

      <Flex flexDirection="column" gap="xs">
        <Text variant="subheading">Formats</Text>
        <Text variant="body" isMuted>
          {Object.keys(formatSet.formats).length} format(s) defined
        </Text>
      </Flex>
    </Flex>
  );
};
