/*---------------------------------------------------------------------------------------------
* Copyright (c) Bentley Systems, Incorporated. All rights reserved.
* See LICENSE.md in the project root for license terms and full copyright notice.
*--------------------------------------------------------------------------------------------*/
/* eslint-disable */
//@ts-nocheck
// tslint:disable
/**
 * Reporting
 * Reporting is a resource for aggregating iTwin data to build custom dashboards and integrate iTwin data with your business applications.    - Create digitial twin based reports which can be consumed through business intelligence applications such as Power BI.  - Leverage the OData feed Data Access to generate reports by combining data from multiple data streams in the digital twin.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from 'url';
import isomorphicFetch from 'cross-fetch';
import { Configuration } from './configuration';

const BASE_PATH = 'https://api.bentley.com/insights/reporting'.replace(
  /\/+$/,
  '',
);
export const REPORTING_BASE_PATH = BASE_PATH;

/**
 *
 */
const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|',
};

/**
 *
 * @interface FetchAPI
 */
interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @interface FetchArgs
 */
interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @class BaseAPI
 */
class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = isomorphicFetch,
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
  name: 'RequiredError';
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 * Defines a CalculatedProperty or 'column' for a Group. It is calculated for each element returned by the Group's query.
 * @export
 * @interface CalculatedProperty
 */
export interface CalculatedProperty {
  /**
   * The CalculatedProperty Id.
   * @type {string}
   * @memberof CalculatedProperty
   */
  id?: string;
  /**
   * Name of the Property (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof CalculatedProperty
   */
  propertyName?: string;
  /**
   * The type of the CalculatedProperty. One of 'Area', 'Length', 'Volume', 'BoundingBoxLongestEdgeLength', 'BoundingBoxIntermediateEdgeLength', 'BoundingBoxShortestEdgeLength', 'BoundingBoxDiagonalLength', 'BoundingBoxLongestFaceDiagonalLength', 'BoundingBoxIntermediateFaceDiagonalLength', 'BoundingBoxShortestFaceDiagonalLength'.
   * @type {string}
   * @memberof CalculatedProperty
   */
  type?: string;
  /**
   * The quantity type of the CalculatedProperty. One of 'Area', 'Distance', 'Force', 'Mass', 'Monetary', 'Time', 'Volume, or 'Undefined'.
   * @type {string}
   * @memberof CalculatedProperty
   */
  quantityType?: string;
  /**
   *
   * @type {CalculatedPropertyLinks}
   * @memberof CalculatedProperty
   */
  _links?: CalculatedPropertyLinks;
}
/**
 * List of CalculatedProperties.
 * @export
 * @interface CalculatedPropertyCollection
 */
export interface CalculatedPropertyCollection {
  /**
   * List of CalculatedProperties.
   * @type {Array<CalculatedProperty>}
   * @memberof CalculatedPropertyCollection
   */
  properties?: Array<CalculatedProperty>;
  /**
   *
   * @type {PagedResponseLinks}
   * @memberof CalculatedPropertyCollection
   */
  _links?: PagedResponseLinks;
}
/**
 * Properties of the CalculatedProperty to be created.
 * @export
 * @interface CalculatedPropertyCreate
 */
export interface CalculatedPropertyCreate {
  /**
   * Name of the CalculatedProperty.
   * @type {string}
   * @memberof CalculatedPropertyCreate
   */
  propertyName: string;
  /**
   * The type of the CalculatedProperty. One of 'Area', 'Length', 'Volume', 'BoundingBoxLongestEdgeLength', 'BoundingBoxIntermediateEdgeLength', 'BoundingBoxShortestEdgeLength', 'BoundingBoxDiagonalLength', 'BoundingBoxLongestFaceDiagonalLength', 'BoundingBoxIntermediateFaceDiagonalLength', 'BoundingBoxShortestFaceDiagonalLength'.
   * @type {string}
   * @memberof CalculatedPropertyCreate
   */
  type: string;
}
/**
 *
 * @export
 * @interface CalculatedPropertyLinks
 */
export interface CalculatedPropertyLinks {
  /**
   *
   * @type {Link}
   * @memberof CalculatedPropertyLinks
   */
  imodel?: Link;
  /**
   *
   * @type {Link}
   * @memberof CalculatedPropertyLinks
   */
  mapping?: Link;
  /**
   *
   * @type {Link}
   * @memberof CalculatedPropertyLinks
   */
  group?: Link;
}
/**
 * Container for a CalculatedProperty object.
 * @export
 * @interface CalculatedPropertySingle
 */
export interface CalculatedPropertySingle {
  /**
   *
   * @type {CalculatedProperty}
   * @memberof CalculatedPropertySingle
   */
  property?: CalculatedProperty;
}
/**
 * Properties of the CalculatedProperty to be updated.
 * @export
 * @interface CalculatedPropertyUpdate
 */
export interface CalculatedPropertyUpdate {
  /**
   * Name of the CalculatedProperty.
   * @type {string}
   * @memberof CalculatedPropertyUpdate
   */
  propertyName?: string;
  /**
   * The type of the CalculatedProperty. One of 'Area', 'Length', 'Volume', 'BoundingBoxLongestEdgeLength', 'BoundingBoxIntermediateEdgeLength', 'BoundingBoxShortestEdgeLength', 'BoundingBoxDiagonalLength', 'BoundingBoxLongestFaceDiagonalLength', 'BoundingBoxIntermediateFaceDiagonalLength', 'BoundingBoxShortestFaceDiagonalLength'.
   * @type {string}
   * @memberof CalculatedPropertyUpdate
   */
  type?: string;
}
/**
 * Defines a CustomCalculation or 'column' for a Group. It is calculated using the given formula for each element returned by the Group's query.
 * @export
 * @interface CustomCalculation
 */
export interface CustomCalculation {
  /**
   * The CustomCalculation Id.
   * @type {string}
   * @memberof CustomCalculation
   */
  id?: string;
  /**
   * Name of the Property (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof CustomCalculation
   */
  propertyName?: string;
  /**
   * A mathematical formula which will be evaluated for each element returned by the Group's query.
   * @type {string}
   * @memberof CustomCalculation
   */
  formula?: string;
  /**
   * The quantity type of the CustomCalculation. One of 'Area', 'Distance', 'Force', 'Mass', 'Monetary', 'Time', 'Volume, or 'Undefined'.
   * @type {string}
   * @memberof CustomCalculation
   */
  quantityType?: string;
  /**
   *
   * @type {CalculatedPropertyLinks}
   * @memberof CustomCalculation
   */
  _links?: CalculatedPropertyLinks;
}
/**
 * List of CustomCalculations.
 * @export
 * @interface CustomCalculationCollection
 */
export interface CustomCalculationCollection {
  /**
   * List of CustomCalculations.
   * @type {Array<CustomCalculation>}
   * @memberof CustomCalculationCollection
   */
  customCalculations?: Array<CustomCalculation>;
  /**
   *
   * @type {PagedResponseLinks}
   * @memberof CustomCalculationCollection
   */
  _links?: PagedResponseLinks;
}
/**
 * Properties of the CustomCalculation to be created.
 * @export
 * @interface CustomCalculationCreate
 */
export interface CustomCalculationCreate {
  /**
   * Name of the Property (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof CustomCalculationCreate
   */
  propertyName: string;
  /**
   * A mathematical formula which will be evaluated for each element returned by the Group's query.
   * @type {string}
   * @memberof CustomCalculationCreate
   */
  formula: string;
  /**
   * The quantity type of the CustomCalculation. One of 'Area', 'Distance', 'Force', 'Mass', 'Monetary', 'Time', 'Volume, or 'Undefined'. Default is 'Undefined'.
   * @type {string}
   * @memberof CustomCalculationCreate
   */
  quantityType?: string;
}
/**
 * Container for a CustomCalculation object.
 * @export
 * @interface CustomCalculationSingle
 */
export interface CustomCalculationSingle {
  /**
   *
   * @type {CustomCalculation}
   * @memberof CustomCalculationSingle
   */
  customCalculation?: CustomCalculation;
}
/**
 * Properties of the CustomCalculation to be updated.
 * @export
 * @interface CustomCalculationUpdate
 */
export interface CustomCalculationUpdate {
  /**
   * Name of the Property (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof CustomCalculationUpdate
   */
  propertyName?: string;
  /**
   * A mathematical formula which will be evaluated for each element returned by the Group's query.
   * @type {string}
   * @memberof CustomCalculationUpdate
   */
  formula?: string;
  /**
   * The quantity type of the CustomCalculation. One of 'Area', 'Distance', 'Force', 'Mass', 'Monetary', 'Time', 'Volume, or 'Undefined'.
   * @type {string}
   * @memberof CustomCalculationUpdate
   */
  quantityType?: string;
}
/**
 * Defines a target ECProperty for a Group. This is used to determine what properties will be read from the query response of a Group.
 * @export
 * @interface ECProperty
 */
export interface ECProperty {
  /**
   * The target ECSchema.
   * @type {string}
   * @memberof ECProperty
   */
  ecSchemaName?: string;
  /**
   * The target ECClass.
   * @type {string}
   * @memberof ECProperty
   */
  ecClassName?: string;
  /**
   * The target ECProperty.
   * @type {string}
   * @memberof ECProperty
   */
  ecPropertyName?: string;
  /**
   * The type of the target ECProperty.
   * @type {string}
   * @memberof ECProperty
   */
  ecPropertyType?: string;
}
/**
 * Contains error information.
 * @export
 * @interface ErrorDetails
 */
export interface ErrorDetails {
  /**
   * One of a server-defined set of error codes.
   * @type {string}
   * @memberof ErrorDetails
   */
  code: string;
  /**
   * A human-readable representation of the error.
   * @type {string}
   * @memberof ErrorDetails
   */
  message: string;
}
/**
 * Gives details for an error that occurred while handling the request. Note that clients MUST NOT assume that every failed request will produce an object of this schema, or that all of the properties in the response will be non-null, as the error may have prevented this response from being constructed.
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   *
   * @type {Error}
   * @memberof ErrorResponse
   */
  error: ModelError;
}
/**
 * Defines a single Extraction Log response.
 * @export
 * @interface ExtractionLog
 */
export interface ExtractionLog {
  /**
   * The state of the Extraction at specific time.
   * @type {string}
   * @memberof ExtractionLog
   */
  state?: string;
  /**
   * The Reason explaining why state has specific value.
   * @type {string}
   * @memberof ExtractionLog
   */
  reason?: string;
  /**
   * Date when Extraction Log entity was created.
   * @type {string}
   * @memberof ExtractionLog
   */
  dateTime?: string;
  /**
   * Unique Identifier for the Extraction Run.
   * @type {string}
   * @memberof ExtractionLog
   */
  jobId?: string;
  /**
   * The type of the contextId.
   * @type {string}
   * @memberof ExtractionLog
   */
  contextType?: string;
  /**
   * The Context Id.
   * @type {string}
   * @memberof ExtractionLog
   */
  contextId?: string;
  /**
   * The level of an issue. If Extraction Log entity is not an issue it is marked as \"Information\".
   * @type {string}
   * @memberof ExtractionLog
   */
  level?: string;
  /**
   * The issue category. If Extraction Log entity is not an issue this is marked as \"Unknown\".
   * @type {string}
   * @memberof ExtractionLog
   */
  category?: string;
  /**
   * Message which specifies why certain issue occured. If Extraction Log entity is not an issue Message is null.
   * @type {string}
   * @memberof ExtractionLog
   */
  message?: string;
  /**
   * If Extraction Log contains an issue, this is marked as true.
   * @type {boolean}
   * @memberof ExtractionLog
   */
  containsIssues?: boolean;
}
/**
 * List of Extraction Logs.
 * @export
 * @interface ExtractionLogCollection
 */
export interface ExtractionLogCollection {
  /**
   * List of Extraction Logs.
   * @type {Array<ExtractionLog>}
   * @memberof ExtractionLogCollection
   */
  extractionLog?: Array<ExtractionLog>;
  /**
   *
   * @type {PagedResponseLinks}
   * @memberof ExtractionLogCollection
   */
  _links?: PagedResponseLinks;
}
/**
 * Metadata associated with a data extraction run.
 * @export
 * @interface ExtractionRun
 */
export interface ExtractionRun {
  /**
   *
   * @type {ExtractionRunRun}
   * @memberof ExtractionRun
   */
  run?: ExtractionRunRun;
}
/**
 * Extraction Run properties.
 * @export
 * @interface ExtractionRunRun
 */
export interface ExtractionRunRun {
  /**
   * Unique Identifier for the Extraction Run. Use this to check run status.
   * @type {string}
   * @memberof ExtractionRunRun
   */
  id?: string;
}
/**
 * Status of the specified Extraction Run.
 * @export
 * @interface ExtractionStatus
 */
export interface ExtractionStatus {
  /**
   *
   * @type {ExtractionStatusStatus}
   * @memberof ExtractionStatus
   */
  status?: ExtractionStatusStatus;
}
/**
 * Extraction Status properties.
 * @export
 * @interface ExtractionStatusStatus
 */
export interface ExtractionStatusStatus {
  /**
   * Current state of the Extraction Run - 'Running', 'Succeeded', or 'Failed'.
   * @type {string}
   * @memberof ExtractionStatusStatus
   */
  state?: string;
  /**
   * Additional justification for the current state of the Extraction Run.
   * @type {string}
   * @memberof ExtractionStatusStatus
   */
  reason?: string;
}
/**
 * Defines a single Group (collection of iModel elements) in an iModel Mapping.
 * @export
 * @interface Group
 */
export interface Group {
  /**
   * The Group Id.
   * @type {string}
   * @memberof Group
   */
  id?: string;
  /**
   * Name of the Group (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof Group
   */
  groupName?: string;
  /**
   * Description of the Group.
   * @type {string}
   * @memberof Group
   */
  description?: string;
  /**
   * Query string that will be executed against the target iModel to build this Group.
   * @type {string}
   * @memberof Group
   */
  query?: string;
}
/**
 * List of Groups.
 * @export
 * @interface GroupCollection
 */
export interface GroupCollection {
  /**
   * List of Groups.
   * @type {Array<Group>}
   * @memberof GroupCollection
   */
  groups?: Array<Group>;
  /**
   *
   * @type {PagedResponseLinks}
   * @memberof GroupCollection
   */
  _links?: PagedResponseLinks;
}
/**
 * Properties of the Group to be created.
 * @export
 * @interface GroupCreate
 */
export interface GroupCreate {
  /**
   * Name of the Group (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof GroupCreate
   */
  groupName?: string;
  /**
   * Description of the Group.
   * @type {string}
   * @memberof GroupCreate
   */
  description?: string;
  /**
   * Query string that will be executed against the target iModel to build this Group.
   * @type {string}
   * @memberof GroupCreate
   */
  query?: string;
}
/**
 * Defines a one-to-many property mapping to a set of ECProperties for a Group - to be used when a Group query will return data from multiple ECClasses.
 * @export
 * @interface GroupProperty
 */
export interface GroupProperty {
  /**
   * The GroupProperty Id.
   * @type {string}
   * @memberof GroupProperty
   */
  id?: string;
  /**
   * Name of the Property (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof GroupProperty
   */
  propertyName?: string;
  /**
   * The data type of the GroupProperty. One of 'Boolean', 'Number', 'String', or 'Undefined'.
   * @type {string}
   * @memberof GroupProperty
   */
  dataType?: string;
  /**
   * The quantity type of the GroupProperty. One of 'Area', 'Distance', 'Force', 'Mass', 'Monetary', 'Time', 'Volume, or 'Undefined'.
   * @type {string}
   * @memberof GroupProperty
   */
  quantityType?: string;
  /**
   * List of ECProperties that map to this GroupProperty.
   * @type {Array<ECProperty>}
   * @memberof GroupProperty
   */
  ecProperties?: Array<ECProperty>;
}
/**
 * List of GroupProperties.
 * @export
 * @interface GroupPropertyCollection
 */
export interface GroupPropertyCollection {
  /**
   * List of GroupProperties.
   * @type {Array<GroupProperty>}
   * @memberof GroupPropertyCollection
   */
  groupProperties?: Array<GroupProperty>;
  /**
   *
   * @type {PagedResponseLinks}
   * @memberof GroupPropertyCollection
   */
  _links?: PagedResponseLinks;
}
/**
 * Properties of the GroupProperty to be created.
 * @export
 * @interface GroupPropertyCreate
 */
export interface GroupPropertyCreate {
  /**
   * Name of the Property (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof GroupPropertyCreate
   */
  propertyName?: string;
  /**
   * The data type of the GroupProperty. One of 'Boolean', 'Number', 'String', or 'Undefined'.
   * @type {string}
   * @memberof GroupPropertyCreate
   */
  dataType?: string;
  /**
   * The quantity type of the GroupProperty. One of 'Area', 'Distance', 'Force', 'Mass', 'Monetary', 'Time', 'Volume, or 'Undefined'.
   * @type {string}
   * @memberof GroupPropertyCreate
   */
  quantityType?: string;
  /**
   * List of ECProperties that map to this GroupProperty.
   * @type {Array<ECProperty>}
   * @memberof GroupPropertyCreate
   */
  ecProperties?: Array<ECProperty>;
}
/**
 * Container for a GroupProperty object.
 * @export
 * @interface GroupPropertySingle
 */
export interface GroupPropertySingle {
  /**
   *
   * @type {GroupProperty}
   * @memberof GroupPropertySingle
   */
  groupProperty?: GroupProperty;
}
/**
 * Properties of the GroupProperty to be updated.
 * @export
 * @interface GroupPropertyUpdate
 */
export interface GroupPropertyUpdate {
  /**
   * Name of the Property (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof GroupPropertyUpdate
   */
  propertyName?: string;
  /**
   * The data type of the GroupProperty. One of 'Boolean', 'Number', 'String', or 'Undefined'.
   * @type {string}
   * @memberof GroupPropertyUpdate
   */
  dataType?: string;
  /**
   * The quantity type of the GroupProperty. One of 'Area', 'Distance', 'Force', 'Mass', 'Monetary', 'Time', 'Volume, or 'Undefined'.
   * @type {string}
   * @memberof GroupPropertyUpdate
   */
  quantityType?: string;
  /**
   * List of ECProperties that map to this GroupProperty.
   * @type {Array<ECProperty>}
   * @memberof GroupPropertyUpdate
   */
  ecProperties?: Array<ECProperty>;
}
/**
 * Container for a Group object.
 * @export
 * @interface GroupSingle
 */
export interface GroupSingle {
  /**
   *
   * @type {Group}
   * @memberof GroupSingle
   */
  group?: Group;
}
/**
 * Properties of the Group to be updated.
 * @export
 * @interface GroupUpdate
 */
export interface GroupUpdate {
  /**
   * Name of the Group (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof GroupUpdate
   */
  groupName?: string;
  /**
   * Description of the Group.
   * @type {string}
   * @memberof GroupUpdate
   */
  description?: string;
  /**
   * Query string that will be executed against the target iModel to build this Group.
   * @type {string}
   * @memberof GroupUpdate
   */
  query?: string;
}
/**
 * Hyperlink container.
 * @export
 * @interface Link
 */
export interface Link {
  /**
   * Hyperlink to the specific entity.
   * @type {string}
   * @memberof Link
   */
  href?: string;
}
/**
 * Defines a Mapping for an iModel. Each mapping represents a collection of 'Groups', sets of iModel elements, and their properties of interest.
 * @export
 * @interface Mapping
 */
export interface Mapping {
  /**
   * The Mapping Id.
   * @type {string}
   * @memberof Mapping
   */
  id?: string;
  /**
   * Name of the Mapping (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof Mapping
   */
  mappingName?: string;
  /**
   * Description of the Mapping.
   * @type {string}
   * @memberof Mapping
   */
  description?: string;
  /**
   * Value of `false` excludes a `Mapping` from the `Run Extraction` operation and automatic execution after the `Create iModel Named Version` operation.
   * @type {boolean}
   * @memberof Mapping
   */
  extractionEnabled?: boolean;
  /**
   * Date when the Mapping was created.
   * @type {string}
   * @memberof Mapping
   */
  createdOn?: string;
  /**
   * Email of the user who created the Mapping.
   * @type {string}
   * @memberof Mapping
   */
  createdBy?: string;
  /**
   * Date when the Mapping was last modified.
   * @type {string}
   * @memberof Mapping
   */
  modifiedOn?: string;
  /**
   * Email of the user who last modified the Mapping.
   * @type {string}
   * @memberof Mapping
   */
  modifiedBy?: string;
  /**
   *
   * @type {MappingLinks}
   * @memberof Mapping
   */
  _links?: MappingLinks;
}
/**
 * List of Mappings.
 * @export
 * @interface MappingCollection
 */
export interface MappingCollection {
  /**
   * List of Mappings.
   * @type {Array<Mapping>}
   * @memberof MappingCollection
   */
  mappings?: Array<Mapping>;
  /**
   *
   * @type {PagedResponseLinks}
   * @memberof MappingCollection
   */
  _links?: PagedResponseLinks;
}
/**
 * Properties for the copied Mapping.
 * @export
 * @interface MappingCopy
 */
export interface MappingCopy {
  /**
   * The target iModel Id.
   * @type {string}
   * @memberof MappingCopy
   */
  targetIModelId: string;
  /**
   * Name of the target Mapping (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof MappingCopy
   */
  mappingName?: string;
}
/**
 * Properties of the Mapping to be created.
 * @export
 * @interface MappingCreate
 */
export interface MappingCreate {
  /**
   * Name of the Mapping (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof MappingCreate
   */
  mappingName: string;
  /**
   * Description of the Mapping.
   * @type {string}
   * @memberof MappingCreate
   */
  description?: string;
  /**
   * Value of `false` excludes a `Mapping` from the `Run Extraction` operation and automatic execution after the `Create iModel Named Version` operation. The default value is `true`.
   * @type {boolean}
   * @memberof MappingCreate
   */
  extractionEnabled?: boolean;
}
/**
 * Contains contextual hyperlinks to related data.
 * @export
 * @interface MappingLinks
 */
export interface MappingLinks {
  /**
   *
   * @type {Link}
   * @memberof MappingLinks
   */
  imodel?: Link;
}
/**
 * Container for a Mapping object.
 * @export
 * @interface MappingSingle
 */
export interface MappingSingle {
  /**
   *
   * @type {Mapping}
   * @memberof MappingSingle
   */
  mapping?: Mapping;
}
/**
 * Properties of the Mapping to be updated.
 * @export
 * @interface MappingUpdate
 */
export interface MappingUpdate {
  /**
   * Name of the Mapping (OData v4 SimpleIdentifier).
   * @type {string}
   * @memberof MappingUpdate
   */
  mappingName?: string;
  /**
   * Description of the Mapping.
   * @type {string}
   * @memberof MappingUpdate
   */
  description?: string;
  /**
   * Value of `false` excludes a `Mapping` from the `Run Extraction` operation and automatic execution after the `Create iModel Named Version` operation.
   * @type {boolean}
   * @memberof MappingUpdate
   */
  extractionEnabled?: boolean;
}
/**
 * Contains error information and an optional array of more specific errors.
 * @export
 * @interface ModelError
 */
export interface ModelError {
  /**
   * One of a server-defined set of error codes.
   * @type {string}
   * @memberof ModelError
   */
  code: string;
  /**
   * A human-readable representation of the error.
   * @type {string}
   * @memberof ModelError
   */
  message: string;
  /**
   * Optional array of more specific errors.
   * @type {Array<ErrorDetails>}
   * @memberof ModelError
   */
  details?: Array<ErrorDetails>;
}
/**
 *
 * @export
 * @interface ODataItem
 */
export interface ODataItem {
  /**
   *
   * @type {string}
   * @memberof ODataItem
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ODataItem
   */
  url?: string;
}
/**
 * OData response.
 * @export
 * @interface ODataResponse
 */
export interface ODataResponse {
  /**
   *
   * @type {ODataResponseStatus}
   * @memberof ODataResponse
   */
  status?: ODataResponseStatus;
}
/**
 * OData response.
 * @export
 * @interface ODataResponseStatus
 */
export interface ODataResponseStatus {
  /**
   * OData Schema
   * @type {string}
   * @memberof ODataResponseStatus
   */
  odata_context?: string;
  /**
   *
   * @type {Array<ODataItem>}
   * @memberof ODataResponseStatus
   */
  value?: Array<ODataItem>;
}
/**
 * URLs for redoing the current request and/or getting the next page of results if applicable.
 * @export
 * @interface PagedResponseLinks
 */
export interface PagedResponseLinks {
  /**
   *
   * @type {Link}
   * @memberof PagedResponseLinks
   */
  next?: Link;
  /**
   *
   * @type {Link}
   * @memberof PagedResponseLinks
   */
  self?: Link;
}
/**
 * Defines a unit of data that can be exposed as an OData feed. The contents of a Report are defined in Report Mappings.
 * @export
 * @interface Report
 */
export interface Report {
  /**
   * The Report Id.
   * @type {string}
   * @memberof Report
   */
  id?: string;
  /**
   * Name of the Report.
   * @type {string}
   * @memberof Report
   */
  displayName?: string;
  /**
   * Description of the Report.
   * @type {string}
   * @memberof Report
   */
  description?: string;
  /**
   * Flag indicating whether or not a Report has been marked for deletion.
   * @type {boolean}
   * @memberof Report
   */
  deleted?: boolean;
  /**
   *
   * @type {ReportLinks}
   * @memberof Report
   */
  _links?: ReportLinks;
}
/**
 * List of Reports.
 * @export
 * @interface ReportCollection
 */
export interface ReportCollection {
  /**
   * List of Reports.
   * @type {Array<Report>}
   * @memberof ReportCollection
   */
  reports?: Array<Report>;
  /**
   *
   * @type {PagedResponseLinks}
   * @memberof ReportCollection
   */
  _links?: PagedResponseLinks;
}
/**
 * Properties of the Report to be created.
 * @export
 * @interface ReportCreate
 */
export interface ReportCreate {
  /**
   * Name of the Report.
   * @type {string}
   * @memberof ReportCreate
   */
  displayName?: string;
  /**
   * Description of the Report.
   * @type {string}
   * @memberof ReportCreate
   */
  description?: string;
  /**
   * The Project Id this Report will be drawing data from.
   * @type {string}
   * @memberof ReportCreate
   */
  projectId?: string;
}
/**
 * Contains contextual hyperlinks to related data.
 * @export
 * @interface ReportLinks
 */
export interface ReportLinks {
  /**
   *
   * @type {Link}
   * @memberof ReportLinks
   */
  project?: Link;
}
/**
 * Defines a relationship between Report and Mapping. A Mapping can be associated with more than one Report.
 * @export
 * @interface ReportMapping
 */
export interface ReportMapping {
  /**
   * The Report Id.
   * @type {string}
   * @memberof ReportMapping
   */
  reportId?: string;
  /**
   * The Mapping Id.
   * @type {string}
   * @memberof ReportMapping
   */
  mappingId?: string;
  /**
   * The iModel Id.
   * @type {string}
   * @memberof ReportMapping
   */
  imodelId?: string;
  /**
   *
   * @type {ReportMappingLinks}
   * @memberof ReportMapping
   */
  _links?: ReportMappingLinks;
}
/**
 * List of Report Mappings.
 * @export
 * @interface ReportMappingCollection
 */
export interface ReportMappingCollection {
  /**
   * List of Report Mappings.
   * @type {Array<ReportMapping>}
   * @memberof ReportMappingCollection
   */
  mappings?: Array<ReportMapping>;
  /**
   *
   * @type {PagedResponseLinks}
   * @memberof ReportMappingCollection
   */
  _links?: PagedResponseLinks;
}
/**
 * Properties of the Report Mapping to be created.
 * @export
 * @interface ReportMappingCreate
 */
export interface ReportMappingCreate {
  /**
   * The Mapping Id that should be linked to this Report.
   * @type {string}
   * @memberof ReportMappingCreate
   */
  mappingId?: string;
  /**
   * The iModel Id.
   * @type {string}
   * @memberof ReportMappingCreate
   */
  imodelId?: string;
}
/**
 * Contains contextual hyperlinks to related data.
 * @export
 * @interface ReportMappingLinks
 */
export interface ReportMappingLinks {
  /**
   *
   * @type {Link}
   * @memberof ReportMappingLinks
   */
  report?: Link;
  /**
   *
   * @type {Link}
   * @memberof ReportMappingLinks
   */
  mapping?: Link;
  /**
   *
   * @type {Link}
   * @memberof ReportMappingLinks
   */
  imodel?: Link;
}
/**
 * Container for a Report Mapping object.
 * @export
 * @interface ReportMappingSingle
 */
export interface ReportMappingSingle {
  /**
   *
   * @type {ReportMapping}
   * @memberof ReportMappingSingle
   */
  mapping?: ReportMapping;
}
/**
 * Container for a Report object.
 * @export
 * @interface ReportSingle
 */
export interface ReportSingle {
  /**
   *
   * @type {Report}
   * @memberof ReportSingle
   */
  report?: Report;
}
/**
 * Properties of the Report to be updated.
 * @export
 * @interface ReportUpdate
 */
export interface ReportUpdate {
  /**
   * Name of the Report.
   * @type {string}
   * @memberof ReportUpdate
   */
  displayName?: string;
  /**
   * Description of the Report.
   * @type {string}
   * @memberof ReportUpdate
   */
  description?: string;
  /**
   * Flag indicating whether or not a Report has been marked for deletion.
   * @type {boolean}
   * @memberof ReportUpdate
   */
  deleted?: boolean;
}
/**
 * DataAccessApi - fetch parameter creator
 * @export
 */
export const DataAccessApiFetchParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * ---    Lists all OData Entities for a Report. This endpoint can be used as an OData feed in applications like Excel or Power BI.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary OData
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    odata(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          'reportId',
          'Required parameter reportId was null or undefined when calling odata.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling odata.',
        );
      }
      const localVarPath = `/odata/{reportId}`.replace(
        `{${'reportId'}}`,
        encodeURIComponent(String(reportId)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Lists the raw table data for a Report Entity.     ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary OData Entity
     * @param {string} reportId The Report Id.
     * @param {string} region NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the OData endpoint directly.
     * @param {string} manifestId NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the OData endpoint directly.
     * @param {string} entityType NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the OData endpoint directly.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    odataEntity(
      reportId: string,
      region: string,
      manifestId: string,
      entityType: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          'reportId',
          'Required parameter reportId was null or undefined when calling odataEntity.',
        );
      }
      // verify required parameter 'region' is not null or undefined
      if (region === null || region === undefined) {
        throw new RequiredError(
          'region',
          'Required parameter region was null or undefined when calling odataEntity.',
        );
      }
      // verify required parameter 'manifestId' is not null or undefined
      if (manifestId === null || manifestId === undefined) {
        throw new RequiredError(
          'manifestId',
          'Required parameter manifestId was null or undefined when calling odataEntity.',
        );
      }
      // verify required parameter 'entityType' is not null or undefined
      if (entityType === null || entityType === undefined) {
        throw new RequiredError(
          'entityType',
          'Required parameter entityType was null or undefined when calling odataEntity.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling odataEntity.',
        );
      }
      const localVarPath =
        `/odata/{reportId}/{region}/{manifestId}/{entityType}`
          .replace(`{${'reportId'}}`, encodeURIComponent(String(reportId)))
          .replace(`{${'region'}}`, encodeURIComponent(String(region)))
          .replace(`{${'manifestId'}}`, encodeURIComponent(String(manifestId)))
          .replace(`{${'entityType'}}`, encodeURIComponent(String(entityType)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Lists schemas for all Entities tied to a Report.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary OData Metadata
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    odataMetadata(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          'reportId',
          'Required parameter reportId was null or undefined when calling odataMetadata.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling odataMetadata.',
        );
      }
      const localVarPath = `/odata/{reportId}/$metadata`.replace(
        `{${'reportId'}}`,
        encodeURIComponent(String(reportId)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DataAccessApi - functional programming interface
 * @export
 */
export const DataAccessApiFp = function (configuration?: Configuration) {
  return {
    /**
     * ---    Lists all OData Entities for a Report. This endpoint can be used as an OData feed in applications like Excel or Power BI.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary OData
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    odata(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ODataResponse> {
      const localVarFetchArgs = DataAccessApiFetchParamCreator(
        configuration,
      ).odata(reportId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Lists the raw table data for a Report Entity.     ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary OData Entity
     * @param {string} reportId The Report Id.
     * @param {string} region NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the OData endpoint directly.
     * @param {string} manifestId NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the OData endpoint directly.
     * @param {string} entityType NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the OData endpoint directly.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    odataEntity(
      reportId: string,
      region: string,
      manifestId: string,
      entityType: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataAccessApiFetchParamCreator(
        configuration,
      ).odataEntity(
        reportId,
        region,
        manifestId,
        entityType,
        Authorization,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Lists schemas for all Entities tied to a Report.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary OData Metadata
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    odataMetadata(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DataAccessApiFetchParamCreator(
        configuration,
      ).odataMetadata(reportId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * DataAccessApi - factory interface
 * @export
 */
export const DataAccessApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string,
) {
  return {
    /**
     * ---    Lists all OData Entities for a Report. This endpoint can be used as an OData feed in applications like Excel or Power BI.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary OData
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    odata(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return DataAccessApiFp(configuration).odata(
        reportId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Lists the raw table data for a Report Entity.     ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary OData Entity
     * @param {string} reportId The Report Id.
     * @param {string} region NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the OData endpoint directly.
     * @param {string} manifestId NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the OData endpoint directly.
     * @param {string} entityType NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the OData endpoint directly.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    odataEntity(
      reportId: string,
      region: string,
      manifestId: string,
      entityType: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return DataAccessApiFp(configuration).odataEntity(
        reportId,
        region,
        manifestId,
        entityType,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Lists schemas for all Entities tied to a Report.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary OData Metadata
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    odataMetadata(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return DataAccessApiFp(configuration).odataMetadata(
        reportId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
  };
};

/**
 * DataAccessApi - object-oriented interface
 * @export
 * @class DataAccessApi
 * @extends {BaseAPI}
 */
export class DataAccessApi extends BaseAPI {
  /**
   * ---    Lists all OData Entities for a Report. This endpoint can be used as an OData feed in applications like Excel or Power BI.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary OData
   * @param {string} reportId The Report Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataAccessApi
   */
  public odata(
    reportId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return DataAccessApiFp(this.configuration).odata(
      reportId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Lists the raw table data for a Report Entity.     ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary OData Entity
   * @param {string} reportId The Report Id.
   * @param {string} region NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the OData endpoint directly.
   * @param {string} manifestId NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the OData endpoint directly.
   * @param {string} entityType NOTE: These parameters are not meant to be set manually. Instead use the URLs generated by the OData endpoint directly.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataAccessApi
   */
  public odataEntity(
    reportId: string,
    region: string,
    manifestId: string,
    entityType: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return DataAccessApiFp(this.configuration).odataEntity(
      reportId,
      region,
      manifestId,
      entityType,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Lists schemas for all Entities tied to a Report.    ### Notes    This is an OData v4 compliant endpoint.    This endpoint should only be accessed using OData compliant libraries and tools such as Power BI.    Use of these endpoints directly is not prohibited, however we recommend understanding the [OData protocols and conventions](https://www.odata.org/documentation/) first.    ### Authentication    Requires `Authorization` header with one of schemes:    - Valid [API Key](/apis/insights/api-keys) used as the password in Basic auth.  - Valid Bearer token for scope `insights:read`.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary OData Metadata
   * @param {string} reportId The Report Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataAccessApi
   */
  public odataMetadata(
    reportId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return DataAccessApiFp(this.configuration).odataMetadata(
      reportId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }
}
/**
 * ExtractionApi - fetch parameter creator
 * @export
 */
export const ExtractionApiFetchParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * ---    Gets Logs of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Extraction Logs
     * @param {string} jobId Unique Identifier of the Extraction Run.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtractionLogs(
      jobId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'jobId' is not null or undefined
      if (jobId === null || jobId === undefined) {
        throw new RequiredError(
          'jobId',
          'Required parameter jobId was null or undefined when calling getExtractionLogs.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getExtractionLogs.',
        );
      }
      const localVarPath =
        `/datasources/extraction/status/{jobId}/logs`.replace(
          `{${'jobId'}}`,
          encodeURIComponent(String(jobId)),
        );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter['$top'] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter['$continuationToken'] = continuationToken;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets the Status of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Extraction Status
     * @param {string} jobId Unique Identifier of the Extraction Run.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtractionStatus(
      jobId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'jobId' is not null or undefined
      if (jobId === null || jobId === undefined) {
        throw new RequiredError(
          'jobId',
          'Required parameter jobId was null or undefined when calling getExtractionStatus.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getExtractionStatus.',
        );
      }
      const localVarPath = `/datasources/extraction/status/{jobId}`.replace(
        `{${'jobId'}}`,
        encodeURIComponent(String(jobId)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets the Status of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Extraction Status (Deprecated)
     * @param {string} imodelId Globally Unique Identifier of the target iModel.
     * @param {string} jobId Unique Identifier of the Extraction Run.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtractionStatusDeprecated(
      imodelId: string,
      jobId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling getExtractionStatusDeprecated.',
        );
      }
      // verify required parameter 'jobId' is not null or undefined
      if (jobId === null || jobId === undefined) {
        throw new RequiredError(
          'jobId',
          'Required parameter jobId was null or undefined when calling getExtractionStatusDeprecated.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getExtractionStatusDeprecated.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/extraction/status/{jobId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'jobId'}}`, encodeURIComponent(String(jobId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Manually run Extraction of data from an iModel. Latest Named Version is used for Extraction.    For the iModel data source, data must be Extracted first before it can be used in your Reports.    ### Notes    iModel data Extraction is executed automatically after new Named Version is created. Do not call this API on scheduled basis or after making changes to an iModel.    Only call this API after creating or changing an iModel Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Run Extraction
     * @param {string} imodelId The iModel Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runExtraction(
      imodelId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling runExtraction.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling runExtraction.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/extraction/run`.replace(
          `{${'imodelId'}}`,
          encodeURIComponent(String(imodelId)),
        );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ExtractionApi - functional programming interface
 * @export
 */
export const ExtractionApiFp = function (configuration?: Configuration) {
  return {
    /**
     * ---    Gets Logs of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Extraction Logs
     * @param {string} jobId Unique Identifier of the Extraction Run.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtractionLogs(
      jobId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ): (
      fetch?: FetchAPI,
      basePath?: string,
    ) => Promise<ExtractionLogCollection> {
      const localVarFetchArgs = ExtractionApiFetchParamCreator(
        configuration,
      ).getExtractionLogs(
        jobId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets the Status of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Extraction Status
     * @param {string} jobId Unique Identifier of the Extraction Run.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtractionStatus(
      jobId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ExtractionStatus> {
      const localVarFetchArgs = ExtractionApiFetchParamCreator(
        configuration,
      ).getExtractionStatus(jobId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets the Status of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Extraction Status (Deprecated)
     * @param {string} imodelId Globally Unique Identifier of the target iModel.
     * @param {string} jobId Unique Identifier of the Extraction Run.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtractionStatusDeprecated(
      imodelId: string,
      jobId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ExtractionStatus> {
      const localVarFetchArgs = ExtractionApiFetchParamCreator(
        configuration,
      ).getExtractionStatusDeprecated(
        imodelId,
        jobId,
        Authorization,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Manually run Extraction of data from an iModel. Latest Named Version is used for Extraction.    For the iModel data source, data must be Extracted first before it can be used in your Reports.    ### Notes    iModel data Extraction is executed automatically after new Named Version is created. Do not call this API on scheduled basis or after making changes to an iModel.    Only call this API after creating or changing an iModel Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Run Extraction
     * @param {string} imodelId The iModel Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runExtraction(
      imodelId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ExtractionRun> {
      const localVarFetchArgs = ExtractionApiFetchParamCreator(
        configuration,
      ).runExtraction(imodelId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ExtractionApi - factory interface
 * @export
 */
export const ExtractionApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string,
) {
  return {
    /**
     * ---    Gets Logs of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Extraction Logs
     * @param {string} jobId Unique Identifier of the Extraction Run.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtractionLogs(
      jobId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ) {
      return ExtractionApiFp(configuration).getExtractionLogs(
        jobId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets the Status of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Extraction Status
     * @param {string} jobId Unique Identifier of the Extraction Run.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtractionStatus(
      jobId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return ExtractionApiFp(configuration).getExtractionStatus(
        jobId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets the Status of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Extraction Status (Deprecated)
     * @param {string} imodelId Globally Unique Identifier of the target iModel.
     * @param {string} jobId Unique Identifier of the Extraction Run.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExtractionStatusDeprecated(
      imodelId: string,
      jobId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return ExtractionApiFp(configuration).getExtractionStatusDeprecated(
        imodelId,
        jobId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Manually run Extraction of data from an iModel. Latest Named Version is used for Extraction.    For the iModel data source, data must be Extracted first before it can be used in your Reports.    ### Notes    iModel data Extraction is executed automatically after new Named Version is created. Do not call this API on scheduled basis or after making changes to an iModel.    Only call this API after creating or changing an iModel Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Run Extraction
     * @param {string} imodelId The iModel Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runExtraction(
      imodelId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return ExtractionApiFp(configuration).runExtraction(
        imodelId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
  };
};

/**
 * ExtractionApi - object-oriented interface
 * @export
 * @class ExtractionApi
 * @extends {BaseAPI}
 */
export class ExtractionApi extends BaseAPI {
  /**
   * ---    Gets Logs of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Extraction Logs
   * @param {string} jobId Unique Identifier of the Extraction Run.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExtractionApi
   */
  public getExtractionLogs(
    jobId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    Accept?: string,
    options?: any,
  ) {
    return ExtractionApiFp(this.configuration).getExtractionLogs(
      jobId,
      Authorization,
      top,
      continuationToken,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets the Status of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Extraction Status
   * @param {string} jobId Unique Identifier of the Extraction Run.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExtractionApi
   */
  public getExtractionStatus(
    jobId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return ExtractionApiFp(this.configuration).getExtractionStatus(
      jobId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets the Status of an Extraction Run.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Extraction Status (Deprecated)
   * @param {string} imodelId Globally Unique Identifier of the target iModel.
   * @param {string} jobId Unique Identifier of the Extraction Run.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExtractionApi
   */
  public getExtractionStatusDeprecated(
    imodelId: string,
    jobId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return ExtractionApiFp(this.configuration).getExtractionStatusDeprecated(
      imodelId,
      jobId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Manually run Extraction of data from an iModel. Latest Named Version is used for Extraction.    For the iModel data source, data must be Extracted first before it can be used in your Reports.    ### Notes    iModel data Extraction is executed automatically after new Named Version is created. Do not call this API on scheduled basis or after making changes to an iModel.    Only call this API after creating or changing an iModel Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Run Extraction
   * @param {string} imodelId The iModel Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExtractionApi
   */
  public runExtraction(
    imodelId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return ExtractionApiFp(this.configuration).runExtraction(
      imodelId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }
}
/**
 * MappingsApi - fetch parameter creator
 * @export
 */
export const MappingsApiFetchParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * ---    Copies a Mapping and all its Groups, GroupProperties, CalculatedProperties, and CustomCalculations to a target iModel.    The `mappingName` request body property is optional. If the `mappingName` is not provided the new Mapping will have the same name as the source Mapping but with the `_Copy` appendix. If the `mappingName` is provided the new Mapping will have the provided name.    The `mappingName` property becomes mandatory if the source Mapping has 124 or more characters in its name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Copy Mapping
     * @param {string} imodelId Id of the source Mapping&#x27;s iModel.
     * @param {string} mappingId Id of the source Mapping.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingCopy} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    copyMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: MappingCopy,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling copyMapping.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling copyMapping.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling copyMapping.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/copy`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'MappingCopy' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Creates a CalculatedProperty for a Group. Each CalculatedProperty defines a property or 'column' which is calculated for each element that is returned by the Group's query.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create CalculatedProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new CalculatedProperty.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CalculatedPropertyCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: CalculatedPropertyCreate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling createCalculatedproperty.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling createCalculatedproperty.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling createCalculatedproperty.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling createCalculatedproperty.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/calculatedProperties`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'CalculatedPropertyCreate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Creates a CustomCalculation for a Group. Each CustomCalculation defines a column in the output data which is filled with values calculated using the given formula for each element that is returned by the Group's query.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create CustomCalculation
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new CustomCalculation.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CustomCalculationCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomcalculation(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: CustomCalculationCreate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling createCustomcalculation.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling createCustomcalculation.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling createCustomcalculation.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling createCustomcalculation.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/customCalculations`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'CustomCalculationCreate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Creates a Group for an iModel data source Mapping. A Group is a collection of design elements from an iModel represented by an [ECSQL](https://www.itwinjs.org/learning/ecsql/) query and defines one table in the output data of a report.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping for which to create a new Group.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: GroupCreate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling createGroup.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling createGroup.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling createGroup.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'GroupCreate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Creates a GroupProperty for a Group. Each GroupProperty defines a column of mapped data.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new GroupProperty.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupPropertyCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: GroupPropertyCreate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling createGroupproperty.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling createGroupproperty.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling createGroupproperty.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling createGroupproperty.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/properties`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'GroupPropertyCreate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Creates a Mapping for an iModel. Each Mapping represents a collection of tables (Groups) of data that can be consumed in a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Mapping
     * @param {string} imodelId Id of the iModel for which to create a new Mapping.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMapping(
      imodelId: string,
      Authorization: string,
      body?: MappingCreate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling createMapping.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling createMapping.',
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings`.replace(
        `{${'imodelId'}}`,
        encodeURIComponent(String(imodelId)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'MappingCreate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a CalculatedProperty from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete CalculatedProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the CalculatedProperty to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling deleteCalculatedproperty.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling deleteCalculatedproperty.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling deleteCalculatedproperty.',
        );
      }
      // verify required parameter 'propertyId' is not null or undefined
      if (propertyId === null || propertyId === undefined) {
        throw new RequiredError(
          'propertyId',
          'Required parameter propertyId was null or undefined when calling deleteCalculatedproperty.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling deleteCalculatedproperty.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/calculatedProperties/{propertyId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        options,
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a CustomCalculation from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete CustomCalculation
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} customCalculationId Id of the CustomCalculation to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomcalculation(
      imodelId: string,
      mappingId: string,
      groupId: string,
      customCalculationId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling deleteCustomcalculation.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling deleteCustomcalculation.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling deleteCustomcalculation.',
        );
      }
      // verify required parameter 'customCalculationId' is not null or undefined
      if (customCalculationId === null || customCalculationId === undefined) {
        throw new RequiredError(
          'customCalculationId',
          'Required parameter customCalculationId was null or undefined when calling deleteCustomcalculation.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling deleteCustomcalculation.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/customCalculations/{customCalculationId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
          .replace(
            `{${'customCalculationId'}}`,
            encodeURIComponent(String(customCalculationId)),
          );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        options,
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling deleteGroup.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling deleteGroup.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling deleteGroup.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling deleteGroup.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        options,
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a GroupProperty from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the GroupProperty to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling deleteGroupproperty.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling deleteGroupproperty.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling deleteGroupproperty.',
        );
      }
      // verify required parameter 'propertyId' is not null or undefined
      if (propertyId === null || propertyId === undefined) {
        throw new RequiredError(
          'propertyId',
          'Required parameter propertyId was null or undefined when calling deleteGroupproperty.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling deleteGroupproperty.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/properties/{propertyId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        options,
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling deleteMapping.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling deleteMapping.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling deleteMapping.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        options,
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all CalculatedProperties for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get CalculatedProperties
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalculatedproperties(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling getCalculatedproperties.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling getCalculatedproperties.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling getCalculatedproperties.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getCalculatedproperties.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/calculatedProperties`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter['$top'] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter['$continuationToken'] = continuationToken;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets a CalculatedProperty for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get CalculatedProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId The CalculatedProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling getCalculatedproperty.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling getCalculatedproperty.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling getCalculatedproperty.',
        );
      }
      // verify required parameter 'propertyId' is not null or undefined
      if (propertyId === null || propertyId === undefined) {
        throw new RequiredError(
          'propertyId',
          'Required parameter propertyId was null or undefined when calling getCalculatedproperty.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getCalculatedproperty.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/calculatedProperties/{propertyId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets a CustomCalculation for a Group.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get CustomCalculation
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} customCalculationId The CalculatedProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomcalculation(
      imodelId: string,
      mappingId: string,
      groupId: string,
      customCalculationId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling getCustomcalculation.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling getCustomcalculation.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling getCustomcalculation.',
        );
      }
      // verify required parameter 'customCalculationId' is not null or undefined
      if (customCalculationId === null || customCalculationId === undefined) {
        throw new RequiredError(
          'customCalculationId',
          'Required parameter customCalculationId was null or undefined when calling getCustomcalculation.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getCustomcalculation.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/customCalculations/{customCalculationId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
          .replace(
            `{${'customCalculationId'}}`,
            encodeURIComponent(String(customCalculationId)),
          );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all CustomCalculations for a Group.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get CustomCalculations
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomcalculations(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling getCustomcalculations.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling getCustomcalculations.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling getCustomcalculations.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getCustomcalculations.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/customCalculations`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter['$top'] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter['$continuationToken'] = continuationToken;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets a Group for a Mapping.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling getGroup.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling getGroup.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling getGroup.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getGroup.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all GroupProperties for a Group.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get GroupProperties
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupproperties(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling getGroupproperties.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling getGroupproperties.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling getGroupproperties.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getGroupproperties.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/properties`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter['$top'] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter['$continuationToken'] = continuationToken;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets a GroupProperty for a Group.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId The GroupProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling getGroupproperty.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling getGroupproperty.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling getGroupproperty.',
        );
      }
      // verify required parameter 'propertyId' is not null or undefined
      if (propertyId === null || propertyId === undefined) {
        throw new RequiredError(
          'propertyId',
          'Required parameter propertyId was null or undefined when calling getGroupproperty.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getGroupproperty.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/properties/{propertyId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all Groups for a Mapping.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Groups
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling getGroups.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling getGroups.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getGroups.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter['$top'] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter['$continuationToken'] = continuationToken;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling getMapping.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling getMapping.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getMapping.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all Mappings for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Mappings
     * @param {string} imodelId The iModel Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMappings(
      imodelId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling getMappings.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getMappings.',
        );
      }
      const localVarPath = `/datasources/imodels/{imodelId}/mappings`.replace(
        `{${'imodelId'}}`,
        encodeURIComponent(String(imodelId)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter['$top'] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter['$continuationToken'] = continuationToken;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a CalculatedProperty for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update CalculatedProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the CalculatedProperty to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CalculatedPropertyUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      body?: CalculatedPropertyUpdate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling updateCalculatedproperty.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling updateCalculatedproperty.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling updateCalculatedproperty.',
        );
      }
      // verify required parameter 'propertyId' is not null or undefined
      if (propertyId === null || propertyId === undefined) {
        throw new RequiredError(
          'propertyId',
          'Required parameter propertyId was null or undefined when calling updateCalculatedproperty.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling updateCalculatedproperty.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/calculatedProperties/{propertyId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: 'PATCH' },
        options,
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'CalculatedPropertyUpdate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a CustomCalculation for a Group.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update CustomCalculation
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} customCalculationId Id of the CustomCalculation to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CustomCalculationUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomcalculation(
      imodelId: string,
      mappingId: string,
      groupId: string,
      customCalculationId: string,
      Authorization: string,
      body?: CustomCalculationUpdate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling updateCustomcalculation.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling updateCustomcalculation.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling updateCustomcalculation.',
        );
      }
      // verify required parameter 'customCalculationId' is not null or undefined
      if (customCalculationId === null || customCalculationId === undefined) {
        throw new RequiredError(
          'customCalculationId',
          'Required parameter customCalculationId was null or undefined when calling updateCustomcalculation.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling updateCustomcalculation.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/customCalculations/{customCalculationId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
          .replace(
            `{${'customCalculationId'}}`,
            encodeURIComponent(String(customCalculationId)),
          );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: 'PATCH' },
        options,
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'CustomCalculationUpdate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a Group for a Mapping.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Group
     * @param {string} imodelId Globally Unique Identifier of the target iModel.
     * @param {string} mappingId Globally Unique Identifier of the target Mapping.
     * @param {string} groupId Id of the Group to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: GroupUpdate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling updateGroup.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling updateGroup.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling updateGroup.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling updateGroup.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: 'PATCH' },
        options,
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'GroupUpdate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a GroupProperty for a Group.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the GroupProperty to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupPropertyUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      body?: GroupPropertyUpdate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling updateGroupproperty.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling updateGroupproperty.',
        );
      }
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling updateGroupproperty.',
        );
      }
      // verify required parameter 'propertyId' is not null or undefined
      if (propertyId === null || propertyId === undefined) {
        throw new RequiredError(
          'propertyId',
          'Required parameter propertyId was null or undefined when calling updateGroupproperty.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling updateGroupproperty.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}/groups/{groupId}/properties/{propertyId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)))
          .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
          .replace(`{${'propertyId'}}`, encodeURIComponent(String(propertyId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'GroupPropertyUpdate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: MappingUpdate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'imodelId' is not null or undefined
      if (imodelId === null || imodelId === undefined) {
        throw new RequiredError(
          'imodelId',
          'Required parameter imodelId was null or undefined when calling updateMapping.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling updateMapping.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling updateMapping.',
        );
      }
      const localVarPath =
        `/datasources/imodels/{imodelId}/mappings/{mappingId}`
          .replace(`{${'imodelId'}}`, encodeURIComponent(String(imodelId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: 'PATCH' },
        options,
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'MappingUpdate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MappingsApi - functional programming interface
 * @export
 */
export const MappingsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * ---    Copies a Mapping and all its Groups, GroupProperties, CalculatedProperties, and CustomCalculations to a target iModel.    The `mappingName` request body property is optional. If the `mappingName` is not provided the new Mapping will have the same name as the source Mapping but with the `_Copy` appendix. If the `mappingName` is provided the new Mapping will have the provided name.    The `mappingName` property becomes mandatory if the source Mapping has 124 or more characters in its name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Copy Mapping
     * @param {string} imodelId Id of the source Mapping&#x27;s iModel.
     * @param {string} mappingId Id of the source Mapping.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingCopy} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    copyMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: MappingCopy,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<MappingSingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).copyMapping(imodelId, mappingId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Creates a CalculatedProperty for a Group. Each CalculatedProperty defines a property or 'column' which is calculated for each element that is returned by the Group's query.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create CalculatedProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new CalculatedProperty.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CalculatedPropertyCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: CalculatedPropertyCreate,
      Accept?: string,
      options?: any,
    ): (
      fetch?: FetchAPI,
      basePath?: string,
    ) => Promise<CalculatedPropertySingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).createCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Creates a CustomCalculation for a Group. Each CustomCalculation defines a column in the output data which is filled with values calculated using the given formula for each element that is returned by the Group's query.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create CustomCalculation
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new CustomCalculation.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CustomCalculationCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomcalculation(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: CustomCalculationCreate,
      Accept?: string,
      options?: any,
    ): (
      fetch?: FetchAPI,
      basePath?: string,
    ) => Promise<CustomCalculationSingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).createCustomcalculation(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Creates a Group for an iModel data source Mapping. A Group is a collection of design elements from an iModel represented by an [ECSQL](https://www.itwinjs.org/learning/ecsql/) query and defines one table in the output data of a report.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping for which to create a new Group.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: GroupCreate,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<GroupSingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).createGroup(imodelId, mappingId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Creates a GroupProperty for a Group. Each GroupProperty defines a column of mapped data.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new GroupProperty.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupPropertyCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: GroupPropertyCreate,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<GroupPropertySingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).createGroupproperty(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Creates a Mapping for an iModel. Each Mapping represents a collection of tables (Groups) of data that can be consumed in a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Mapping
     * @param {string} imodelId Id of the iModel for which to create a new Mapping.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMapping(
      imodelId: string,
      Authorization: string,
      body?: MappingCreate,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<MappingSingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).createMapping(imodelId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a CalculatedProperty from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete CalculatedProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the CalculatedProperty to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).deleteCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a CustomCalculation from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete CustomCalculation
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} customCalculationId Id of the CustomCalculation to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomcalculation(
      imodelId: string,
      mappingId: string,
      groupId: string,
      customCalculationId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).deleteCustomcalculation(
        imodelId,
        mappingId,
        groupId,
        customCalculationId,
        Authorization,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).deleteGroup(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a GroupProperty from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the GroupProperty to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).deleteGroupproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).deleteMapping(imodelId, mappingId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all CalculatedProperties for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get CalculatedProperties
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalculatedproperties(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ): (
      fetch?: FetchAPI,
      basePath?: string,
    ) => Promise<CalculatedPropertyCollection> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).getCalculatedproperties(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets a CalculatedProperty for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get CalculatedProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId The CalculatedProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (
      fetch?: FetchAPI,
      basePath?: string,
    ) => Promise<CalculatedPropertySingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).getCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets a CustomCalculation for a Group.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get CustomCalculation
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} customCalculationId The CalculatedProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomcalculation(
      imodelId: string,
      mappingId: string,
      groupId: string,
      customCalculationId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (
      fetch?: FetchAPI,
      basePath?: string,
    ) => Promise<CustomCalculationSingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).getCustomcalculation(
        imodelId,
        mappingId,
        groupId,
        customCalculationId,
        Authorization,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all CustomCalculations for a Group.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get CustomCalculations
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomcalculations(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ): (
      fetch?: FetchAPI,
      basePath?: string,
    ) => Promise<CustomCalculationCollection> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).getCustomcalculations(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets a Group for a Mapping.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<GroupSingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).getGroup(imodelId, mappingId, groupId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all GroupProperties for a Group.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get GroupProperties
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupproperties(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ): (
      fetch?: FetchAPI,
      basePath?: string,
    ) => Promise<GroupPropertyCollection> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).getGroupproperties(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets a GroupProperty for a Group.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId The GroupProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<GroupPropertySingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).getGroupproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all Groups for a Mapping.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Groups
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<GroupCollection> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).getGroups(
        imodelId,
        mappingId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<MappingSingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).getMapping(imodelId, mappingId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all Mappings for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Mappings
     * @param {string} imodelId The iModel Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMappings(
      imodelId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<MappingCollection> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).getMappings(
        imodelId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a CalculatedProperty for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update CalculatedProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the CalculatedProperty to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CalculatedPropertyUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      body?: CalculatedPropertyUpdate,
      Accept?: string,
      options?: any,
    ): (
      fetch?: FetchAPI,
      basePath?: string,
    ) => Promise<CalculatedPropertySingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).updateCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        body,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a CustomCalculation for a Group.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update CustomCalculation
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} customCalculationId Id of the CustomCalculation to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CustomCalculationUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomcalculation(
      imodelId: string,
      mappingId: string,
      groupId: string,
      customCalculationId: string,
      Authorization: string,
      body?: CustomCalculationUpdate,
      Accept?: string,
      options?: any,
    ): (
      fetch?: FetchAPI,
      basePath?: string,
    ) => Promise<CustomCalculationSingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).updateCustomcalculation(
        imodelId,
        mappingId,
        groupId,
        customCalculationId,
        Authorization,
        body,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a Group for a Mapping.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Group
     * @param {string} imodelId Globally Unique Identifier of the target iModel.
     * @param {string} mappingId Globally Unique Identifier of the target Mapping.
     * @param {string} groupId Id of the Group to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: GroupUpdate,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<GroupSingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).updateGroup(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a GroupProperty for a Group.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the GroupProperty to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupPropertyUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      body?: GroupPropertyUpdate,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<GroupPropertySingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).updateGroupproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        body,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: MappingUpdate,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<MappingSingle> {
      const localVarFetchArgs = MappingsApiFetchParamCreator(
        configuration,
      ).updateMapping(
        imodelId,
        mappingId,
        Authorization,
        body,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * MappingsApi - factory interface
 * @export
 */
export const MappingsApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string,
) {
  return {
    /**
     * ---    Copies a Mapping and all its Groups, GroupProperties, CalculatedProperties, and CustomCalculations to a target iModel.    The `mappingName` request body property is optional. If the `mappingName` is not provided the new Mapping will have the same name as the source Mapping but with the `_Copy` appendix. If the `mappingName` is provided the new Mapping will have the provided name.    The `mappingName` property becomes mandatory if the source Mapping has 124 or more characters in its name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Copy Mapping
     * @param {string} imodelId Id of the source Mapping&#x27;s iModel.
     * @param {string} mappingId Id of the source Mapping.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingCopy} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    copyMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: MappingCopy,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).copyMapping(
        imodelId,
        mappingId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Creates a CalculatedProperty for a Group. Each CalculatedProperty defines a property or 'column' which is calculated for each element that is returned by the Group's query.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create CalculatedProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new CalculatedProperty.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CalculatedPropertyCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: CalculatedPropertyCreate,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).createCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Creates a CustomCalculation for a Group. Each CustomCalculation defines a column in the output data which is filled with values calculated using the given formula for each element that is returned by the Group's query.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create CustomCalculation
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new CustomCalculation.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CustomCalculationCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomcalculation(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: CustomCalculationCreate,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).createCustomcalculation(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Creates a Group for an iModel data source Mapping. A Group is a collection of design elements from an iModel represented by an [ECSQL](https://www.itwinjs.org/learning/ecsql/) query and defines one table in the output data of a report.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping for which to create a new Group.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: GroupCreate,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).createGroup(
        imodelId,
        mappingId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Creates a GroupProperty for a Group. Each GroupProperty defines a column of mapped data.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group for which to create a new GroupProperty.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupPropertyCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: GroupPropertyCreate,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).createGroupproperty(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Creates a Mapping for an iModel. Each Mapping represents a collection of tables (Groups) of data that can be consumed in a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Mapping
     * @param {string} imodelId Id of the iModel for which to create a new Mapping.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMapping(
      imodelId: string,
      Authorization: string,
      body?: MappingCreate,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).createMapping(
        imodelId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a CalculatedProperty from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete CalculatedProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the CalculatedProperty to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).deleteCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a CustomCalculation from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete CustomCalculation
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} customCalculationId Id of the CustomCalculation to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomcalculation(
      imodelId: string,
      mappingId: string,
      groupId: string,
      customCalculationId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).deleteCustomcalculation(
        imodelId,
        mappingId,
        groupId,
        customCalculationId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId Id of the Group to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).deleteGroup(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a GroupProperty from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the GroupProperty to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).deleteGroupproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).deleteMapping(
        imodelId,
        mappingId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets all CalculatedProperties for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get CalculatedProperties
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalculatedproperties(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).getCalculatedproperties(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets a CalculatedProperty for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get CalculatedProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId The CalculatedProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).getCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets a CustomCalculation for a Group.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get CustomCalculation
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} customCalculationId The CalculatedProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomcalculation(
      imodelId: string,
      mappingId: string,
      groupId: string,
      customCalculationId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).getCustomcalculation(
        imodelId,
        mappingId,
        groupId,
        customCalculationId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets all CustomCalculations for a Group.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get CustomCalculations
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomcalculations(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).getCustomcalculations(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets a Group for a Mapping.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Group
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).getGroup(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets all GroupProperties for a Group.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get GroupProperties
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupproperties(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).getGroupproperties(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets a GroupProperty for a Group.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId The GroupProperty Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).getGroupproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets all Groups for a Mapping.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Groups
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).getGroups(
        imodelId,
        mappingId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).getMapping(
        imodelId,
        mappingId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets all Mappings for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Mappings
     * @param {string} imodelId The iModel Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMappings(
      imodelId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).getMappings(
        imodelId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Updates a CalculatedProperty for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update CalculatedProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the CalculatedProperty to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CalculatedPropertyUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalculatedproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      body?: CalculatedPropertyUpdate,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).updateCalculatedproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Updates a CustomCalculation for a Group.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update CustomCalculation
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} customCalculationId Id of the CustomCalculation to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {CustomCalculationUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomcalculation(
      imodelId: string,
      mappingId: string,
      groupId: string,
      customCalculationId: string,
      Authorization: string,
      body?: CustomCalculationUpdate,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).updateCustomcalculation(
        imodelId,
        mappingId,
        groupId,
        customCalculationId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Updates a Group for a Mapping.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Group
     * @param {string} imodelId Globally Unique Identifier of the target iModel.
     * @param {string} mappingId Globally Unique Identifier of the target Mapping.
     * @param {string} groupId Id of the Group to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      imodelId: string,
      mappingId: string,
      groupId: string,
      Authorization: string,
      body?: GroupUpdate,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).updateGroup(
        imodelId,
        mappingId,
        groupId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Updates a GroupProperty for a Group.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update GroupProperty
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId The Mapping Id.
     * @param {string} groupId The Group Id.
     * @param {string} propertyId Id of the GroupProperty to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {GroupPropertyUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupproperty(
      imodelId: string,
      mappingId: string,
      groupId: string,
      propertyId: string,
      Authorization: string,
      body?: GroupPropertyUpdate,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).updateGroupproperty(
        imodelId,
        mappingId,
        groupId,
        propertyId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Updates a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Mapping
     * @param {string} imodelId The iModel Id.
     * @param {string} mappingId Id of the Mapping to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {MappingUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMapping(
      imodelId: string,
      mappingId: string,
      Authorization: string,
      body?: MappingUpdate,
      Accept?: string,
      options?: any,
    ) {
      return MappingsApiFp(configuration).updateMapping(
        imodelId,
        mappingId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
  };
};

/**
 * MappingsApi - object-oriented interface
 * @export
 * @class MappingsApi
 * @extends {BaseAPI}
 */
export class MappingsApi extends BaseAPI {
  /**
   * ---    Copies a Mapping and all its Groups, GroupProperties, CalculatedProperties, and CustomCalculations to a target iModel.    The `mappingName` request body property is optional. If the `mappingName` is not provided the new Mapping will have the same name as the source Mapping but with the `_Copy` appendix. If the `mappingName` is provided the new Mapping will have the provided name.    The `mappingName` property becomes mandatory if the source Mapping has 124 or more characters in its name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Copy Mapping
   * @param {string} imodelId Id of the source Mapping&#x27;s iModel.
   * @param {string} mappingId Id of the source Mapping.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {MappingCopy} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public copyMapping(
    imodelId: string,
    mappingId: string,
    Authorization: string,
    body?: MappingCopy,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).copyMapping(
      imodelId,
      mappingId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Creates a CalculatedProperty for a Group. Each CalculatedProperty defines a property or 'column' which is calculated for each element that is returned by the Group's query.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create CalculatedProperty
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId Id of the Group for which to create a new CalculatedProperty.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {CalculatedPropertyCreate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public createCalculatedproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    body?: CalculatedPropertyCreate,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).createCalculatedproperty(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Creates a CustomCalculation for a Group. Each CustomCalculation defines a column in the output data which is filled with values calculated using the given formula for each element that is returned by the Group's query.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create CustomCalculation
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId Id of the Group for which to create a new CustomCalculation.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {CustomCalculationCreate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public createCustomcalculation(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    body?: CustomCalculationCreate,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).createCustomcalculation(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Creates a Group for an iModel data source Mapping. A Group is a collection of design elements from an iModel represented by an [ECSQL](https://www.itwinjs.org/learning/ecsql/) query and defines one table in the output data of a report.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create Group
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId Id of the Mapping for which to create a new Group.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {GroupCreate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public createGroup(
    imodelId: string,
    mappingId: string,
    Authorization: string,
    body?: GroupCreate,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).createGroup(
      imodelId,
      mappingId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Creates a GroupProperty for a Group. Each GroupProperty defines a column of mapped data.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create GroupProperty
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId Id of the Group for which to create a new GroupProperty.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {GroupPropertyCreate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public createGroupproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    body?: GroupPropertyCreate,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).createGroupproperty(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Creates a Mapping for an iModel. Each Mapping represents a collection of tables (Groups) of data that can be consumed in a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create Mapping
   * @param {string} imodelId Id of the iModel for which to create a new Mapping.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {MappingCreate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public createMapping(
    imodelId: string,
    Authorization: string,
    body?: MappingCreate,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).createMapping(
      imodelId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a CalculatedProperty from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete CalculatedProperty
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} propertyId Id of the CalculatedProperty to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public deleteCalculatedproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    propertyId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).deleteCalculatedproperty(
      imodelId,
      mappingId,
      groupId,
      propertyId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a CustomCalculation from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete CustomCalculation
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} customCalculationId Id of the CustomCalculation to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public deleteCustomcalculation(
    imodelId: string,
    mappingId: string,
    groupId: string,
    customCalculationId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).deleteCustomcalculation(
      imodelId,
      mappingId,
      groupId,
      customCalculationId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a Group for a Mapping.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete Group
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId Id of the Group to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public deleteGroup(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).deleteGroup(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a GroupProperty from a Group.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete GroupProperty
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} propertyId Id of the GroupProperty to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public deleteGroupproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    propertyId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).deleteGroupproperty(
      imodelId,
      mappingId,
      groupId,
      propertyId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete Mapping
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId Id of the Mapping to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public deleteMapping(
    imodelId: string,
    mappingId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).deleteMapping(
      imodelId,
      mappingId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all CalculatedProperties for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get CalculatedProperties
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getCalculatedproperties(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).getCalculatedproperties(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      top,
      continuationToken,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets a CalculatedProperty for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get CalculatedProperty
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} propertyId The CalculatedProperty Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getCalculatedproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    propertyId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).getCalculatedproperty(
      imodelId,
      mappingId,
      groupId,
      propertyId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets a CustomCalculation for a Group.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get CustomCalculation
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} customCalculationId The CalculatedProperty Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getCustomcalculation(
    imodelId: string,
    mappingId: string,
    groupId: string,
    customCalculationId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).getCustomcalculation(
      imodelId,
      mappingId,
      groupId,
      customCalculationId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all CustomCalculations for a Group.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get CustomCalculations
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getCustomcalculations(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).getCustomcalculations(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      top,
      continuationToken,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets a Group for a Mapping.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Group
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getGroup(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).getGroup(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all GroupProperties for a Group.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get GroupProperties
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getGroupproperties(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).getGroupproperties(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      top,
      continuationToken,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets a GroupProperty for a Group.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get GroupProperty
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} propertyId The GroupProperty Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getGroupproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    propertyId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).getGroupproperty(
      imodelId,
      mappingId,
      groupId,
      propertyId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all Groups for a Mapping.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Groups
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getGroups(
    imodelId: string,
    mappingId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).getGroups(
      imodelId,
      mappingId,
      Authorization,
      top,
      continuationToken,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Mapping
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getMapping(
    imodelId: string,
    mappingId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).getMapping(
      imodelId,
      mappingId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all Mappings for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Mappings
   * @param {string} imodelId The iModel Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public getMappings(
    imodelId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).getMappings(
      imodelId,
      Authorization,
      top,
      continuationToken,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a CalculatedProperty for a Group.    ### Calculation Types    Calculation types that start with `BoundingBox` use element aligned bounding boxes. They can be used for approximations of geometric element dimensions when there are no available properties that would have exact dimensions. Some errors may occur due to bounding boxes not being a perfect fit for the surrounded element.    List of all available calculation types:    - `Length` - calculation of a linear element length or a perimeter of a geometric element that does not have a volume. For elements that have a volume use BoundingBox calculations to approximate the length.  - `Area` - calculation of a geometric element's surface area.  - `Volume` - calculation of a geometric element's volume.  - `BoundingBoxLongestEdgeLength` - calculation that gives the longest edge length of an element aligned bounding box.  - `BoundingBoxIntermediateEdgeLength` - calculation that gives the edge length that is not the longest nor the shortest of an element aligned bounding box.  - `BoundingBoxShortestEdgeLength` - calculation that gives the shortest edge length of an element aligned bounding box.  - `BoundingBoxDiagonalLength` - calculation that gives the distance between 2 opposite corners of the element aligned bounding box.  - `BoundingBoxLongestFaceDiagonalLength` - calculation that gives the longest distance between 2 opposite corners of a face on the element aligned bounding box.  - `BoundingBoxIntermediateFaceDiagonalLength` - calculation that gives the distance between 2 opposite corners of a face on the element aligned bounding box that is not the longest nor the shortest.  - `BoundingBoxShortestFaceDiagonalLength` - calculation that gives the shortest distance between 2 opposite corners of a face on the element aligned bounding box.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Update CalculatedProperty
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} propertyId Id of the CalculatedProperty to be updated.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {CalculatedPropertyUpdate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public updateCalculatedproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    propertyId: string,
    Authorization: string,
    body?: CalculatedPropertyUpdate,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).updateCalculatedproperty(
      imodelId,
      mappingId,
      groupId,
      propertyId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a CustomCalculation for a Group.    ### CustomCalculations    CustomCalculation is a kind of Group property which has a mathematical formula. CustomCalculation defines a column in the output data which gets filled with a result of the formula evaluation. The formula is evaluated during each extraction for each row of the Group's query result.    The formula supports using other columns (GroupProperty, CalculatedProperty or CustomCalculation entities) as variables. Recursive formulas are not supported, i.e., formula containing a variable `X` is not supported inside a CustomCalculation with a `propertyName` equal to `X`.    Supported operators:    - Unary `-` (negation) has a precedence of 5 and right associativity  - `**` (exponentiation) has a precedence of 4 and right associativity  - `*` (multiplication) has a precedence of 3 and left associativity  - `/` (division) has a precedence of 3 and left associativity  - `%` (remainder) has a precedence of 3 and left associativity  - `+` (addition) has a precedence of 2 and left associativity  - Binary `-` (subtraction) has a precedence of 2 and left associativity    Parenthesis `(` and `)` can be used to change the precedence of operations. Variables, constants, and functions have a precedence of 1 and left associativity.    Supported constants:    - `E` - Euler's constant and the base of natural logarithms (approx. 2.718)  - `LN2` - natural logarithm of 2 (approx. 0.693)  - `LN10` - natural logarithm of 10 (approx. 2.303)  - `LOG2E` - base-2 logarithm of `E` (approx. 1.443)  - `PI` - ratio of a circle's circumference to its diameter (approx. 3.14159)  - `SQRT1_2` - square root of ½ (approx. 0.707)  - `SQRT2` - square root of 2 (approx. 1.414)    Supported numeric constant formats:    - Decimal, e.g., `123` or `1.123`  - Binary (base 2), e.g., `0b1010`  - Octal (base 8), e.g., `0o1234567`  - Hexadecimal (base 16), e.g., `0x123af`  - Scientific notation, e.g., `1.123e+3`    Supported functions:    - `abs(x)` - returns the absolute value of `x`  - `acos(x)` - returns the arccosine of `x`  - `acosh(x)` - returns the hyperbolic arccosine of `x`  - `asin(x)` - returns the arcsine of `x`  - `asinh(x)` - returns the hyperbolic arcsine of `x`  - `atan(x)` - returns the arctangent of `x`  - `atanh(x)` - returns the hyperbolic arctangent of `x`  - `atan2(y, x)` - returns the arctangent of the quotient of `y` divided by `x`  - `cbrt(x)` - returns the cube root of `x`  - `ceil(x)` - returns the smallest integer greater than or equal to `x`  - `clz32(x)` - returns the number of leading zero bits of the 32-bit integer `x`  - `cos(x)` - returns the cosine of `x`  - `cosh(x)` - returns the hyperbolic cosine of `x`  - `exp(x)` - returns `E ** x` or `pow(E, x)`, where `x` is the argument, and `E` is Euler's constant (2.718…, the base of the natural logarithm)  - `expm1(x)` - returns subtracting 1 from `exp(x)`  - `floor(x)` - returns the largest integer less than or equal to `x`  - `fround(x)` - returns the nearest single precision float representation of `x`  - `hypot(x, y[, z[, …]])` - returns the square root of the sum of squares of its arguments  - `imul(x, y)` - returns the result of the 32-bit integer multiplication of `x` and `y`  - `log(x)` - returns the natural logarithm of `x`  - `log1p(x)` - returns the natural logarithm of `1 + x`  - `log10(x)` - returns the base-10 logarithm of `x`  - `log2(x)` - returns the base-2 logarithm of `x`  - `max(x, y[, z[, …]])` - returns the largest of 2 or more numbers  - `min(x, y[, z[, …]])` - returns the smallest of 2 or more numbers  - `pow(x, y)` - returns base `x` to the exponent power `y` (i.e., `x**y`)  - `random()` - returns a pseudo-random number between 0 and 1. The value only changes between different output tables. All rows within a single output table get the same value  - `round(x)` - returns the value of the number `x` rounded to the nearest integer  - `sign(x)` - returns the sign of the `x`, indicating whether `x` is positive (`1`), negative (`-1`), or zero (`0`)  - `sin(x)` - returns the sine of `x`  - `sinh(x)` - returns the hyperbolic sine of `x`  - `sqrt(x)` - returns the positive square root of `x`  - `tan(x)` - returns the tangent of `x`  - `tanh(x)` - returns the hyperbolic tangent of `x`  - `trunc(x)` - returns the integer portion of `x`, removing any fractional digits    Examples of supported formulas:    - `min(A * B, B * C, A * C)` - if `A`, `B`, and `C` are 3 different lengths of box edges, then this formula will result in the smallest side surface area of that box  - `min * max` - formula does not have parenthesis after function names, so the `min` and `max` operands are treated as variables (other columns), not as functions. If the Group has columns `min` and `max`, and their values are `2` and `5`, then the result of this formula is `10` for that row  - `2 ** 3` - 2 raised to the power of 3. Result will be 8. This can also be written as `pow(2, 3)`  - `min(cos(X), sin(X))` - function nesting is supported  - `A * (B + C)` - `A` multiplied by the sum of `B` and `C`  - `A * B + C` - same as `(A * B) + C`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Update CustomCalculation
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} customCalculationId Id of the CustomCalculation to be updated.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {CustomCalculationUpdate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public updateCustomcalculation(
    imodelId: string,
    mappingId: string,
    groupId: string,
    customCalculationId: string,
    Authorization: string,
    body?: CustomCalculationUpdate,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).updateCustomcalculation(
      imodelId,
      mappingId,
      groupId,
      customCalculationId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a Group for a Mapping.    ### Group Query    The `query` parameter of a Group supports ECSql and ECClassIds.    If a valid ECSql query is given and the selected class is `bis.Element`, or if it is a descendant of the class `bis.Element`, the only required column is `ECInstanceId`.    - `SELECT * FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT * FROM Building.Beam` is a valid query  - `SELECT ECInstanceId FROM bis.Element` is a valid query  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECInstanceId FROM Building.Beam` is valid  - `SELECT ECClassId FROM bis.Element` is _not_ a valid query because ECInstanceId column is missing  - Assuming that class `Building.Beam` is a descendant of the class `bis.Element`, the query `SELECT ECClassId FROM Building.Beam` is _not_ valid because ECInstanceId column is missing  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.ECInstanceId FROM bis.Element E JOIN Building.BeamAspect A ON A.Element.id = E.ECInstanceId` is _not_ valid because the selected `ECInstanceId` is of the aspect, not the element  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id FROM Building.BeamAspect` is _not_ valid because the selected column's name is not `ECInstanceId`  - Assuming that `Building.BeamAspect` is an aspect, the query `SELECT A.Element.id ECInstanceId FROM Building.BeamAspect` is valid    In all other cases when providing an ECSql query it is required to select `ECInstanceId`, `ECClassId`, and all other columns that you are planning to use for mapping. If only `ECInstanceId` and `ECClassId` are selected and other columns are used for mapping, those columns will be filled with `null` values. If either `ECInstanceId` or `ECClassId` column is not selected, the query will not produce any output.    If the `query` parameter does not contain a valid ECSql query, then it must be equal to `bis.Element`, `bis.ElementAspect`, or any of their descendants.    The ECClassId format `{schemaName}:{schemaItemName}` where `schemaName` does not contain a 3-part version number is supported.    The ECClassId format `{schemaName}.{schemaItemName}` is supported.    The ECClassId format `{schemaAlias}:{schemaItemName}` where `schemaAlias` is the alias of a `schemaName` is supported.    The ECClassId format `{schemaFullName}:{schemaItemName}` where `schemaFullName` contains a 3-part version number is _not_ supported.    When the given ECClassId is equal to `bis.Element` or is one of its descendants, then all elements with the ECClassId will be selected.    When the given ECClassId is equal to `bis.ElementAspect` or is one of its descendants, then all elements that have such aspect will be selected.    When the given ECClassId is none of the above, the query will not produce any output.    - If a class `Building.Beam` does not have any subclasses and the `query` parameter is set to `Building.Beam`, then all elements with ECClassIds of `Building.Beam` will be selected  - If there is a class `Building.StructuralMember` which has 2 subclasses `Building.Beam` and `Building.Column`, and the `query` parameter is set to `Building.StructuralMember`, then all elements with ECClassIds of `Building.StructuralMember`, `Building.Beam`, and `Building.Column` will be selected  - If a class `Building.BeamAspect` inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.BeamAspect`, then all elements that have a `Building.BeamAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId  - If there is class `Building.StructuralMemberAspect` which has 2 subclasses `Building.BeamAspect` and `Building.ColumnAspect`, the `Building.StructuralMemberAspect` class inherits from a class `bis.ElementAspect` (is unique or multi aspect) and the `query` parameter is set to `Building.StructuralMemberAspect`, then all elements that have `Building.StructuralMemberAspect`, `Building.BeamAspect`, or `Building.ColumnAspect` attached to them will be selected. This query will _not_ select the aspects themselves, but the elements that they are attached to. The selected elements may have any ECClassId    If different queries are needed for a single output table, then create multiple Groups with those different queries but with the same name for each Group. That will cause results of all these queries to be concatenated into a single output table. The output table will have column list equal to a union of all GroupProperties of Groups with the same name.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Update Group
   * @param {string} imodelId Globally Unique Identifier of the target iModel.
   * @param {string} mappingId Globally Unique Identifier of the target Mapping.
   * @param {string} groupId Id of the Group to be updated.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {GroupUpdate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public updateGroup(
    imodelId: string,
    mappingId: string,
    groupId: string,
    Authorization: string,
    body?: GroupUpdate,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).updateGroup(
      imodelId,
      mappingId,
      groupId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a GroupProperty for a Group.    ### Mapping ECProperties    GroupProperties define mappings from ECProperties on an iModel to columns. They allow mapping the queried, element, element aspect, or related element properties.    Content of the columns depend on the `ecProperties` field. The `ecProperties` field is a prioritized array which contains `ECProperty` entities. The closer the `ECProperty` is to the array's start, the higher the priority. The priority of `ECProperty` can be changed by reordering the `ecProperties` array. Reading of the `ecProperties` array stops when a valid value is found. For example, if the `ecProperties` array contains two entries and the first entry results in a null or undefined value, it will take the second entry. The value can be undefined if the given ECProperty does not exist. The result column will be filled with a null value if no valid value was found.    Evaluating `ecProperties` is prioritized by:    1. Queried properties  2. Element properties  3. Element aspect properties    Having queried properties as the highest priority allows for constant or complex values to be added to a mapping.    `ECProperty` lookup is defined by three values - `ECSchemaName`, `ECClassName`, and `ECPropertyName`.    `ECSchemaName` and `ECClassName` are used together to create a ECClassId which is the ECClassId of the current row when selecting a property. If the ECClassId of a selected row does not match the `ECSchemaName` and `ECClassName` pair, the value for this `ECProperty` is considered undefined. If the formed ECClassId is of an element aspect, the current selected row is an element and there is only one instance of that element aspect related to the element, the property lookup is done on the element aspect.    `ECSchemaName` and `ECClassName` are case-insensitive.    `ECSchemaName` and `ECClassName` can be set to a wildcard value `*`.    - If the value of `ECSchemaName` is `*` and the value of `ECClassName` is `Beam`, then it will match any `Beam` class from any schema (e.g. `Building.Beam`, `Structural.Beam`, etc.)  - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `*`, then it will match any class from the schema `Building` (e.g. `Building.Beam`, `Building.CurtainWall`, etc.)  - If values of `ECSchemaName` and `ECClassName` are `*`, then it will match any ECClassId (e.g. `Building.Beam`, `Structural.Column`, etc.)  - If either value of `ECSchemaName` or `ECClassName` are `*`, then no element aspect lookup is done    Class inheritance is checked if there is no wildcard value.    - If the value of `ECSchemaName` is `Building` and the value of `ECClassName` is `StructuralMember`, then it will match any ECClassId which inherits `Building.StructuralMember` (e.g. `Building.Beam` which inherits `Building.StructuralMember`, `Building.Column` which inherits `Building.StructuralMember`, etc)  - If `ECSchemaName` or `ECClassName` is a wildcard, then inheritance will not be checked    Set `ECPropertyName` to a property name that you want to select. The value of `ECPropertyName` can also be a path defining how to find a property. The path segments must be separated by a period (`.`). The path can contain the names of:    - A navigation property  - A struct property  - A string property that happens to contain a string representation of a json object  - A property inside the selected json    Names of properties are not case sensitive. If json object does not have duplicate property names which only differ in letter casing, then those json properties are not case sensitive. We recommend treating json properties as case sensitive.    - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category` or `category`, then the whole value `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` will be selected  - If `Category` property is a navigation property with a value of `{\"id\":\"0x2000000000b\",\"relClassName\":\"BisCore.GeometricElement3dIsInCategory\"}` and the `ECPropertyName` is set to `Category.id`, then only the `id` value `0x2000000000b` will be selected  - If `Category` property is a navigation property and it points to a row that has a property `CodeValue` that we want to select, the `ECPropertyName` should be set to `Category.CodeValue`  - If `Model` property is a navigation property and it points to a row that has a property `JsonProperties` with a value `{\"formatter\":{\"mastUnit\":{\"label\":\"m\"}}}` and we want to select the master unit label, the `ECPropertyName` should be set to `Model.JsonProperties.formatter.mastUnit.label`. The result will be `m`    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Update GroupProperty
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId The Mapping Id.
   * @param {string} groupId The Group Id.
   * @param {string} propertyId Id of the GroupProperty to be updated.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {GroupPropertyUpdate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public updateGroupproperty(
    imodelId: string,
    mappingId: string,
    groupId: string,
    propertyId: string,
    Authorization: string,
    body?: GroupPropertyUpdate,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).updateGroupproperty(
      imodelId,
      mappingId,
      groupId,
      propertyId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a Mapping for an iModel.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_write` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Update Mapping
   * @param {string} imodelId The iModel Id.
   * @param {string} mappingId Id of the Mapping to be updated.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {MappingUpdate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MappingsApi
   */
  public updateMapping(
    imodelId: string,
    mappingId: string,
    Authorization: string,
    body?: MappingUpdate,
    Accept?: string,
    options?: any,
  ) {
    return MappingsApiFp(this.configuration).updateMapping(
      imodelId,
      mappingId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }
}
/**
 * ReportsApi - fetch parameter creator
 * @export
 */
export const ReportsApiFetchParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * ---    Creates a Report within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Report
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReport(
      Authorization: string,
      body?: ReportCreate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling createReport.',
        );
      }
      const localVarPath = `/reports/`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'ReportCreate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Creates a Report Mapping. Each one links a Mapping to a Report and each Report can have more than one Report Mapping.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read`, `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Report Mapping
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportMappingCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReportMapping(
      reportId: string,
      Authorization: string,
      body?: ReportMappingCreate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          'reportId',
          'Required parameter reportId was null or undefined when calling createReportMapping.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling createReportMapping.',
        );
      }
      const localVarPath =
        `/reports/{reportId}/datasources/imodelMappings`.replace(
          `{${'reportId'}}`,
          encodeURIComponent(String(reportId)),
        );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'ReportMappingCreate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Marks a Report for deletetion. Reports are permanently deleted one month after being marked for deletion. A Report marked for deletion can be restored if it hasn't been permanently deleted yet.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Report
     * @param {string} reportId Id of the Report to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReport(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          'reportId',
          'Required parameter reportId was null or undefined when calling deleteReport.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling deleteReport.',
        );
      }
      const localVarPath = `/reports/{reportId}`.replace(
        `{${'reportId'}}`,
        encodeURIComponent(String(reportId)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        options,
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Deletes a Report Mapping from a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Report Mapping
     * @param {string} reportId The Report Id.
     * @param {string} mappingId Id of the Report Mapping to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReportMapping(
      reportId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          'reportId',
          'Required parameter reportId was null or undefined when calling deleteReportMapping.',
        );
      }
      // verify required parameter 'mappingId' is not null or undefined
      if (mappingId === null || mappingId === undefined) {
        throw new RequiredError(
          'mappingId',
          'Required parameter mappingId was null or undefined when calling deleteReportMapping.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling deleteReportMapping.',
        );
      }
      const localVarPath =
        `/reports/{reportId}/datasources/imodelMappings/{mappingId}`
          .replace(`{${'reportId'}}`, encodeURIComponent(String(reportId)))
          .replace(`{${'mappingId'}}`, encodeURIComponent(String(mappingId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: 'DELETE' },
        options,
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all Reports within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Project Reports
     * @param {string} projectId The Project Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {boolean} [deleted] Optionally filter Reports by those marked for deletion. NOTE: Reports marked for deletion will be permanently deleted after 1 month unless deletion is reverted.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectReports(
      projectId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      deleted?: boolean,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError(
          'projectId',
          'Required parameter projectId was null or undefined when calling getProjectReports.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getProjectReports.',
        );
      }
      const localVarPath = `/reports`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (projectId !== undefined) {
        localVarQueryParameter['projectId'] = projectId;
      }

      if (top !== undefined) {
        localVarQueryParameter['$top'] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter['$continuationToken'] = continuationToken;
      }

      if (deleted !== undefined) {
        localVarQueryParameter['deleted'] = deleted;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets a single Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Report
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          'reportId',
          'Required parameter reportId was null or undefined when calling getReport.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getReport.',
        );
      }
      const localVarPath = `/reports/{reportId}`.replace(
        `{${'reportId'}}`,
        encodeURIComponent(String(reportId)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Gets all Report Mappings for a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Report Mappings
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportMappings(
      reportId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          'reportId',
          'Required parameter reportId was null or undefined when calling getReportMappings.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling getReportMappings.',
        );
      }
      const localVarPath =
        `/reports/{reportId}/datasources/imodelMappings`.replace(
          `{${'reportId'}}`,
          encodeURIComponent(String(reportId)),
        );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (top !== undefined) {
        localVarQueryParameter['$top'] = top;
      }

      if (continuationToken !== undefined) {
        localVarQueryParameter['$continuationToken'] = continuationToken;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ---    Updates a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Report
     * @param {string} reportId Id of the Report to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReport(
      reportId: string,
      Authorization: string,
      body?: ReportUpdate,
      Accept?: string,
      options: any = {},
    ): FetchArgs {
      // verify required parameter 'reportId' is not null or undefined
      if (reportId === null || reportId === undefined) {
        throw new RequiredError(
          'reportId',
          'Required parameter reportId was null or undefined when calling updateReport.',
        );
      }
      // verify required parameter 'Authorization' is not null or undefined
      if (Authorization === null || Authorization === undefined) {
        throw new RequiredError(
          'Authorization',
          'Required parameter Authorization was null or undefined when calling updateReport.',
        );
      }
      const localVarPath = `/reports/{reportId}`.replace(
        `{${'reportId'}}`,
        encodeURIComponent(String(reportId)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign(
        { method: 'PATCH' },
        options,
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apiKeyHeader required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('X-Api-Subscription-Key')
            : configuration.apiKey;
        localVarHeaderParameter['X-Api-Subscription-Key'] = localVarApiKeyValue;
      }

      // authentication apiKeyQuery required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('subscription-key')
            : configuration.apiKey;
        localVarQueryParameter['subscription-key'] = localVarApiKeyValue;
      }

      // authentication oauth2Bentley OAuth2 Service required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('oauth2Bentley OAuth2 Service', [
                'insights:read insights:modify',
              ])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      if (Authorization !== undefined && Authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(Authorization);
      }

      if (Accept !== undefined && Accept !== null) {
        localVarHeaderParameter['Accept'] = String(Accept);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers,
      );
      const needsSerialization =
        <any>'ReportUpdate' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(body || {})
        : body || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * ---    Creates a Report within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Report
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReport(
      Authorization: string,
      body?: ReportCreate,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ReportSingle> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration,
      ).createReport(Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Creates a Report Mapping. Each one links a Mapping to a Report and each Report can have more than one Report Mapping.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read`, `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Report Mapping
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportMappingCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReportMapping(
      reportId: string,
      Authorization: string,
      body?: ReportMappingCreate,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ReportMappingSingle> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration,
      ).createReportMapping(reportId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Marks a Report for deletetion. Reports are permanently deleted one month after being marked for deletion. A Report marked for deletion can be restored if it hasn't been permanently deleted yet.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Report
     * @param {string} reportId Id of the Report to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReport(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration,
      ).deleteReport(reportId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Deletes a Report Mapping from a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Report Mapping
     * @param {string} reportId The Report Id.
     * @param {string} mappingId Id of the Report Mapping to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReportMapping(
      reportId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration,
      ).deleteReportMapping(
        reportId,
        mappingId,
        Authorization,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all Reports within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Project Reports
     * @param {string} projectId The Project Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {boolean} [deleted] Optionally filter Reports by those marked for deletion. NOTE: Reports marked for deletion will be permanently deleted after 1 month unless deletion is reverted.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectReports(
      projectId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      deleted?: boolean,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ReportCollection> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration,
      ).getProjectReports(
        projectId,
        Authorization,
        top,
        continuationToken,
        deleted,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets a single Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Report
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ReportSingle> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration,
      ).getReport(reportId, Authorization, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Gets all Report Mappings for a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Report Mappings
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportMappings(
      reportId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ): (
      fetch?: FetchAPI,
      basePath?: string,
    ) => Promise<ReportMappingCollection> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration,
      ).getReportMappings(
        reportId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      );
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * ---    Updates a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Report
     * @param {string} reportId Id of the Report to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReport(
      reportId: string,
      Authorization: string,
      body?: ReportUpdate,
      Accept?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ReportSingle> {
      const localVarFetchArgs = ReportsApiFetchParamCreator(
        configuration,
      ).updateReport(reportId, Authorization, body, Accept, options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH,
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options,
        ).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string,
) {
  return {
    /**
     * ---    Creates a Report within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Report
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReport(
      Authorization: string,
      body?: ReportCreate,
      Accept?: string,
      options?: any,
    ) {
      return ReportsApiFp(configuration).createReport(
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Creates a Report Mapping. Each one links a Mapping to a Report and each Report can have more than one Report Mapping.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read`, `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Create Report Mapping
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportMappingCreate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReportMapping(
      reportId: string,
      Authorization: string,
      body?: ReportMappingCreate,
      Accept?: string,
      options?: any,
    ) {
      return ReportsApiFp(configuration).createReportMapping(
        reportId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Marks a Report for deletetion. Reports are permanently deleted one month after being marked for deletion. A Report marked for deletion can be restored if it hasn't been permanently deleted yet.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Report
     * @param {string} reportId Id of the Report to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReport(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return ReportsApiFp(configuration).deleteReport(
        reportId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Deletes a Report Mapping from a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Delete Report Mapping
     * @param {string} reportId The Report Id.
     * @param {string} mappingId Id of the Report Mapping to be deleted.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReportMapping(
      reportId: string,
      mappingId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return ReportsApiFp(configuration).deleteReportMapping(
        reportId,
        mappingId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets all Reports within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Project Reports
     * @param {string} projectId The Project Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {boolean} [deleted] Optionally filter Reports by those marked for deletion. NOTE: Reports marked for deletion will be permanently deleted after 1 month unless deletion is reverted.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectReports(
      projectId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      deleted?: boolean,
      Accept?: string,
      options?: any,
    ) {
      return ReportsApiFp(configuration).getProjectReports(
        projectId,
        Authorization,
        top,
        continuationToken,
        deleted,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets a single Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Report
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(
      reportId: string,
      Authorization: string,
      Accept?: string,
      options?: any,
    ) {
      return ReportsApiFp(configuration).getReport(
        reportId,
        Authorization,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Gets all Report Mappings for a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Get Report Mappings
     * @param {string} reportId The Report Id.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
     * @param {number} [top] Optional max items to be sent in response.
     * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportMappings(
      reportId: string,
      Authorization: string,
      top?: number,
      continuationToken?: string,
      Accept?: string,
      options?: any,
    ) {
      return ReportsApiFp(configuration).getReportMappings(
        reportId,
        Authorization,
        top,
        continuationToken,
        Accept,
        options,
      )(fetch, basePath);
    },
    /**
     * ---    Updates a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
     * @summary Update Report
     * @param {string} reportId Id of the Report to be updated.
     * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
     * @param {ReportUpdate} [body]
     * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReport(
      reportId: string,
      Authorization: string,
      body?: ReportUpdate,
      Accept?: string,
      options?: any,
    ) {
      return ReportsApiFp(configuration).updateReport(
        reportId,
        Authorization,
        body,
        Accept,
        options,
      )(fetch, basePath);
    },
  };
};

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
  /**
   * ---    Creates a Report within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create Report
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {ReportCreate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public createReport(
    Authorization: string,
    body?: ReportCreate,
    Accept?: string,
    options?: any,
  ) {
    return ReportsApiFp(this.configuration).createReport(
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Creates a Report Mapping. Each one links a Mapping to a Report and each Report can have more than one Report Mapping.     ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `imodels_read`, `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Create Report Mapping
   * @param {string} reportId The Report Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {ReportMappingCreate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public createReportMapping(
    reportId: string,
    Authorization: string,
    body?: ReportMappingCreate,
    Accept?: string,
    options?: any,
  ) {
    return ReportsApiFp(this.configuration).createReportMapping(
      reportId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Marks a Report for deletetion. Reports are permanently deleted one month after being marked for deletion. A Report marked for deletion can be restored if it hasn't been permanently deleted yet.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete Report
   * @param {string} reportId Id of the Report to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public deleteReport(
    reportId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return ReportsApiFp(this.configuration).deleteReport(
      reportId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Deletes a Report Mapping from a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Delete Report Mapping
   * @param {string} reportId The Report Id.
   * @param {string} mappingId Id of the Report Mapping to be deleted.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public deleteReportMapping(
    reportId: string,
    mappingId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return ReportsApiFp(this.configuration).deleteReportMapping(
      reportId,
      mappingId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all Reports within the context of a Project.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Project Reports
   * @param {string} projectId The Project Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {boolean} [deleted] Optionally filter Reports by those marked for deletion. NOTE: Reports marked for deletion will be permanently deleted after 1 month unless deletion is reverted.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getProjectReports(
    projectId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    deleted?: boolean,
    Accept?: string,
    options?: any,
  ) {
    return ReportsApiFp(this.configuration).getProjectReports(
      projectId,
      Authorization,
      top,
      continuationToken,
      deleted,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets a single Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Report
   * @param {string} reportId The Report Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReport(
    reportId: string,
    Authorization: string,
    Accept?: string,
    options?: any,
  ) {
    return ReportsApiFp(this.configuration).getReport(
      reportId,
      Authorization,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Gets all Report Mappings for a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:read`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_view` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Get Report Mappings
   * @param {string} reportId The Report Id.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:read&#x60;
   * @param {number} [top] Optional max items to be sent in response.
   * @param {string} [continuationToken] Optional token to retrieve next page in paginated response.
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public getReportMappings(
    reportId: string,
    Authorization: string,
    top?: number,
    continuationToken?: string,
    Accept?: string,
    options?: any,
  ) {
    return ReportsApiFp(this.configuration).getReportMappings(
      reportId,
      Authorization,
      top,
      continuationToken,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   * ---    Updates a Report.    ### Authentication    Requires `Authorization` header with valid Bearer token for scope `insights:modify`.    For more documentation on authorization and how to get access token visit [OAUTH2 Authorization](https://developer.bentley.com/apis/overview/authorization/) page.    ### Authorization    User must have `insights_modify` permission(s) assigned at the Project level. iModel specific permissions may also be applied at the iModel level if iModel level permissions are enabled.    Alternatively the user should be an Organization Administrator for the Organization that owns a given Project or iModel.    An Organization Administrator must have at least one of the following roles assigned in User Management: Account Administrator, Co-Administrator, or CONNECT Services Administrator. For more information about User Management please visit our Bentley Communities [Licensing, Cloud, and Web Services](https://communities.bentley.com/communities/other_communities/licensing_cloud_and_web_services/w/wiki/50711/user-management-2-0) wiki page.    ### Rate limits    All iTwin Platform API operations have a rate limit. For more documentation on that visit [Rate limits and quotas](https://developer.bentley.com/apis/overview/rate-limits/) page.    ---
   * @summary Update Report
   * @param {string} reportId Id of the Report to be updated.
   * @param {string} Authorization OAuth access token with scope &#x60;insights:modify&#x60;
   * @param {ReportUpdate} [body]
   * @param {string} [Accept] Setting to &#x60;application/vnd.bentley.itwin-platform.v1+json&#x60; is recommended.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReportsApi
   */
  public updateReport(
    reportId: string,
    Authorization: string,
    body?: ReportUpdate,
    Accept?: string,
    options?: any,
  ) {
    return ReportsApiFp(this.configuration).updateReport(
      reportId,
      Authorization,
      body,
      Accept,
      options,
    )(this.fetch, this.basePath);
  }
}
